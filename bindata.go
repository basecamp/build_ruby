// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/Dockerfile-bionic-libssl-yjit.template (1.922kB)
// data/Dockerfile-bionic-libssl.template (1.897kB)
// data/Dockerfile-bionic-yjit.template (1.73kB)
// data/Dockerfile-bionic.template (1.652kB)
// data/Dockerfile.template (1.65kB)
// data/Gemfile.bionic (115B)
// data/Gemfile.bionic.lock (827B)
// data/Gemfile.template (93B)
// data/Gemfile.template.lock (825B)
// data/patches/1.0.0/01_for_tests (3B)
// data/patches/1.0.0/02_for_tests (3B)
// data/patches/1.9.3-p551/01_strict_hostname_checking.patch (13.196kB)
// data/patches/2.0.0-p0/01_readline.patch (1.151kB)
// data/patches/2.0.0-p195/01_readline.patch (1.151kB)
// data/patches/2.0.0-p247/01_readline.patch (1.151kB)
// data/patches/2.0.0-p353/01_readline.patch (1.151kB)
// data/patches/2.0.0-p451/01_readline.patch (1.151kB)
// data/patches/2.1.0/01_readline.patch (1.712kB)
// data/patches/2.1.1/01_readline.patch (1.712kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDockerfileBionicLibsslYjitTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x61\x6f\xdc\x36\x0f\xfe\xee\x5f\x41\x24\x2f\x10\xe0\x45\x65\xe7\x92\x34\xcd\x65\xcb\x80\x22\x59\x8b\x60\x5b\x53\x5c\xd6\xdd\x87\xb5\x40\x65\x89\xf6\xb1\x91\x25\x43\xa2\x73\xb9\x78\xfe\xef\x83\xe4\xbb\xc4\xd9\x3a\x7f\x30\xc8\x87\xa4\x48\x89\xe4\xb3\x0f\x37\xd6\x6c\xa0\xf5\x4e\x77\x0a\x03\x94\x1d\x19\x1d\xa0\x72\x1e\x7c\x57\x6e\xe0\xa7\x0b\x38\xca\x4f\x40\x77\x08\xec\x80\x57\x08\x16\xd7\xe8\xc1\xb5\x68\x43\x30\xd9\x3e\x04\x44\x58\x31\xb7\xe1\xbc\x28\x8e\xf3\x52\x06\x54\xb2\x69\x73\xe5\x9a\xe2\x68\x3e\x3b\x39\x7c\x33\x2f\xca\x4e\xdd\x21\x87\xe2\x68\x76\xfc\xfa\xf0\x74\x7e\x58\xb0\xd3\x2e\x14\x27\x47\x87\xf3\xb3\x93\xf9\xec\xe8\x2c\xdb\xcf\xf6\x61\x89\x10\x56\xae\x33\x1a\xb4\x77\x2d\xf0\x8a\x02\xdc\x4b\x4f\xd2\x32\xac\x57\x68\x61\x8d\xd0\xb8\x7b\x84\x12\x37\xce\x6a\x28\xc9\x59\x52\x59\xb6\x0f\x97\xd2\x1e\x30\x74\x01\xa1\xef\xf3\x2b\x0a\xec\xdd\x30\x40\x20\xab\x10\x88\x0f\x02\x74\x65\x67\xb9\x3b\x9f\x9d\xe5\x87\x27\xe7\x86\xca\x58\xf9\xbb\xc5\xcd\x6f\x2f\x0c\xd9\xe2\xd3\x07\x90\x2d\x8b\x1a\x19\xba\x56\x4b\xc6\x17\x10\xd9\xc0\xd2\x18\x10\x9b\xf1\x95\x04\x86\x80\x96\x49\x1a\xf8\x9c\x01\x00\x18\x2a\xd5\xa9\xd0\x78\x1f\xa5\xaa\xa2\x9d\x58\xeb\xb2\xd9\xc9\x56\x75\x3e\x60\x78\x9d\xf4\xa7\x30\x8f\x52\x1b\xb2\xb8\xf3\x0a\xc1\xec\xc4\x8d\x6c\x46\xf9\xd1\x50\x39\xab\x93\xe8\xbb\xc0\x6a\x1b\xad\x3a\x6f\xc6\x56\xc5\x5f\x34\xa7\xa2\xff\xdc\x2b\xba\xe0\x8b\x92\x6c\x51\x63\xb3\xf7\x0a\xf6\xb6\xe5\x47\xb1\xec\xac\x36\xe8\xa3\x28\xee\xe3\x7f\x96\xcf\xde\xe4\xc7\x49\x17\xd6\x09\xaf\x9d\x7a\x56\x68\xef\x4b\xf6\xf6\xea\x0a\xde\x63\x53\x91\x41\x28\xa6\x5a\x6e\x9c\xba\x83\x62\x9b\x73\x3c\x78\x9a\xed\x4b\x96\x4c\xa9\xca\xd8\x1c\xb7\xb6\xc6\x49\xfd\xc9\x9b\x61\xf8\x8b\xa5\x07\xf7\xf0\x78\x09\x05\x37\x6d\xd6\xf7\x5e\xda\x1a\x21\xff\x28\x59\xad\x30\x0c\x43\xcc\xd3\xf7\xf9\x30\x40\x91\xf5\x3d\x5a\x3d\x0c\xd9\xf2\x66\xf1\xcb\xd5\xf5\x22\x85\x14\xe9\xca\x7d\x9f\x2f\xba\x72\xf3\x07\xfa\x40\xce\x0e\x43\x4a\x18\x07\x98\x80\x2c\x7c\x4d\x6f\x60\x02\x14\xff\xcf\xdb\x78\xf0\xd7\x1f\x40\x3b\x48\x22\x88\xf6\x10\x7e\x84\xff\x51\x84\xec\xd8\xed\xcb\x77\xbf\xbe\x7d\x7f\x7b\x71\x20\x1a\xe9\xd5\xea\xe2\xe1\xec\x54\x9c\x9e\x80\xb8\x39\x06\x51\x59\x27\x2a\x19\x58\x34\x92\x57\x20\xea\x63\x10\x75\xad\x4b\x10\xcb\x34\x16\x4b\x7c\x60\x2f\x41\x2c\xad\x13\x9d\xed\x02\x6a\xd1\x4a\x2f\x1b\x64\xf4\x23\xda\x4a\x8f\x96\x57\x18\x30\x8c\x80\x71\xb6\x4e\xbf\x51\x6d\x28\x04\xb2\xb5\xa8\x08\x8d\x16\x64\x29\x0e\x17\x3d\xa2\x8f\xee\xdb\x23\xd3\x46\x94\x06\x41\x2c\x5b\x47\x96\xd1\x0b\xe9\x29\xd6\xb3\x5c\x7b\x62\x14\x81\x3d\xd9\x3a\x46\x68\x54\x46\x7a\xc9\xe4\xac\x90\x55\xf4\x0c\x2c\x19\x1b\xb4\x0c\x62\x49\x4d\x6b\x48\x11\x8b\xaa\xb3\x2a\xf9\x4c\xfc\x53\x74\xeb\x51\x49\x46\x3d\x35\x84\xdd\x4d\xd4\x1d\x6a\x51\x12\x8f\xb5\x2a\xd7\xb4\x92\x41\x04\xd6\x17\x14\xdc\xfc\x6c\x3e\x3f\x9f\xcd\xe7\x73\x00\x51\x7d\xbc\xbe\x3c\x80\xbc\x50\xce\x56\x54\x77\x1e\xd3\xe0\x0a\xd1\x7a\xac\xe8\xe1\xa2\x70\x2d\xa7\x3e\xfe\xb3\x8d\x5b\x37\xb4\xf1\xb6\x22\xac\xa4\x47\xbd\xc5\x34\x85\x04\x6e\x87\x4c\x68\xa7\x5e\x7a\xc7\x11\x13\x1e\x8d\x64\xba\x1f\xf3\x3d\xdb\x36\xdf\x88\xb3\x7d\xb8\x45\x6c\x42\xe4\x34\x17\xf9\x4f\x56\x15\x2a\x86\xe0\x1a\x84\x59\x3e\x87\x80\x9e\x30\xc0\xa2\x2b\x09\xc3\x2b\x28\x3b\x4e\xdc\xa7\x5c\x53\x92\x45\x0d\x8d\xbc\x43\x08\x8c\xed\x79\xa2\xae\xf8\xc5\xe1\x49\xb0\xf8\x76\xf6\xc4\x15\x57\x3f\xdf\xfe\x7e\x75\xbd\xb8\x48\xd3\x5a\xb5\x4d\xf2\xe6\x95\x64\xf0\xd2\xa6\x23\x53\x08\x47\x7a\x4b\xd2\x36\xf0\x15\xac\x65\x80\xd2\xbb\x3b\xb4\x39\xdc\xb6\x86\x98\xc9\xd6\x40\x91\x99\x80\x2c\xbb\x78\xce\xda\x41\xc0\x38\x63\x9c\x4a\x6b\xa4\xd5\x01\xd6\xce\xdf\x05\xa8\xc8\xe2\x79\x36\xa9\xa9\xef\xf3\x0f\x5d\x73\xf9\xf1\xd3\x76\x41\xa6\xd9\xfe\x5d\xe6\xf3\x9a\x8d\xdb\xd4\x36\x5b\xba\x11\x01\x34\xf9\x9d\xc2\xa0\xb1\xdc\x29\x16\xbe\xbb\x8e\x3b\xb3\x8c\xab\xfc\xd6\xab\xd5\x33\x74\x0f\xff\xe1\xdc\xf7\xf9\x35\xe3\x38\x71\xc3\x30\x3a\xeb\x09\xbf\x7e\x9e\x40\x3b\xa2\x9d\x62\x4f\x8c\x3b\x05\xbf\x43\xbd\xa3\xe1\x05\xfb\x4e\x0d\x3b\x1a\x9e\x62\x4f\x7c\xfc\x04\x4e\x88\x79\x8b\x8d\x84\x56\x4c\x5e\xad\x85\xa2\xef\xf3\x77\x64\xf0\x83\x6c\xf0\xe9\x9e\xae\xe5\xec\xef\x00\x00\x00\xff\xff\x94\x24\x32\x4c\x82\x07\x00\x00")

func dataDockerfileBionicLibsslYjitTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileBionicLibsslYjitTemplate,
		"data/Dockerfile-bionic-libssl-yjit.template",
	)
}

func dataDockerfileBionicLibsslYjitTemplate() (*asset, error) {
	bytes, err := dataDockerfileBionicLibsslYjitTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-bionic-libssl-yjit.template", size: 1922, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x10, 0xcf, 0x23, 0xe4, 0x20, 0xe2, 0x4, 0xe1, 0x12, 0x6c, 0xf0, 0x40, 0x85, 0xf2, 0x41, 0x78, 0xbf, 0xe5, 0xc9, 0xbd, 0xd9, 0xa9, 0x4, 0xd7, 0x73, 0x18, 0x43, 0x23, 0xb8, 0xeb, 0xca}}
	return a, nil
}

var _dataDockerfileBionicLibsslTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x61\x6f\xdc\x36\x0f\xfe\xee\x5f\x41\x24\x2f\x10\xe0\x45\x65\xe7\x92\x34\xcd\x65\xcb\x80\x22\x59\x8b\x60\x5b\x53\x5c\xd6\xdd\x87\xb5\x40\x65\x8b\xbe\xe3\x22\x4b\x86\x48\xe7\x92\x7a\xfe\xef\x83\xe4\xbb\xd4\x59\x3b\x7f\x30\xc8\x87\xa4\x44\x49\x0f\x9f\x7d\xb8\x71\xf6\x11\xda\xe0\x4d\x57\x21\x43\xd9\x91\x35\x0c\xb5\x0f\x10\xba\xf2\x11\x7e\xba\x80\xa3\xfc\x04\x4c\x87\x20\x1e\x64\x8d\xe0\x70\x83\x01\x7c\x8b\x8e\xd9\x66\xfb\xc0\x88\xb0\x16\x69\xf9\xbc\x28\x8e\xf3\x52\x33\x56\xba\x69\xf3\xca\x37\xc5\xd1\x7c\x76\x72\xf8\x6a\x5e\x94\x5d\x75\x87\xc2\xc5\xd1\xec\xf8\xe5\xe1\xe9\xfc\xb0\x10\x6f\x3c\x17\x27\x47\x87\xf3\xb3\x93\xf9\xec\xe8\x2c\xdb\xcf\xf6\x61\x89\xc0\x6b\xdf\x59\x03\x26\xf8\x16\x64\x4d\x0c\xf7\x3a\x90\x76\x02\x9b\x35\x3a\xd8\x20\x34\xfe\x1e\xa1\xc4\x47\xef\x0c\x94\xe4\x1d\x55\x59\xb6\x0f\x97\xda\x1d\x08\x74\x8c\xd0\xf7\xf9\x15\xb1\x04\x3f\x0c\xc0\xe4\x2a\x04\x92\x03\x86\xae\xec\x9c\x74\xe7\xb3\xb3\xfc\xf0\xe4\xdc\x52\x19\x3b\x7f\xb3\xb8\xf9\xed\x59\x20\x5b\x7c\x78\x07\xba\x15\xb5\x42\x81\xae\x35\x5a\xf0\x19\x44\x8e\x45\x5b\x0b\xea\x71\xbc\x25\x85\xcc\xe8\x84\xb4\x85\x8f\x19\x00\x80\xa5\xb2\x3a\x55\x06\xef\xa3\x55\xd7\xb4\x33\x57\xa6\x6c\x76\xb6\xab\xba\xc0\xc8\x2f\x93\xff\x54\x16\x50\x1b\x4b\x0e\x77\x59\xcc\x76\x67\x3e\xea\x66\xb4\xbf\x58\x2a\x67\xab\x49\x5d\xd5\x05\x3b\x3e\x52\xfc\xc5\x40\x6a\xf7\xcf\xbd\xa2\xe3\x50\x94\xe4\x8a\x15\x36\x7b\x2f\x60\x6f\xdb\x78\x34\xcb\xce\x19\x8b\x21\x9a\xea\x3e\xfe\x67\xf9\xec\x55\x7e\x9c\x7c\xe5\xbc\x0a\xc6\x57\x5f\x1d\xda\xfb\x94\xbd\xbe\xba\x82\xb7\xd8\xd4\x64\x11\x8a\xa9\x97\x5b\x5f\xdd\x41\xb1\xdd\x73\x5c\x78\xba\xdb\xa7\x2c\x85\x52\x97\xf1\x59\xfc\xc6\x59\xaf\xcd\x87\x60\x87\xe1\x6f\xd1\x01\xfc\xc3\x97\x4b\x28\xa4\x69\xb3\xbe\x0f\xda\xad\x10\xf2\xf7\x5a\xaa\x35\xf2\x30\xc4\x7d\xfa\x3e\x1f\x06\x28\xb2\xbe\x47\x67\x86\x21\x5b\xde\x2c\x7e\xb9\xba\x5e\xa4\x92\x22\x1d\xb9\xef\xf3\x45\x57\x3e\xfe\x81\x81\xc9\xbb\x61\x48\x1b\x46\xea\x12\x90\x83\xcf\xe9\x0e\x2c\x43\xf1\xff\xbc\x8d\x0b\x7f\xfe\x01\x8c\x87\x64\x82\x6a\x0f\xe1\x47\xf8\x1f\x45\xc8\x8d\xef\x7c\xf9\xe6\xd7\xd7\x6f\x6f\x2f\x0e\x54\xa3\x43\xb5\xbe\x78\x38\x3b\x55\xa7\x27\xa0\x6e\x8e\x41\xd5\xce\xab\x5a\xb3\xa8\x46\xcb\x1a\xd4\xea\x18\xd4\x6a\x65\x4a\x50\xcb\x44\x88\x25\x3e\x48\xd0\xa0\x96\xce\xab\xce\x75\x8c\x46\xb5\x3a\xe8\x06\x05\xc3\x88\xb6\x3a\xa0\x93\x35\x32\xf2\x08\x58\xef\x56\xe9\x37\xba\x0d\x31\x93\x5b\xa9\x9a\xd0\x1a\x45\x8e\x22\xad\xe8\x0b\x86\x98\xbe\x5d\x32\xcd\x42\x69\x11\xd4\xb2\xf5\xe4\x04\x83\xd2\x81\x62\x3f\xcb\x4d\x20\x41\xc5\x12\xc8\xad\x62\x85\xc1\xca\xea\xa0\x85\xbc\x53\xba\x8e\x99\x2c\x5a\xb0\x41\x27\xa0\x96\xd4\xb4\x96\x2a\x12\x55\x77\xae\x4a\x39\x93\xfc\x54\xdd\x06\xac\xb4\xa0\x99\x06\x78\x77\x92\xea\x0e\x8d\x2a\x49\xc6\x5e\x2b\xdf\xb4\x5a\x40\xb1\x98\x0b\x62\x3f\x3f\x9b\xcf\xcf\x67\xf3\xf9\x1c\x40\xd5\xef\xaf\x2f\x0f\x20\x2f\x2a\xef\x6a\x5a\x75\x01\x13\x71\x95\x6a\x03\xd6\xf4\x70\x51\xf8\x56\xd2\x3b\xfe\xfb\x19\xb7\x69\xe8\xe2\x69\x15\xaf\x75\x40\xb3\xc5\x0c\x71\x02\xb7\x24\x53\xc6\x57\xcf\xb3\x23\xc5\x54\x40\xab\x85\xee\x31\xdb\x87\x5b\xc4\x86\xa3\x74\xf9\x28\x73\xba\xae\xb1\x12\x60\xdf\x20\xcc\xf2\x39\x30\x06\x42\x86\x45\x57\x12\xf2\x0b\x28\x3b\x49\x12\x57\xf9\xa6\x24\x87\x06\x1a\x7d\x87\xc0\x82\xed\x79\x52\xa8\xf8\x45\xa6\x24\x58\xfd\x75\xf6\x24\x09\x57\x3f\xdf\xfe\x7e\x75\xbd\xb8\x48\xd4\xac\xdb\x26\x65\xcb\x5a\x0b\x04\xed\xd2\x92\xa9\x44\xa2\x8a\x25\x6b\x5b\xf8\x02\x36\x9a\xa1\x0c\xfe\x0e\x5d\x0e\xb7\xad\x25\x11\x72\x2b\xa0\x28\x40\x40\x4e\x7c\x5c\x67\xe3\x81\x31\x12\x4a\x52\x6b\x8d\x76\x86\x61\xe3\xc3\x1d\x43\x4d\x0e\xcf\xb3\x49\x4f\x7d\x9f\xbf\xeb\x9a\xcb\xf7\x1f\xb6\xd3\x30\xdd\xed\xdb\x36\xbf\xce\xd4\x38\x3a\x6d\xb3\xd5\x16\xc5\x60\x28\xec\x1c\x01\x83\xe5\xce\x71\xf0\xdd\xd9\xdb\x85\x75\x9c\xdb\xd7\xa1\x5a\x7f\x85\xee\xe1\x3f\x92\xfb\x3e\xbf\x16\x1c\xe9\x35\x0c\x63\xb2\x99\xc8\xe8\xc7\x09\xb4\xd3\xd3\x29\xf6\x24\xac\x53\xf0\x3b\x0a\x3b\x06\x9e\x89\xec\x34\xb0\x53\xdb\x29\xf6\x24\xbb\x4f\xe0\x37\xfa\xab\x46\xf5\x2a\x26\xb7\xd6\x42\xd1\xf7\xf9\x1b\xb2\xf8\x4e\x37\xf8\x74\x4e\xdf\x4a\xf6\x4f\x00\x00\x00\xff\xff\xdb\xb9\x89\xd9\x69\x07\x00\x00")

func dataDockerfileBionicLibsslTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileBionicLibsslTemplate,
		"data/Dockerfile-bionic-libssl.template",
	)
}

func dataDockerfileBionicLibsslTemplate() (*asset, error) {
	bytes, err := dataDockerfileBionicLibsslTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-bionic-libssl.template", size: 1897, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0xff, 0xb3, 0xc6, 0xde, 0xc9, 0xe5, 0x1b, 0xe1, 0xc9, 0xc8, 0x21, 0xa3, 0xcc, 0x3, 0x6, 0x3b, 0x85, 0xfc, 0x30, 0x8, 0xc, 0x3c, 0x40, 0x1f, 0x9b, 0xeb, 0x87, 0x86, 0xee, 0xf1, 0xe7}}
	return a, nil
}

var _dataDockerfileBionicYjitTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x51\x4f\xe4\x36\x10\x7e\xcf\xaf\x18\x41\x25\xa4\x0a\x27\xac\xb8\x52\x96\x96\x07\xc4\x96\x13\x6a\x0b\x68\x29\xdd\x87\xde\x49\xe7\xc4\x93\xec\x1c\x8e\x1d\xd9\x13\x60\x49\xf3\xdf\x2b\x3b\xd9\x25\xb4\xd7\x97\x68\xe6\x9b\x6f\xc6\xe3\x78\xe6\xdb\x87\x4b\x69\x0e\x18\x5a\x8f\xd0\x75\xe9\x82\x3c\x3b\xdb\xf7\xe0\xc9\x14\x08\xc4\x07\x1e\xda\xbc\x35\xdc\x9e\xcd\x4e\xd3\xa3\x0f\x67\x9b\xaf\xc4\xc9\xd5\xf2\xf6\xf7\x77\x70\xb2\x7c\xb8\x01\xd9\xb0\xa8\x90\xa1\x6d\x94\x64\x7c\x07\x91\xf1\x2c\xb5\x06\xb1\x81\xbc\x25\xad\x04\x7a\x8f\x86\x49\x6a\xf8\x94\x00\x00\x68\xca\x8b\x13\xa1\xf0\x29\x58\x65\x49\x5b\xb3\x52\x79\xbd\xb5\x4d\xd1\x3a\x8f\xfe\x87\xe8\xef\xd2\x1c\x4a\xa5\xc9\xe0\x96\xe5\xbd\x9e\xa5\x47\x5b\x6f\x23\x6b\x1d\xed\x57\x4d\xf9\xac\x8a\xa6\x6b\x3d\x17\x63\x81\xa2\x75\x1a\x5c\x9b\x6f\xe2\x27\x84\x63\xdf\x7f\xed\x65\xad\x77\x59\x4e\x26\xab\xb0\xde\x3b\x84\xbd\xf1\x06\xc1\xcc\x5b\xa3\x34\xba\x60\x8a\xa7\xf0\x9d\xa5\xb3\x1f\xd3\xe3\xe8\x0b\x63\x85\x53\xb6\x78\x73\x68\xef\x73\x72\xb1\x58\xc0\x47\xac\x4b\xd2\x08\xd9\xd4\x4b\xb5\x2d\x1e\x21\x1b\xcf\x1c\x0a\x4f\x4f\xfb\x9c\xc4\x50\xec\x32\xbc\x8e\x7d\x36\xda\x4a\xf5\xe0\x74\xdf\xff\xcd\xd2\x81\x7d\x79\xbd\x84\x8c\xeb\x26\xe9\x3a\x27\x4d\x85\x90\xde\x49\x2e\xd6\xe8\xfb\x3e\x9c\xd3\x75\x69\xdf\x43\x96\x74\x1d\x1a\xd5\xf7\xc9\xea\x76\xf9\xeb\xe2\x7a\x19\x53\xb2\x78\xe5\xae\x4b\x97\x6d\xbe\xf9\x13\x9d\x27\x6b\xfa\x3e\x1e\x58\x5a\x07\x04\x64\xe0\x4b\xfc\x07\xda\x43\xf6\x7d\xda\x84\xc2\x5f\x7e\x02\x65\x21\x9a\x20\x9a\x23\xf8\x19\xbe\xa3\x00\x99\xe1\xc1\x2f\xaf\x7e\xbb\xf8\x78\x7f\x7e\x20\x6a\xe9\x8a\xf5\xf9\xcb\xe9\x89\x38\xf9\x00\xe2\xf6\x18\x44\x69\xac\x28\xa5\x67\x51\x4b\x5e\x83\xa8\x8e\x41\x54\x95\xca\x41\xac\xe2\x64\xac\xf0\x85\x9d\x04\xb1\x32\x56\xb4\xa6\xf5\xa8\x44\x23\x9d\xac\x91\xd1\x0d\x68\x23\x1d\x1a\x5e\xa3\x47\x3f\x00\xda\x9a\x2a\x7e\x06\xb7\x26\xef\xc9\x54\xa2\x24\xd4\x4a\x90\xa1\x30\x5f\xf4\x8a\x2e\xd0\xc7\x92\x4f\xd2\x91\xcc\x35\x82\x58\x35\x96\x0c\xa3\x13\xd2\x51\xe8\x67\xf5\xec\x88\x51\x78\x76\x64\xaa\x90\xa1\xb0\xd0\xd2\x49\x26\x6b\x84\x2c\x03\xd3\xb3\x64\xac\xd1\x30\x88\x15\xd5\x8d\xa6\x82\x58\x94\xad\x29\x22\x67\xc2\x8f\xd9\x8d\xc3\x42\x32\xaa\x69\xc0\x6f\x6f\x52\x3c\xa2\x12\x39\xf1\xd0\x6b\x61\xeb\x46\x32\x08\xcf\xea\x9c\xbc\x9d\x9f\xce\xe7\x67\xb3\xf9\x7c\x0e\x20\xca\xbb\xeb\xcb\x03\x48\xb3\xc2\x9a\x92\xaa\xd6\x61\x1c\x5c\x21\x1a\x87\x25\xbd\x9c\x67\xb6\xe1\xf8\x8e\xff\x7e\xc6\x91\x86\x26\xdc\x56\xf8\xb5\x74\xa8\x46\x4c\x91\x8f\xe0\x38\x64\x42\xd9\xe2\x3d\x3b\x8c\x98\x70\xa8\x25\xd3\x13\xbe\x0f\xc5\xf5\xdf\x87\x7b\xc4\xda\x03\x5b\xb0\x46\x6f\x40\x96\x25\x16\x0c\xde\xd6\x08\xb3\x74\x0e\x1e\x1d\xa1\x87\x65\x9b\x13\xfa\x43\xc8\x5b\x06\x5e\x23\x14\xb6\xce\xc9\xa0\x82\x5a\x3e\x22\x78\xc6\xe6\x2c\xd9\x4f\xf6\xc3\x1a\x42\x98\x9d\x08\x8b\xaf\xa7\x3b\xb5\x58\xfc\x72\xff\xc7\xe2\x7a\x79\x1e\x87\xb5\x6c\xea\xc8\xe6\xb5\x64\x70\xd2\xc4\x92\x31\x85\xd7\x68\x06\x6b\x4c\x3c\x84\x67\xe9\x21\x77\xf6\x11\x4d\x0a\xf7\x8d\x26\x66\x32\x15\x50\xd0\x26\x20\xc3\x36\xd4\x79\xb6\xe0\x31\x8c\x18\xc7\xd6\x6a\x69\x94\x87\x67\xeb\x1e\x3d\x94\x64\xf0\x2c\x99\xf4\xd4\x75\xe9\x4d\x5b\x5f\xde\x3d\x8c\xfb\x31\x3d\xed\xbf\x6d\xbe\x6d\xd9\xb0\x4c\x4d\x3d\xaa\x8d\xf0\xa0\xc8\x6d\x1d\x06\x85\xf9\xd6\x31\xf0\xcd\x6d\xdc\x86\x65\xd8\xe4\x0b\x57\xac\xdf\xa0\x27\xf8\x1f\x72\xd7\xa5\xd7\x8c\xc3\xc0\xf5\xfd\x40\x56\x13\x85\xfd\x34\x81\xb6\x52\x3b\xc5\x76\x9a\x3b\x05\xbf\x21\xbe\x43\xe0\x9d\xfe\x4e\x03\x13\x21\x9e\xc2\x3b\x45\xde\x81\x13\x69\x1e\xb1\x41\xd2\xb2\xc9\x8f\x6b\x20\xeb\xba\xf4\x8a\x34\xde\xc8\x1a\x77\x57\xb5\x0d\x27\xff\x04\x00\x00\xff\xff\xa4\x2b\x26\xd6\xc2\x06\x00\x00")

func dataDockerfileBionicYjitTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileBionicYjitTemplate,
		"data/Dockerfile-bionic-yjit.template",
	)
}

func dataDockerfileBionicYjitTemplate() (*asset, error) {
	bytes, err := dataDockerfileBionicYjitTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-bionic-yjit.template", size: 1730, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x46, 0x8, 0xf9, 0x8c, 0x4b, 0x74, 0x8d, 0x90, 0x92, 0x30, 0xb6, 0xdb, 0xd3, 0x9, 0x3d, 0x62, 0x45, 0xb9, 0xe, 0xc9, 0xa9, 0x41, 0x71, 0x5e, 0x29, 0xf6, 0x1, 0x21, 0x30, 0xe, 0x1f, 0xe1}}
	return a, nil
}

var _dataDockerfileBionicTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x4d\x6f\xe4\x36\x0c\xbd\xfb\x57\x10\x49\x81\x05\x8a\xc8\xde\x41\xda\x34\x93\x36\x87\x20\xd3\x2c\x82\xb6\x49\x30\x69\x3a\x87\xee\x02\x2b\x5b\xb4\x87\x8d\x3e\x0c\x89\xce\x97\xeb\xff\x5e\x48\x9e\x99\x38\xdd\xdd\x8b\x40\x3e\x3e\x4a\x94\x44\xbe\x8b\xe5\xf5\x1f\xd0\xf7\xf9\x82\x02\x7b\x37\x0c\xd9\xf2\xee\x0a\x64\xcb\xa2\x41\x86\xae\x55\x92\xf1\x0d\x44\x36\xb0\xd4\x1a\xc4\x33\x94\x1d\x69\x25\x30\x04\xb4\x4c\x52\xc3\xc7\x0c\x00\x40\x53\x59\x1d\x09\x85\x0f\xd1\xaa\x6b\xda\x9a\x8d\x2a\xcd\xd6\xb6\x55\xe7\x03\x86\x1f\x93\xbf\x4b\xf3\x28\x95\x26\x8b\x5b\x56\x08\x7a\x96\xbf\xdf\x7a\xcf\xd2\xe8\x64\xbf\x68\x2a\x67\xcd\x24\xb5\xea\xbc\x06\xdf\x95\xcf\x69\x89\x81\x54\xf1\xdf\x7b\x45\x17\x7c\x51\x92\x2d\x1a\x34\x7b\x07\xb0\xb7\xa9\x3d\x9a\x65\x67\x95\x46\x1f\x4d\xf1\x10\xd7\x59\x3e\xfb\x29\x3f\x4c\xbe\xb0\x4e\x78\xe5\xaa\x57\x87\xf6\x3e\x65\x67\x8b\x05\x7c\x40\x53\x93\x46\x28\xa6\x5e\xae\x5d\x75\x0f\xc5\xe6\xcc\x71\xe3\xe9\x69\x9f\xb2\x14\x4a\x55\xc6\x87\x76\x8f\x56\x3b\xa9\xee\xbc\x1e\x86\x7f\x59\x7a\x70\x4f\x2f\xe7\x50\xb0\x69\xb3\xbe\xf7\xd2\x36\x08\xf9\x8d\xe4\x6a\x8d\x61\x18\xe2\x39\x7d\x9f\x0f\x03\x14\x59\xdf\xa3\x55\xc3\x90\xad\xae\x97\xbf\x2d\x2e\x97\x29\xa5\x48\x57\xee\xfb\x7c\xd9\x95\xcf\x7f\xa1\x0f\xe4\xec\xe6\x13\x6b\xe7\x81\x80\x2c\x7c\x4e\x6f\xa0\x03\x14\xdf\xe7\x6d\xdc\xf8\xf3\xcf\xa0\x1c\x24\x13\x44\xfb\x1e\x7e\x81\xef\x28\x42\x76\xfc\xea\xf3\x8b\xdf\xcf\x3e\xdc\x9e\xbe\x13\x46\xfa\x6a\x7d\xfa\x74\x7c\x24\x8e\x7e\x00\x71\x7d\x08\xa2\xb6\x4e\xd4\x32\xb0\x30\x92\xd7\x20\x9a\x43\x10\x4d\xa3\x4a\x10\xab\xd4\x13\x2b\x7c\x62\x2f\x41\xac\xac\x13\x9d\xed\x02\x2a\xd1\x4a\x2f\x0d\x32\xfa\x11\x6d\xa5\x47\xcb\x6b\x0c\x18\x46\x40\x3b\xdb\xa4\x65\x74\x0d\x85\x40\xb6\x11\x35\xa1\x56\x82\x2c\xc5\xce\xa2\x17\xf4\x91\xbe\xd9\xf2\x41\x7a\x92\xa5\x46\x10\xab\xd6\x91\x65\xf4\x42\x7a\x8a\xf5\xac\x1e\x3d\x31\x8a\xc0\x9e\x6c\x13\x33\x14\x56\x5a\x7a\xc9\xe4\xac\x90\x75\x64\x06\x96\x8c\x06\x2d\x83\x58\x91\x69\x35\x55\xc4\xa2\xee\x6c\x95\x38\x13\x7e\xca\x6e\x3d\x56\x92\x51\x4d\x03\x61\x7b\x93\xea\x1e\x95\x28\x89\xc7\x5a\x2b\x67\x5a\xc9\x20\x02\xab\x53\x0a\x6e\x7e\x3c\x9f\x9f\xcc\xe6\xf3\x39\x80\xa8\x6f\x2e\xcf\xdf\x41\x5e\x54\xce\xd6\xd4\x74\x1e\x53\xe3\x0a\xd1\x7a\xac\xe9\xe9\xb4\x70\x2d\xa7\x7f\xfc\xff\x37\x6e\x68\x68\xe3\x6d\x45\x58\x4b\x8f\x6a\x83\x29\x0a\x09\xdc\x34\x99\x50\xae\x7a\xcb\x8e\x2d\x26\x3c\x6a\xc9\xf4\x80\xd9\x3e\xdc\x22\x9a\x00\xec\xc0\x59\xfd\x0c\xb2\xae\xb1\x62\x08\xce\x20\xcc\xf2\x39\x04\xf4\x84\x01\x96\x5d\x49\x18\x0e\xa0\xec\x18\x78\x8d\x50\x39\x53\x92\x45\x05\x46\xde\x23\x04\xc6\xf6\x24\xdb\xcf\xf6\xe3\xd0\x41\xec\x94\x04\x8b\x7f\x8e\x77\xaa\xb0\xf8\xf5\xf6\xcf\xc5\xe5\xf2\x34\xb5\x66\xdd\x9a\xc4\xe6\xb5\x64\xf0\xd2\xa6\x2d\x53\x0a\xaf\xd1\x8e\xd6\x26\xf1\x00\x1e\x65\x80\xd2\xbb\x7b\xb4\x39\xdc\xb6\x9a\x98\xc9\x36\x40\x51\x83\x80\x2c\xbb\xb8\xcf\xa3\x83\x80\xb1\xa1\x38\x95\x66\xa4\x55\x01\x1e\x9d\xbf\x0f\x50\x93\xc5\x93\x6c\x52\x53\xdf\xe7\x57\x9d\x39\xbf\xb9\xdb\x4c\xc3\xf4\xb4\x2f\xcb\x7c\x9d\xa9\x71\x74\x5a\xb3\xd1\x16\x11\x40\x91\xdf\x3a\x0c\x0a\xcb\xad\x63\xe1\xab\xb3\xb7\x0d\xcb\x38\xb7\x67\xbe\x5a\xbf\x42\x0f\xf0\x0d\x72\xdf\xe7\x97\x8c\x63\x7b\x0d\xc3\x48\x56\x13\x25\xfd\x38\x81\xb6\x92\x3a\xc5\x76\xda\x3a\x05\xbf\x22\xb2\x63\xe0\x8d\xce\x4e\x03\x13\xc1\x9d\xc2\x3b\xe5\xdd\x81\x5f\x48\xb0\x18\x05\xac\x98\x3c\x5c\x0b\x45\xdf\xe7\x17\xa4\xf1\x4a\x1a\xdc\x5d\xd5\xb5\x9c\xfd\x17\x00\x00\xff\xff\x50\x85\x58\xfc\x74\x06\x00\x00")

func dataDockerfileBionicTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileBionicTemplate,
		"data/Dockerfile-bionic.template",
	)
}

func dataDockerfileBionicTemplate() (*asset, error) {
	bytes, err := dataDockerfileBionicTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-bionic.template", size: 1652, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0xab, 0xfd, 0x8c, 0xfa, 0x98, 0x63, 0x75, 0x39, 0x5f, 0x9a, 0xf7, 0xe0, 0x97, 0xbb, 0x73, 0x46, 0xa9, 0x61, 0x3, 0x2f, 0xd6, 0xbf, 0x37, 0xd6, 0xa, 0x4f, 0xed, 0xc7, 0x1, 0x45, 0xa4}}
	return a, nil
}

var _dataDockerfileTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xdd\x6e\xe4\x36\x0f\xbd\xf7\x53\x10\xc9\x07\x2c\xf0\x21\xb2\x3b\x48\x9b\x66\xd2\xe6\x22\xc8\x34\x8b\xa0\x6d\x12\x4c\x9a\xce\x45\x77\x81\x95\x2d\xda\xc3\x46\x3f\x86\x44\xe7\xcf\xf1\xbb\x17\x92\x67\x26\x4e\x77\x7b\x63\x90\x87\x87\x14\x2d\x91\xe7\x62\x79\xfd\x3b\xf4\x7d\xbe\xa0\xc0\xde\x0d\x43\xb6\xbc\xbb\x02\xd9\xb2\x68\x90\xa1\x6b\x95\x64\x84\xd7\x57\x60\xdf\xe1\xbb\x10\xd9\xc0\x52\x6b\x10\xcf\xe0\xbb\xf2\x79\x96\xcf\xf3\x43\x28\x3b\xd2\x4a\x60\x08\x68\x99\xa4\x86\x4f\x19\x00\x80\xa6\xb2\x3a\x12\x0a\x1f\xa2\x55\xd7\xb4\x35\x1b\x55\x9a\xad\x6d\xab\xce\x07\x0c\x3f\x24\x7f\x97\xe6\x51\x2a\x4d\x16\xb7\xac\x10\xf4\xd6\x7c\x96\x66\xb4\x5f\x34\x95\xb3\x66\x92\x57\x75\x5e\xa7\x56\xff\xda\x2b\xba\xe0\x8b\x92\x6c\xd1\xa0\xd9\x3b\x80\xbd\x4d\xd3\xd1\x2c\x3b\xab\x34\xfa\x68\x8a\x87\xf8\x9d\xe5\xb3\x1f\xf3\xc3\xe4\x0b\xeb\x84\x57\xae\x7a\x73\x68\xef\x73\x76\xb6\x58\xc0\x47\x34\x35\x69\x84\x62\xea\xe5\xda\x55\xf7\x50\x6c\xce\x1c\x0b\x4f\x4f\xfb\x9c\xa5\x50\xec\x2b\xdd\xb4\x7b\xb4\xda\x49\x75\xe7\xf5\x30\xbc\xb2\xf4\xe0\x9e\x5e\xce\xa1\x60\xd3\x66\x7d\xef\xa5\x6d\x10\xf2\x1b\xc9\xd5\x1a\xc3\x30\xc4\x73\xfa\x3e\x1f\x06\x28\xb2\xbe\x47\xab\x86\x21\x5b\x5d\x2f\x7f\x5d\x5c\x2e\x53\x4a\x11\x6f\x5f\xf4\x7d\xbe\xec\xca\xe7\x3f\xd1\x07\x72\x76\xf3\x8a\xb5\xf3\x40\x40\x16\xbe\xa4\x3b\xd0\x01\x8a\xff\xe7\x6d\x2c\xfc\xe5\x27\x50\x0e\x92\x09\xa2\xfd\x0e\x7e\x86\xff\x51\x84\xec\xf8\xc6\xe7\x17\xbf\x9d\x7d\xbc\x3d\xfd\x20\x8c\xf4\xd5\xfa\xf4\xe9\xf8\x48\x1c\x7d\x0f\xe2\xfa\x10\x44\x6d\x9d\xa8\x65\x60\x61\x24\xaf\x41\x34\x87\x20\x9a\x46\x95\x20\x56\x69\x18\x56\xf8\xc4\x5e\x82\x58\x59\x27\x3a\xdb\x05\x54\xa2\x95\x5e\x1a\x64\xf4\x23\xda\x4a\x8f\x96\xd7\x18\x30\x8c\x80\x76\xb6\x49\x9f\xd1\x35\x14\x02\xd9\x46\xd4\x84\x5a\x09\xb2\x14\x07\x89\x5e\xd0\x47\xfa\xa6\xe4\x83\xf4\x24\x4b\x8d\x20\x56\xad\x23\xcb\xe8\x85\xf4\x14\xfb\x59\x3d\x7a\x62\x14\x81\x3d\xd9\x26\x66\x28\xac\xb4\xf4\x92\xc9\x59\x21\xeb\xc8\x0c\x2c\x19\x0d\x5a\x06\xb1\x22\xd3\x6a\xaa\x88\x45\xdd\xd9\x2a\x71\x26\xfc\x94\xdd\x7a\xac\x24\xa3\x9a\x06\xc2\xf6\x4f\xaa\x7b\x54\xa2\x24\x1e\x7b\xad\x9c\x69\x25\x83\x08\xac\x4e\x29\xb8\xf9\xf1\x7c\x7e\x32\x9b\xcf\xe7\x00\xa2\xbe\xb9\x3c\xff\x00\x79\x51\x39\x5b\x53\xd3\x79\x4c\xa3\x2a\x44\xeb\xb1\xa6\xa7\xd3\xc2\xb5\x9c\xde\xf1\xdf\xcf\xb8\xa1\xa1\x8d\x7f\x2b\xc2\x5a\x7a\x54\x1b\x4c\x51\x48\xe0\x66\xc8\x84\x72\xd5\x7b\x76\x1c\x31\xe1\x51\x4b\xa6\x07\xcc\xf6\xe1\x16\xd1\x04\x60\x07\xce\xea\x67\x90\x75\x8d\x15\x43\x70\x06\x61\x96\xcf\x21\xa0\x27\x0c\xb0\xec\x4a\xc2\x70\x00\x65\xc7\xc0\x6b\x84\xca\x99\x92\x2c\x2a\x30\xf2\x1e\x21\x30\xb6\x27\xd9\x7e\xb6\x1f\xd7\x0c\xe2\xa4\x24\x58\xfc\x7d\xbc\x93\x83\xc5\x2f\xb7\x7f\x2c\x2e\x97\xa7\x69\x34\xeb\xd6\x24\x36\xaf\x25\x83\x97\x36\x95\x4c\x29\xbc\x46\x3b\x5a\x9b\xc4\x03\x78\x94\x01\x4a\xef\xee\xd1\xe6\x70\xdb\x6a\x62\x26\xdb\x00\x45\x11\x02\xb2\xec\x62\x9d\x47\x07\x01\xe3\x40\x71\x6a\xcd\x48\xab\x02\x3c\x3a\x7f\x1f\xa0\x26\x8b\x27\xd9\xa4\xa7\xbe\xcf\xaf\x3a\x73\x7e\x73\xb7\xd9\x86\xe9\x69\x5f\xb7\xf9\xb6\x53\xe3\xea\xb4\x66\xa3\x26\x22\x80\x22\xbf\x75\x18\x14\x96\x5b\xc7\xc2\x37\x77\x6f\x1b\x96\x71\x6f\xcf\x7c\xb5\x7e\x83\x1e\xe0\x3f\xc8\x7d\x9f\x5f\x32\x8e\xe3\x35\x0c\x23\x59\x4d\x84\xf3\xd3\x04\xda\x2a\xe8\x14\xdb\x49\xe9\x14\xfc\x86\xa6\x8e\x81\x77\xb2\x3a\x0d\x6c\xf5\x75\x8a\xed\x84\x76\x07\x7e\xa5\xb8\x62\x54\xaf\x62\x72\x6b\x2d\x14\x7d\x9f\x5f\x90\xc6\x2b\x69\x70\xf7\x9f\xae\xe5\xec\x9f\x00\x00\x00\xff\xff\xad\x23\x11\x94\x72\x06\x00\x00")

func dataDockerfileTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileTemplate,
		"data/Dockerfile.template",
	)
}

func dataDockerfileTemplate() (*asset, error) {
	bytes, err := dataDockerfileTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile.template", size: 1650, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0xf1, 0xaa, 0x8a, 0x71, 0x33, 0x55, 0x4d, 0xf4, 0x12, 0x51, 0xcd, 0x2c, 0xc5, 0xa0, 0x59, 0x71, 0x52, 0x8d, 0x31, 0x1b, 0xb5, 0x2d, 0x30, 0x6, 0x1c, 0x1c, 0x1, 0xb2, 0xbf, 0xeb, 0xf}}
	return a, nil
}

var _dataGemfileBionic = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\x83\xc3\x2d\x72\xf5\x04\x11\xc4\xcd\x27\xb1\xed\x35\xbd\x21\x4d\x49\x2e\xa8\x6f\x2f\x81\xae\x1f\xdf\x09\xaf\xa2\x6f\xd7\x19\x1f\xf3\x15\xa5\x8d\x3f\x5c\xf9\xc6\x5f\xb4\xaa\x33\x6c\xc3\x68\x79\xb3\x29\x84\x9a\x5b\x99\x14\xb4\xba\xef\xf5\x31\x0c\xbd\x46\x4d\x95\x73\x89\x14\x42\xd4\x04\x5a\xf6\x44\x67\x90\xb0\x08\x5f\xe8\xb0\xc5\xba\x3d\x21\x2c\xf7\xae\xff\x00\x00\x00\xff\xff\x89\xb2\x32\x74\x73\x00\x00\x00")

func dataGemfileBionicBytes() ([]byte, error) {
	return bindataRead(
		_dataGemfileBionic,
		"data/Gemfile.bionic",
	)
}

func dataGemfileBionic() (*asset, error) {
	bytes, err := dataGemfileBionicBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Gemfile.bionic", size: 115, mode: os.FileMode(0664), modTime: time.Unix(1733311551, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xae, 0x48, 0xb3, 0xf7, 0x7e, 0x4b, 0x4a, 0x35, 0x89, 0xc6, 0x9, 0xb9, 0xe2, 0xce, 0x59, 0x90, 0xdc, 0xfc, 0xcc, 0xb0, 0x18, 0x7e, 0x3c, 0x8b, 0x3f, 0x3f, 0x62, 0x0, 0x7, 0xcd, 0xa0, 0xfc}}
	return a, nil
}

var _dataGemfileBionicLock = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x4b\x8f\xd3\x30\x14\x85\xf7\xfe\x15\x77\x99\x91\xa6\xb7\xb1\x23\x9a\x49\x45\x23\x01\x09\x30\xd2\xb4\x54\x50\xc4\x3a\x4d\xdd\x36\x34\x2f\xd9\x0e\x02\x16\xfd\xed\xc8\x8f\xbc\x98\x55\xec\x73\x6f\xae\xcf\x77\xec\x4f\xe9\x96\x00\x08\x5e\x35\x8a\xaf\xe1\xaa\x54\x2b\xd7\xcb\xa5\xe8\x8e\x7f\x2e\xbc\x92\xd8\x88\xcb\x92\x00\xc8\x96\xe7\x72\x4d\x00\x00\x32\x21\x16\x6d\x05\x9e\x8f\x3e\x52\xff\xc1\x68\x00\x79\x76\x2c\x6a\xf0\x62\x70\xca\x31\xcb\x6f\x6d\x23\x94\x04\x2f\x40\x46\xd1\xc9\xae\xcd\xc7\x68\x50\xae\x45\x79\x6a\x45\x93\x73\x29\x67\x05\x80\xf3\xb9\x00\xef\x1e\x03\x45\xff\x11\xe2\x8d\xfe\x22\xa5\xee\xb7\x32\xab\x5a\xf0\x8c\x64\x95\x53\xa3\x78\xfd\x0b\x3c\x86\x21\xae\xac\x64\x06\x50\xa4\x6f\xfa\x9e\xb3\x36\x4e\x91\xd2\xf1\x90\x1e\xe7\x1e\xc3\x9c\x68\x42\x10\x6f\x80\xe1\x0a\xd9\xff\xb0\x1b\xf0\x71\x35\x8e\x9a\xa3\xe8\xe2\x04\xc6\x19\xb6\x38\x33\x46\xb7\xfa\x29\x1b\x3b\x93\x62\x88\xe1\x23\xbc\x05\x36\xb6\xb5\x25\xcf\x24\x17\x5d\x3d\x18\x65\x51\x5f\xd3\x77\xb5\xf8\xfd\xd7\x55\x18\x06\x7d\x41\xaa\xee\x64\x96\x45\x2d\x0b\xa9\x6c\x5a\x6e\x64\xd1\x2c\xca\xe2\xc6\x75\xe2\x41\x9f\x8e\x75\x40\xf1\xa9\xcf\xaf\xea\xa4\xca\xf2\xab\xe9\x8a\x22\x7c\xb2\xea\xc4\x8b\x36\x12\xbc\x8a\x05\xe6\xd0\x6e\x6d\xef\xc7\x6d\xac\x23\xb7\x19\x8f\x31\x99\x0d\x07\x4d\x08\x06\xc6\x19\xe0\xf8\x40\x86\x30\x06\x2e\x13\x86\xeb\xd4\x63\xac\x59\x16\x3c\x10\xb2\x7f\x79\x77\xf8\xf8\xe5\xeb\xf6\x1b\xb1\x83\x09\x49\xd2\x7d\xba\x4b\xd2\xdd\x87\xe7\x54\x8b\xe6\x99\xe8\x8b\xb0\x0f\x85\xbc\xff\xbe\x4b\x5e\xd2\x04\x7e\x3c\x1f\x3e\xeb\x81\x14\x69\x88\x01\xf9\x17\x00\x00\xff\xff\xe7\x44\x7f\x54\x3b\x03\x00\x00")

func dataGemfileBionicLockBytes() ([]byte, error) {
	return bindataRead(
		_dataGemfileBionicLock,
		"data/Gemfile.bionic.lock",
	)
}

func dataGemfileBionicLock() (*asset, error) {
	bytes, err := dataGemfileBionicLockBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Gemfile.bionic.lock", size: 827, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x85, 0x63, 0xd1, 0x9d, 0x8a, 0x20, 0x21, 0xd2, 0x0, 0x9c, 0x1f, 0xc3, 0x1, 0xe8, 0x11, 0x4a, 0x79, 0x45, 0x98, 0x25, 0x22, 0xaf, 0xfc, 0x75, 0x22, 0x82, 0x1, 0x90, 0xf7, 0x23, 0xd5}}
	return a, nil
}

var _dataGemfileTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\x3b\x0e\xc2\x30\x0c\x06\xe0\xdd\xa7\xf8\x25\x06\x2f\xc8\x25\x6c\xb0\x72\x12\xa0\x26\xed\x10\x12\xf9\x21\xc8\xed\x11\xfb\x77\xc0\xcd\xf4\x1e\xba\xe2\xb3\xc7\x06\xcb\xc7\x44\x91\x8b\x7c\x91\xae\x2b\xf6\x37\xc2\xd2\x63\x12\x79\x4f\x7b\x2a\x78\x8b\x18\x7e\x5d\x96\x3f\xad\xda\x5c\xba\x55\x26\xaa\xda\xc0\xaf\xd1\xf8\x08\x2e\x52\x4e\x72\x66\xfa\x05\x00\x00\xff\xff\xc5\xa5\x4b\xee\x5d\x00\x00\x00")

func dataGemfileTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataGemfileTemplate,
		"data/Gemfile.template",
	)
}

func dataGemfileTemplate() (*asset, error) {
	bytes, err := dataGemfileTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Gemfile.template", size: 93, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0x36, 0xe1, 0xf1, 0x91, 0x39, 0x9c, 0xd, 0x2b, 0x78, 0x20, 0xa, 0xcd, 0x3d, 0x5f, 0x8c, 0x62, 0x9e, 0xca, 0xb7, 0x6, 0xeb, 0xfc, 0x48, 0xb3, 0x35, 0x2e, 0x42, 0xb0, 0xaa, 0x38, 0x83}}
	return a, nil
}

var _dataGemfileTemplateLock = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\x5d\x6f\xd3\x30\x14\x7d\xf7\xaf\xb8\x8f\x99\x44\x6f\x63\x47\x6a\xd7\x6a\xab\x04\x24\xc0\xa4\xad\x4c\x30\xc4\x73\x92\x3a\xab\x59\xbe\x64\x3b\x88\xf1\xb0\xdf\x8e\xfc\x99\x54\xbc\xd9\xc7\xc7\xc7\xe7\x9c\xeb\xcf\xc5\x03\x01\x90\xbc\x1b\x34\xdf\xc3\x59\xeb\x51\xed\xd7\x6b\x39\x55\xaf\xcf\xbc\x53\x38\xc8\xe7\x35\x01\x50\x23\xaf\xd5\x9e\x00\x00\x94\x52\xae\xc6\x0e\x92\x14\x53\xa4\xe9\x95\xc5\x00\xea\xb2\x12\x3d\x24\x07\xf0\x48\x55\xd6\x2f\xe3\x20\xb5\x82\x24\x43\x46\xd1\xc3\x9e\x96\xe2\x2e\x22\x67\xd1\x9e\x46\x39\xd4\x5c\x29\x48\xa8\x11\x0d\x9a\xb2\x7c\xe1\x90\xdc\x00\xcd\x22\xb9\x2d\xbb\xf1\x82\x75\x1a\x34\xef\x7f\x43\xc2\x70\x8b\x1b\x07\x35\x8d\x30\x14\x9a\x86\x5b\x8d\xb1\x6b\x01\x16\xa4\x43\x88\xb7\x03\x5c\xe6\x58\xf8\x3e\xdc\x02\xc3\xcd\x7c\x27\x44\xbc\x85\x14\x37\x38\x27\x5f\x04\x08\x90\xb3\xf9\x76\x00\xe3\x34\x32\x9b\x46\xf8\xd5\x2f\x35\x38\x25\x8a\x5b\xdc\xbe\x83\x1b\x60\x33\x6d\x6c\x79\xa9\xb8\x9c\xfa\x68\x8f\xed\x62\x25\x53\xf5\xba\xfa\xf3\xd7\x9f\x30\xcc\xc2\x81\xd2\xd3\xc9\x2e\x45\xaf\x84\xd2\xae\x23\x2f\x29\x86\x55\x2b\x4c\x95\x29\x66\xa1\x37\xe7\x80\xe2\x75\x68\xad\x9b\x94\x2e\xeb\xb3\x65\xed\x76\x78\xed\xd0\x85\x17\x63\x24\xfb\xaf\x0c\x98\x7b\x30\xa1\xfd\xda\x4d\xc5\x6f\x9c\x23\xbf\x99\x9f\x31\x35\xce\x0f\x2d\x12\xb8\xb1\x53\x86\x2c\x98\x8d\xa9\x2f\x22\xdb\x39\xdb\x8e\x63\x3d\x31\xa9\xad\xc7\x33\x8d\xb0\xb3\xcf\xb2\x2b\x42\x1e\xef\xdf\x3f\x7d\xfa\xfa\xed\xe1\x3b\x71\xc2\x84\xe4\xc5\x63\x71\xcc\x8b\xe3\xc7\xbb\xc2\x80\xf6\xbb\x98\xd1\xb8\x0f\x43\x3e\xfc\x38\xe6\xf7\x45\x0e\x3f\xef\x9e\xbe\x18\x41\x8a\x74\x8b\x19\xf9\x17\x00\x00\xff\xff\x2a\x34\x3f\x11\x39\x03\x00\x00")

func dataGemfileTemplateLockBytes() ([]byte, error) {
	return bindataRead(
		_dataGemfileTemplateLock,
		"data/Gemfile.template.lock",
	)
}

func dataGemfileTemplateLock() (*asset, error) {
	bytes, err := dataGemfileTemplateLockBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Gemfile.template.lock", size: 825, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x5e, 0x98, 0x29, 0x34, 0x13, 0x4a, 0x8e, 0x68, 0x86, 0xad, 0x3c, 0x3d, 0x28, 0xfc, 0x87, 0xf5, 0x37, 0x27, 0x32, 0x16, 0x2, 0x6c, 0xd7, 0xde, 0x23, 0x2e, 0x6b, 0x6f, 0x84, 0x2a, 0x46}}
	return a, nil
}

var _dataPatches10001_for_tests = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x4a\x2c\x02\x04\x00\x00\xff\xff\xaa\x8c\xff\x76\x03\x00\x00\x00")

func dataPatches10001_for_testsBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches10001_for_tests,
		"data/patches/1.0.0/01_for_tests",
	)
}

func dataPatches10001_for_tests() (*asset, error) {
	bytes, err := dataPatches10001_for_testsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.0.0/01_for_tests", size: 3, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0xde, 0x2b, 0x2e, 0xdb, 0xa5, 0x6b, 0xf4, 0x8, 0x60, 0x1f, 0xb7, 0x21, 0xfe, 0x9b, 0x5c, 0x33, 0x8d, 0x10, 0xee, 0x42, 0x9e, 0xa0, 0x4f, 0xae, 0x55, 0x11, 0xb6, 0x8f, 0xbf, 0x8f, 0xb9}}
	return a, nil
}

var _dataPatches10002_for_tests = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x4a\xac\x02\x04\x00\x00\xff\xff\x98\x04\x24\x78\x03\x00\x00\x00")

func dataPatches10002_for_testsBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches10002_for_tests,
		"data/patches/1.0.0/02_for_tests",
	)
}

func dataPatches10002_for_tests() (*asset, error) {
	bytes, err := dataPatches10002_for_testsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.0.0/02_for_tests", size: 3, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xba, 0xa5, 0xa0, 0x96, 0x4d, 0x33, 0x20, 0xfb, 0xc0, 0xc6, 0xa9, 0x22, 0x14, 0x4, 0x53, 0xc8, 0x51, 0x3e, 0xa2, 0x4a, 0xb8, 0xfd, 0x5, 0x77, 0x3, 0x48, 0x4, 0xa9, 0x67, 0x24, 0x80, 0x96}}
	return a, nil
}

var _dataPatches193P55101_strict_hostname_checkingPatch = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xfd\x6e\xdb\x38\x12\xff\xdf\x4f\x31\x67\x03\x8d\x9d\xc8\xf2\x47\xec\x7c\x18\x9b\xdd\xfa\x9c\x64\xb7\x40\xe2\x14\x75\x8a\xbd\x43\x92\x33\x28\x69\x64\x73\x2b\x91\x5e\x92\x8e\x9d\x6c\x7b\xef\xb2\xcf\xb2\x2f\x76\xa0\xbe\xfd\xed\xa6\x69\x5a\x2c\x2e\x28\xe0\x8a\x1a\x0d\x67\x7e\xf3\xe3\x70\x86\xd2\xb9\xe0\x3e\x1c\xdb\xf5\xfd\x43\x72\x74\x58\xb7\xf6\xab\x56\xb5\x51\xb3\x1a\xb5\x46\xa3\xda\xac\x37\x8f\x0e\x8e\xeb\x2e\x56\xab\xb5\xa3\x23\xbb\x8e\x4d\xb8\xe4\x0c\x7a\x38\x82\xda\x21\x54\xab\xad\xe0\x1f\xd4\xab\xd5\x5a\x4e\xab\x69\xc1\x35\x67\x0f\xd0\x16\x36\x45\x41\xe1\x07\x8b\x48\x7b\xec\xe1\xeb\x81\x4f\xa8\x67\xda\xdc\xff\x31\x77\x4a\x14\xb6\xa0\x37\x66\x06\xd4\x8f\xe1\x92\x08\xa8\x57\x6b\x4d\xa8\x1d\xb6\xea\x47\xad\x46\x03\xca\xd5\xc3\x6a\x35\xd7\x1b\x5b\xbf\xa1\xad\x5a\x70\xf3\xb6\x7d\xdd\xf9\xe5\x0e\x7a\x4a\x50\x5b\xa1\x80\x21\x97\x8a\x11\x1f\xe1\x1e\x05\x75\xa9\x4d\x14\xe5\x0c\x5c\xee\x79\x7c\x42\xd9\x00\xde\x9d\x77\xe0\xa0\x56\x6f\x9a\xb9\xdc\xf5\x90\xb0\x0f\x12\x14\x87\xd7\x8c\x0c\x29\xb8\x5c\x80\x1a\x22\x28\x94\x4a\x02\x61\x0e\x50\x46\x15\x25\x1e\x38\xdc\x1e\xfb\xc8\x54\xa0\xcc\xcc\x95\xcb\xe5\x1c\xe0\x54\x55\xf8\x08\x99\x94\x5e\xc5\xa3\x56\xf2\x7f\x29\xbd\x32\x65\x0a\x05\x23\x9e\x29\x2c\xf8\x08\x70\x50\x87\xbd\x25\x7f\x5a\x8b\x9e\x2b\x79\x54\x5f\xf4\xa5\x0c\x1e\x03\xf8\x08\xb5\x66\x75\xe9\x83\x1b\xff\x72\x50\x07\x97\x7a\x28\xc1\x1e\x12\x36\x40\xc7\x80\x7a\xf5\x08\x28\x93\x28\xb4\x0b\xb2\xb8\x57\x32\xa0\x01\x0e\x7a\x18\x5e\x97\x4b\xb9\x9c\x43\x5d\x17\xca\xe5\x01\x55\x40\x2a\x6b\xdc\xd3\xe6\x59\x1b\x04\x72\x94\x39\x38\x05\xd7\xad\x39\x0d\x74\x4d\xd3\x26\x6e\xd5\x3a\x26\x50\xab\x56\x0f\x1a\x0d\x8d\xe0\xb6\x00\xe6\xf6\xf6\xf6\xb6\x96\x7d\xfd\x1a\xca\xb5\xc6\xbe\x71\x04\x7b\xfa\xe7\x10\x5e\xbf\x06\x07\xdd\x90\x0c\x0f\x7d\x5b\xbb\x1f\x90\x02\xfb\xd4\x41\xa6\xa8\x7a\x28\xea\x41\x23\xe1\x4d\x29\x07\xe9\x9f\x4d\x24\x82\x24\xcc\x54\x64\x90\x1d\x9f\x0c\x91\x41\x1d\x0a\xe0\x74\x7b\x5d\x4d\x36\xca\xe0\x67\x64\x28\x88\x17\x5c\x16\xdf\x9d\x77\x9a\xf5\xa3\xea\x8c\x32\x00\x39\xe4\x63\xcf\xe9\xc7\xc6\x70\xdf\xe7\xac\x1f\x90\xf5\x04\x5c\xe2\x49\xcc\x95\xb3\xe2\x02\x07\x70\x02\xef\x70\x80\xd3\x91\x89\xd2\x26\x23\x2c\x6a\x63\xee\x89\x37\xc6\x92\x39\x90\x63\xab\x58\xb9\xbd\xbd\xdd\xad\x18\x90\xbf\xf9\x8f\x79\xb7\x97\x2f\xcd\x6b\x50\x63\xc1\x40\x89\x31\x02\x75\xa1\x72\xdb\x2e\xfc\x21\x70\xf0\xe9\xf6\xb1\x42\xe1\xe4\xbf\x89\xd3\xb9\xbd\x35\x4f\x45\xe6\xc6\xb2\xc5\xf8\x3f\x06\xa4\xc6\x2c\x80\x73\x08\x05\xa0\x6f\xdb\x8e\x23\x50\xca\x67\x83\x67\x46\xbc\x10\xad\x6a\x09\x3f\x9f\x75\xcf\xde\xb5\x2f\xfa\xdd\xf6\xe5\x59\x7f\x24\x28\x53\xc5\x92\x9e\x73\xda\xac\x1e\xdf\xef\x57\xee\xf7\xfb\xc4\x53\xa6\x1d\xb2\xa3\x79\x1c\xb0\xa3\x79\xf4\x45\xec\xa0\xee\x6a\x73\x53\x33\xf5\xc3\xa6\x0c\x73\x95\xa9\x78\x9f\x98\x48\xec\xe1\x1f\x1f\x39\x75\x0c\x08\x90\xfb\x98\xf5\x89\xba\xc0\xa9\x03\x27\x27\x90\xef\x74\xf3\x9b\xc9\xf0\xdd\x10\x61\x91\x04\xc8\x9c\xf4\xf2\x53\x2e\x33\x1a\x04\xe1\xe0\xc8\xa8\xd5\x60\xaf\x76\x70\x60\x1c\x3c\x3d\x0c\xc9\x24\x3e\x77\xc6\x1e\xf6\xdd\x31\xb3\x83\x74\xdf\x5a\xa3\x2a\x17\xfa\x98\x99\x70\x39\xb3\x4b\x50\x80\x16\xe3\x0e\xb7\x5b\x31\x2a\x85\x60\xf7\xd0\xcc\x35\xe0\x4d\xbb\xa9\xf7\x1c\x36\x00\x2a\xc1\xa3\x3e\x55\xe8\xe8\xad\x44\x6f\x20\x12\x15\x70\x17\xda\xbd\xce\x9b\x37\x3a\x03\x0b\xa2\xb7\x26\x19\xab\x89\x60\x0d\x28\x0d\x63\xe6\xe9\x15\xa2\x97\x12\x91\x36\xa5\x7d\xce\xbc\x87\x9f\xd6\x89\xc6\x56\xce\xca\xa7\x36\xf6\x10\x93\x5d\xce\x00\x89\x21\x24\x07\x66\xc3\xac\xa5\x42\x97\x44\xd9\xc3\xc8\x7a\x9d\xe5\xca\x7a\x6f\x60\x92\x2a\x7a\x8f\x66\x2c\x26\x09\xeb\x8f\x88\x50\x12\x4e\x02\x03\x1d\x3e\x61\x5a\xd8\x94\x23\x8f\xaa\x62\xde\xcc\x97\xb2\x13\x5f\x5f\x9d\x5e\xb5\x40\x0d\xa9\x04\x0b\x87\xe4\x9e\x72\x11\x2d\x12\x18\x09\x6e\x11\xcb\x7b\x00\x0b\xc1\xe7\x02\x41\x06\xfb\xf5\x9c\x9b\x92\x30\x4d\xfe\x64\x0b\xd7\x8b\x2c\x36\xc1\x94\xf4\x11\xe1\x07\xa8\x67\x67\xdc\xca\x0b\xad\x2e\x71\x23\x01\x6f\x83\x2f\xcb\x01\xdc\x37\x40\x8e\x2d\xaa\xd0\x87\xba\x99\x0a\xbf\x71\x83\xb0\x4f\xa8\xe7\xd8\x44\x38\x69\xc8\xb5\x5d\xfa\x8e\x8e\x51\x66\x94\x87\xf2\x1e\xba\xaa\xec\x73\xa9\x52\x4d\x1e\xb1\xd0\xd3\xa9\x4b\xdf\x1f\x09\x94\xc8\x34\xaf\x42\xee\xba\x14\x85\x11\xdc\xb1\x3d\x8a\x4c\x41\xef\x97\xab\xf7\x17\xa7\xd0\xbd\xba\x06\x9b\xfb\x23\x22\x30\xd5\x44\x06\x84\x32\xa9\x80\xb0\x07\x15\x40\x64\x8d\xd5\xec\xac\xd1\x64\x91\x31\x02\x5d\x14\xc8\xec\x8c\x8a\x74\x56\x28\xa2\x39\x30\x0d\xd8\x35\x71\x4a\xfc\x91\x87\xba\x56\x83\x49\x10\x5a\x5f\xc7\x00\x5c\xce\x67\xee\x59\xe3\x8c\x57\x8c\x2b\xb0\x88\x30\xe7\x85\xb8\x80\xcc\x65\xc9\xdc\xb0\x40\xb2\x44\x88\x68\x92\x19\xfa\xac\xe8\xd5\x32\xd1\xbb\x5e\x0a\x28\x51\x0a\xfd\x91\xd2\x4b\x3a\xf4\x90\x2c\x8d\x07\x50\x96\x6a\x9a\x0c\xa9\x3d\x5c\x45\x05\x1d\x21\x41\x25\x4a\x20\x31\xf2\x6a\x88\xba\xe2\x24\x41\xb8\x33\x24\x98\x8b\x50\x04\xbe\xc3\x03\x20\x43\x6b\x34\x9c\x69\x34\x18\xaa\xf5\xe8\x45\x99\x2e\x36\xab\x98\xc5\x6e\x48\x5d\x65\x64\xf1\xd5\x03\x99\xc5\x90\xde\xf9\x8d\x53\x16\xac\x94\x39\xf8\x93\xf1\xf0\x11\x9d\x96\xf7\xd6\xa5\xe5\x74\xb7\x59\xc8\xc5\x89\x85\x0e\xf7\x09\x65\x7a\x5b\x1d\x71\x86\x2c\xb2\x30\xb9\x5c\x92\x9d\x33\x99\x2a\x95\x8b\x97\xf7\x6e\xde\x80\x72\x2d\xe3\xd5\x0c\x4a\xd4\x85\x0c\xb7\x7e\xd4\x49\x66\x3e\x31\xa5\x2a\xb5\xf3\xf3\xd6\xcd\x69\x38\x39\x81\xda\x67\xf1\x71\xff\xb9\xf8\x98\x25\x23\x0a\x5c\x93\x97\xd0\xb7\xd0\x71\xd0\x81\x09\xd5\x09\x02\x08\x83\x76\x39\x22\x66\x46\xcd\xfb\x72\x92\x26\x08\x83\xa8\xd6\xd6\x2e\x10\x8f\x3e\xa2\x13\x21\x01\x41\x4e\x5d\x85\xed\x3c\x5a\xa6\x54\x44\xa8\xbe\x9e\xf8\xa7\x62\x7e\xca\xca\xe5\x7c\x09\x5e\xbd\x9a\x83\xf9\x1f\x27\x90\xdf\xcd\xa7\x30\x06\xf8\xde\x54\xef\x4c\x0f\xd9\x40\x0d\x61\x2f\x1a\xa9\x25\x23\x3f\x2c\xce\x14\xdd\x79\xf5\x2a\xd6\xb2\xd6\x96\x78\x8a\xd2\xba\x07\x90\x39\x33\xe2\xb5\xbb\x6d\x79\x1f\x07\x22\xb7\x17\x96\x2d\xb6\x47\xa4\x84\x5e\xef\xa2\xc7\xed\x0f\xa8\x92\xda\x92\xd9\xde\xd8\x41\xf8\xe7\xd8\x75\x51\x97\x18\xf3\x37\x42\xf1\x73\x2e\x26\x44\x38\x28\xe6\x6f\x77\x39\xb3\x3c\x6e\x7f\xc8\x25\x51\x2c\xa4\xf1\x7c\x8b\xc2\xe5\xc2\x5f\xd1\x27\x13\x57\xb3\x83\x30\x6d\x14\xd8\x9c\xb1\x88\xae\x9a\x2f\x52\x11\xcb\xa3\x72\x88\x4e\xa2\x2d\x4b\x5a\x2a\xc1\x47\x35\xe4\x0e\x5c\xbe\xef\x5d\xeb\x8d\xde\x26\x9e\x87\x4e\xa4\x53\x5f\xe8\x6d\xa8\x10\x69\xd5\x44\x46\x26\xc7\x01\x47\x89\x9a\xcd\x80\x89\x71\x9a\x75\x20\xd0\xe7\x0a\x61\x84\xba\xbd\x27\xba\xb8\x40\x16\x99\x8d\x8e\x19\x7b\xaf\x93\xc8\x48\xe7\xa4\xd4\xec\xbe\x3d\x44\xfb\x43\x71\x49\x6b\x17\xa5\xc5\xab\x11\xb2\x5e\xef\xa2\xd5\xea\xf5\x2e\xcc\x75\xe5\xa7\x9e\xbb\xbf\xa6\x51\x14\x84\x4a\xd4\xa0\x9d\x09\xc1\x85\x01\xf9\xc4\x83\xdb\x7c\xe1\x8f\xf8\xe2\xd3\x6d\x1e\x1c\x8e\x32\x93\xc7\xc3\x72\x51\xdc\x6b\x84\xd2\x89\xf3\xb3\xbd\xf8\xca\x43\x02\x6b\xe5\xad\xa8\xff\xb6\x0e\x9a\xfb\xc7\xc7\xae\x69\x36\xea\x8d\x6a\xed\xa8\x9e\xed\xbf\x57\x3e\xaa\x1b\xee\x95\x37\x75\xf9\xde\xa8\x1f\x18\x07\xb0\xa7\x7f\x6a\xcd\x83\xb8\x7c\x0f\xa4\xd6\x15\xde\x00\x69\xcd\xae\x7f\x74\xbc\xe7\x1f\x9c\x6d\x44\x88\x94\x28\x54\x1f\x7f\x1f\x13\xaf\xa8\xdb\x10\x03\x96\xc6\x2c\xa9\xe0\xf3\x93\xc9\x24\x5b\x62\xe4\x0d\xc8\xcf\x14\x2d\xf9\x52\x69\x89\xea\x20\x53\x19\x5b\xa8\x96\x63\x2b\xcc\x07\xdb\x4c\x12\xe4\x83\x65\x4e\xa6\x79\xe0\x73\x2c\x49\xb6\xc6\xbc\xcb\xb9\x9e\x73\xba\xbb\xdc\x9b\x35\x40\x2d\xe8\xd0\x3f\x5f\xae\xe4\x19\x0c\x59\xa1\x62\x2b\x3c\x88\x65\xef\x5a\xb6\xa3\xd5\x10\xfd\xfb\x74\x4d\x7a\x2f\xfa\xdd\xf9\xd0\xb0\x8e\xad\x75\x08\x3f\x45\xd7\x6e\x7a\xf5\x74\xb0\xe6\xed\x63\xf3\x4a\x13\xce\x15\xa0\xc3\x7d\x1f\x99\x92\x61\x3b\xa1\x3b\x11\x94\x2a\xc8\xe4\x53\x1b\xc5\x48\xd7\x0d\xae\xe0\x3e\x0c\x95\x1a\xb5\x2a\x15\xc5\xb9\x27\x4d\x8a\xca\x35\xb9\x18\x54\x86\xca\xf7\x2a\xc2\xb5\x75\xd9\x52\x18\x91\x01\x96\xeb\x87\x33\x5c\x5e\x9a\x6b\x13\x53\xfb\x92\x44\x85\x71\x61\xa1\x33\x8b\x1b\xe3\xa0\x65\xa1\x92\x27\x82\x6b\xbb\xd6\x42\x2c\x95\x37\x4d\x3f\xee\xfb\xe6\x9b\x97\x6c\x65\x1e\x77\x40\xab\x5a\xa9\x58\x1f\x95\x30\x0a\x37\x45\x74\xc0\x7a\x88\xed\x62\x83\x6c\x2f\x9f\x29\x73\xc2\xaa\x5c\xc2\x58\x6a\x19\xb2\xb5\x97\x06\x10\xa9\xb7\xfc\x70\xdf\xd2\x33\xdd\x9c\x76\x7b\xe5\x4e\xbb\x77\x76\x17\xd5\xf8\x89\x8b\xbf\xfe\xfa\xab\x79\x16\x25\x94\x0e\xf7\xf3\x51\xaf\x65\x21\x78\x7c\x82\xa2\xac\x27\x0b\x8e\x1b\x16\x12\x1e\xb8\x3c\xf1\x2c\x9d\x1b\x46\x63\x31\xe2\x12\xe5\x6a\xe6\x6d\xbd\x17\xc6\xdb\xb4\x2d\x50\x8f\x6b\x99\xa0\x1e\xd2\x21\x2f\xee\x9c\x76\x7b\xad\x99\x64\xb8\x53\x32\x60\x67\xce\xca\x9d\x35\x2b\xe0\x59\xed\x48\x30\xbc\xba\xfc\xa6\x76\xcc\xe3\x31\x13\x5f\x6d\x5b\x29\x8e\x59\xcd\x84\x67\xea\x48\x0b\x81\x55\xcf\xd0\x93\x86\x8a\xbe\xa8\x2b\xdd\x36\x7b\x3e\x11\x60\x1d\xd6\xdd\x8d\x64\x2b\x40\xdd\x84\x67\x3a\xac\x89\x30\x79\x96\xe3\x9a\x50\xd7\x17\x1e\xd8\x84\x4a\x9e\xe5\xc8\x26\x54\xf5\x79\x87\x36\x2f\xbd\x80\xe6\xac\x5a\xbe\x90\x9f\x9f\x68\x8b\x86\x2c\x81\x28\x43\xb8\xfd\xd9\xd5\x7c\xd9\xfe\xf7\xa6\xb5\xbb\x64\xc1\x66\xa3\x32\xc3\x56\x1d\xa2\x35\x8c\xcd\x2c\xd3\xac\x0a\x8b\x3c\xce\xac\xd1\xe0\x4d\xe7\xae\x45\x1e\x17\x06\xad\xdd\xd9\xb1\x80\x3d\x33\xaa\x10\x14\xf9\x80\x2c\xcd\x49\x16\x79\xac\x2d\xe8\x71\x39\x5f\xa2\x7e\x46\xd1\xf8\x71\xe6\xbe\x01\x02\xe5\x48\x17\x01\xf7\xe8\x3d\x94\x4c\x00\xd3\x7c\x11\xa6\xcd\x80\x93\xc6\x38\xe3\xd4\x0b\x6e\x1b\x59\xd0\x32\xc4\x5f\x18\x7e\x11\x6b\xb2\x64\x48\x80\xc9\x86\x6d\x96\xf9\xbd\xec\x41\x97\xa6\xe4\xbb\xf3\x8e\xae\xed\x40\x2a\xa2\x50\x86\x4d\x7f\xb4\x2c\xa2\x97\x04\x3a\x31\x86\x2c\x5a\x2c\xd2\xc2\xd3\xac\x24\x69\x53\x99\xdd\xa9\xe6\x32\xa4\x39\x57\x30\xb6\x3d\xc9\x81\xfa\x23\x8f\xda\x54\x79\x0f\xa0\xab\x62\xca\x99\x5c\xb5\x0f\x04\xcb\x89\x32\xd0\xf5\xdd\xd8\x23\x42\x97\x54\x7e\xb2\x84\x34\xa1\x1d\x2a\x6d\x3e\x16\x64\x80\x12\x92\x5a\x34\x4e\xe0\xc1\xfb\x8d\xc0\x2e\xce\x52\xfd\xf3\x46\x2d\x7f\x4b\x73\x68\xd6\x17\x5f\x31\x7c\xed\x9c\x66\x2d\x32\x9e\x58\xf6\x37\x49\xaf\x4b\x4d\xf9\x5e\x2c\x59\x81\x49\x01\x36\xfc\x99\xa6\x09\xf0\x0b\x9f\xe0\xfd\xca\x82\x20\xd5\xb4\x6d\x95\xb7\x78\xbc\x9b\xea\xd8\xfe\x9c\x37\x39\xde\xbd\x79\x73\xda\x6d\x97\x4f\xcf\xce\x7b\x77\xc0\xdd\x8c\x39\x1b\xce\x7c\xa3\x07\xdf\xbe\xbb\xba\xbe\xba\x7b\x91\x0c\x3d\x65\x8b\x91\x99\xb2\x9a\x4d\x56\x04\x67\x44\x44\xf8\x36\x36\xf4\xf4\x45\xd8\xa3\xfb\xf2\x65\x56\x96\xcb\x9b\xed\x7c\x9f\xb5\x73\xe6\x0b\x93\xe8\xab\x09\x1d\x54\xc2\x32\x2f\xa0\x25\x4f\xc2\x98\xc9\xa4\x16\x02\xf1\x74\xb7\x98\x10\x43\xe0\x80\x08\x27\x38\xf8\xe4\xee\xda\xc4\xd4\x4b\xd3\x51\x94\xba\x83\xb7\xde\xad\x94\x17\x4f\x78\xfd\xfd\x32\xd9\xec\xaf\x3f\x17\x81\xff\xeb\xcf\x65\xdb\xf7\xe2\xf1\xdc\x86\x23\x0d\x9b\x7d\x45\x7e\x07\x67\x8c\x3b\xdf\xb8\x73\x8e\x8d\xf8\xa6\x6d\xf3\x2a\x24\x56\xf5\xcc\x5f\x87\x50\xa1\x15\xdb\x35\x96\x2f\x0a\xc3\xcb\x76\x3e\xab\xac\x58\xd7\xf6\x7c\x45\x38\xbe\x83\xf2\x3c\x42\xe4\x7b\xa8\xcd\x23\x4c\xfe\x5f\x98\xff\xad\x0a\xf3\x98\x60\xdf\xba\x2a\x5f\x67\xc7\x77\x61\xc6\x36\x68\x3c\xef\x52\xfb\xbc\xda\xf3\x6b\xe2\xf1\x8c\x15\x66\xf4\x2d\x7d\xb6\xc2\x8c\x52\xc1\xc6\x57\x1a\x7f\x8f\xda\x31\x44\xf4\x89\x85\xe3\xd2\x4a\x54\x12\x16\x7f\x13\xe2\xc2\x49\x6a\xe2\xbf\x9a\xd5\xe3\x56\xeb\x6c\xaa\x34\xa2\x9c\x9d\x13\x5b\x71\xf1\x60\x32\x9c\x84\xd2\x5a\xcb\xa2\x7c\x27\xf5\x66\x56\x34\xfe\xb4\x78\xf1\x11\xdd\x32\x98\x23\x22\x24\x16\xf3\x95\xd3\xce\x89\xe4\x3e\x06\xbf\x54\x61\xa5\xd3\x3d\xe9\x71\x1f\xa1\x47\x15\x26\xdf\x6c\x4d\xb5\x16\x74\xcd\xc8\x1f\x9c\xaa\xe2\x4e\xa4\xbe\xed\x29\xad\x6f\x27\xfc\x2c\x36\x33\x3d\x71\x1c\x2d\x18\x3a\x53\xc4\xa9\xca\xdc\xdc\x0c\x54\x00\x7b\xf8\x25\xc5\x57\x70\x9e\xe1\xa4\x78\x73\xb3\x73\xda\xd9\x31\x60\x47\xbb\xbf\x73\x67\x40\x72\x4d\x55\x74\xdd\xe9\xee\x18\x41\x23\x7b\x77\xb7\xdc\xf8\x5c\x40\xda\x4e\x60\x3c\x74\xdf\x5f\x5c\x80\xf5\xa0\x10\x7a\xed\x6e\xf6\x83\x8d\x1c\xcc\x38\xc9\xc6\x9e\xd7\xd7\x72\xfd\x5e\xbb\x9b\x65\x63\xd1\x16\x54\x51\x9b\x78\xf1\x27\xed\xf1\x97\xcc\x5b\xd2\xe4\x7f\x01\x00\x00\xff\xff\x3c\x67\x0d\x81\x8c\x33\x00\x00")

func dataPatches193P55101_strict_hostname_checkingPatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches193P55101_strict_hostname_checkingPatch,
		"data/patches/1.9.3-p551/01_strict_hostname_checking.patch",
	)
}

func dataPatches193P55101_strict_hostname_checkingPatch() (*asset, error) {
	bytes, err := dataPatches193P55101_strict_hostname_checkingPatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.9.3-p551/01_strict_hostname_checking.patch", size: 13196, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0xc0, 0xcc, 0x5f, 0x6b, 0xf1, 0x27, 0xaa, 0xb9, 0x8f, 0x28, 0xd0, 0x6b, 0x4a, 0x23, 0xfd, 0x33, 0x19, 0x78, 0xff, 0xc1, 0xa9, 0xed, 0x34, 0xfc, 0xf9, 0x72, 0x5e, 0xc1, 0xe6, 0xfa, 0x41}}
	return a, nil
}

var _dataPatches200P001_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P001_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P001_readlinePatch,
		"data/patches/2.0.0-p0/01_readline.patch",
	)
}

func dataPatches200P001_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P001_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p0/01_readline.patch", size: 1151, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x1f, 0x5, 0xcf, 0x8d, 0xc4, 0x5a, 0x44, 0x69, 0x96, 0x71, 0x46, 0x8d, 0x71, 0xb8, 0xe5, 0x61, 0x89, 0x9d, 0x56, 0x8b, 0x44, 0x1a, 0x2c, 0xbb, 0x67, 0x14, 0xab, 0x49, 0xc9, 0x5d, 0xb4}}
	return a, nil
}

var _dataPatches200P19501_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P19501_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P19501_readlinePatch,
		"data/patches/2.0.0-p195/01_readline.patch",
	)
}

func dataPatches200P19501_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P19501_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p195/01_readline.patch", size: 1151, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x1f, 0x5, 0xcf, 0x8d, 0xc4, 0x5a, 0x44, 0x69, 0x96, 0x71, 0x46, 0x8d, 0x71, 0xb8, 0xe5, 0x61, 0x89, 0x9d, 0x56, 0x8b, 0x44, 0x1a, 0x2c, 0xbb, 0x67, 0x14, 0xab, 0x49, 0xc9, 0x5d, 0xb4}}
	return a, nil
}

var _dataPatches200P24701_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P24701_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P24701_readlinePatch,
		"data/patches/2.0.0-p247/01_readline.patch",
	)
}

func dataPatches200P24701_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P24701_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p247/01_readline.patch", size: 1151, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x1f, 0x5, 0xcf, 0x8d, 0xc4, 0x5a, 0x44, 0x69, 0x96, 0x71, 0x46, 0x8d, 0x71, 0xb8, 0xe5, 0x61, 0x89, 0x9d, 0x56, 0x8b, 0x44, 0x1a, 0x2c, 0xbb, 0x67, 0x14, 0xab, 0x49, 0xc9, 0x5d, 0xb4}}
	return a, nil
}

var _dataPatches200P35301_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P35301_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P35301_readlinePatch,
		"data/patches/2.0.0-p353/01_readline.patch",
	)
}

func dataPatches200P35301_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P35301_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p353/01_readline.patch", size: 1151, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x1f, 0x5, 0xcf, 0x8d, 0xc4, 0x5a, 0x44, 0x69, 0x96, 0x71, 0x46, 0x8d, 0x71, 0xb8, 0xe5, 0x61, 0x89, 0x9d, 0x56, 0x8b, 0x44, 0x1a, 0x2c, 0xbb, 0x67, 0x14, 0xab, 0x49, 0xc9, 0x5d, 0xb4}}
	return a, nil
}

var _dataPatches200P45101_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P45101_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P45101_readlinePatch,
		"data/patches/2.0.0-p451/01_readline.patch",
	)
}

func dataPatches200P45101_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P45101_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p451/01_readline.patch", size: 1151, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x1f, 0x5, 0xcf, 0x8d, 0xc4, 0x5a, 0x44, 0x69, 0x96, 0x71, 0x46, 0x8d, 0x71, 0xb8, 0xe5, 0x61, 0x89, 0x9d, 0x56, 0x8b, 0x44, 0x1a, 0x2c, 0xbb, 0x67, 0x14, 0xab, 0x49, 0xc9, 0x5d, 0xb4}}
	return a, nil
}

var _dataPatches21001_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\xeb\x4f\xdb\x3e\x14\xfd\xfc\xf3\x5f\x71\x15\x7e\x52\x93\xe5\xb1\x3e\xc2\x23\x83\x4a\x65\x3c\x56\x34\x04\x88\xb2\x7d\xb5\x4c\x7c\x43\x2d\x52\x27\xb2\xdd\xae\xfc\xf7\x93\x43\x13\x16\xd4\x56\xb0\x69\xd2\xfc\x21\xb1\x6e\xce\x3d\xf7\xe4\xde\x63\x5f\x48\x8e\xcb\x4f\x80\x4b\xf3\x51\x21\xe3\xb9\x90\xd8\x6c\xa2\x94\x0c\xff\x7c\x91\x30\x0c\x37\xf1\xff\xe7\x2a\x5c\x08\x2d\x0a\x09\xf1\x6e\xbf\x1f\x7b\xc4\xf7\xfd\x37\x82\x77\x3d\x32\x1a\x41\xd8\x4b\xf6\xe3\x60\x1f\xfc\xd5\x7b\x34\x22\x40\xc0\x2e\x95\x53\x66\x0c\xce\x4a\x83\x9c\xa6\xc5\xac\xcc\xd1\x88\x42\xd2\x6c\x2e\x53\xbb\x81\x21\xd4\xdc\xdb\x81\x87\x04\x76\x44\x06\x1c\x33\x21\x91\xbb\xe3\xe3\xef\x67\xf4\xf6\x92\xde\xdc\x9e\xd1\x8b\xab\x9b\x6f\x77\x74\x7c\x7d\xfd\xd5\x23\xe1\xaa\x68\xa9\x90\x0a\x59\xce\x0d\x9d\x16\xc5\x23\x0c\xc1\x3d\xaf\x2b\x7e\xf0\x9a\x8a\x6d\xd4\x21\xf1\x37\x66\xab\xbc\xda\x56\x72\xa8\xd9\xc6\x01\x3b\x28\xb9\xc8\x2a\xb9\x1c\x33\xa8\x95\x9e\x1c\xdf\x9d\x8c\xe9\xe4\xe2\xcb\xd5\xf1\xe5\xa4\x69\x4e\xca\x4c\x3a\xa5\x5a\x3c\x48\x96\x6b\x18\x42\xf7\x90\xac\x33\x03\x2e\x4d\x5a\xc8\x2c\x52\xf7\x7f\xc7\x0c\x2f\xfc\xed\xf9\x0e\x92\x35\x66\xd8\x04\x8e\xbb\xb5\x19\x82\x3d\x6b\x85\xa0\xd7\xad\x9c\x00\xa0\xd0\xcc\x95\x04\x3d\x2f\x51\xb9\xb6\x85\x01\x4c\x91\x71\x54\xda\x23\x80\x92\x13\x20\xbe\xed\x55\x63\xb3\x29\x5b\x20\x35\x4f\x25\xba\xf6\xe1\xd9\xc1\xb4\x38\x6c\xf4\x17\x0e\xdf\x72\xf8\x04\xb8\x50\xd4\x4a\x13\x0f\x6e\x27\x9d\x2b\x8d\xba\xe3\xb5\xa3\x72\x7d\xd8\xa0\x9a\xa5\xac\xec\x3c\xff\x40\x12\x07\x31\xf8\xc9\x41\x70\x50\xe9\x6f\xab\xb2\xf2\x5d\x47\xe5\x54\x21\x17\xba\xcc\xd9\x93\xe3\x6d\xc4\x08\xa9\x51\x19\x6a\x70\x69\xb6\xa0\x38\xe6\x68\xb0\x46\xf9\x73\x99\xa3\xd6\xeb\x9a\xe1\xb4\x6d\xe8\x54\x8d\xf9\xff\xf4\xec\x7c\x02\x47\x47\xe0\x84\xa7\xed\xef\xc3\xda\xf3\x4e\xd3\xa1\x54\x21\x33\x48\x67\xec\x11\x33\x91\x5b\xc6\x55\x15\xc7\xfb\xa7\x8c\x17\xf7\xdf\x63\xbc\xc1\x6a\x6e\x95\xf1\x92\x24\x48\xb6\xcd\xed\x77\x66\x02\xef\x9c\xc9\x0e\xbc\xba\x30\x84\x06\xb6\x60\x22\x67\xf7\x39\x82\x16\x32\xc5\x86\x2b\x8c\xa3\x3e\xb8\xfd\x6e\xb7\xe7\x45\xcf\xb9\xcd\x55\x25\x6c\xc5\x59\xb1\x40\x0e\xcc\xbc\x24\xec\x45\x03\x9b\xd0\x8b\xeb\x84\x71\xf1\x03\x17\xa8\x02\x40\x2e\x8c\x85\x80\x7b\x85\xe6\xf3\xe4\x14\xf6\xa2\x5e\x34\x08\xa0\x02\x03\x2f\x50\xcb\x8e\x01\x2b\xfe\x95\xc0\xc8\x1e\xd3\x37\x39\xc9\x9e\xd7\x9f\x01\x00\x00\xff\xff\xdd\x85\xa5\xd3\xb0\x06\x00\x00")

func dataPatches21001_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches21001_readlinePatch,
		"data/patches/2.1.0/01_readline.patch",
	)
}

func dataPatches21001_readlinePatch() (*asset, error) {
	bytes, err := dataPatches21001_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.1.0/01_readline.patch", size: 1712, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0x98, 0x6b, 0xbf, 0xe9, 0x99, 0xf2, 0x25, 0x7d, 0x95, 0xdb, 0x26, 0x67, 0xe9, 0xab, 0x2a, 0x8b, 0xb2, 0x14, 0x37, 0x75, 0x38, 0x90, 0x46, 0x4, 0x64, 0xe4, 0x8, 0xad, 0xc5, 0xa5, 0xde}}
	return a, nil
}

var _dataPatches21101_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\xeb\x4f\xdb\x3e\x14\xfd\xfc\xf3\x5f\x71\x15\x7e\x52\x93\xe5\xb1\x3e\xc2\x23\x83\x4a\x65\x3c\x56\x34\x04\x88\xb2\x7d\xb5\x4c\x7c\x43\x2d\x52\x27\xb2\xdd\xae\xfc\xf7\x93\x43\x13\x16\xd4\x56\xb0\x69\xd2\xfc\x21\xb1\x6e\xce\x3d\xf7\xe4\xde\x63\x5f\x48\x8e\xcb\x4f\x80\x4b\xf3\x51\x21\xe3\xb9\x90\xd8\x6c\xa2\x94\x0c\xff\x7c\x91\x30\x0c\x37\xf1\xff\xe7\x2a\x5c\x08\x2d\x0a\x09\xf1\x6e\xbf\x1f\x7b\xc4\xf7\xfd\x37\x82\x77\x3d\x32\x1a\x41\xd8\x4b\xf6\xe3\x60\x1f\xfc\xd5\x7b\x34\x22\x40\xc0\x2e\x95\x53\x66\x0c\xce\x4a\x83\x9c\xa6\xc5\xac\xcc\xd1\x88\x42\xd2\x6c\x2e\x53\xbb\x81\x21\xd4\xdc\xdb\x81\x87\x04\x76\x44\x06\x1c\x33\x21\x91\xbb\xe3\xe3\xef\x67\xf4\xf6\x92\xde\xdc\x9e\xd1\x8b\xab\x9b\x6f\x77\x74\x7c\x7d\xfd\xd5\x23\xe1\xaa\x68\xa9\x90\x0a\x59\xce\x0d\x9d\x16\xc5\x23\x0c\xc1\x3d\xaf\x2b\x7e\xf0\x9a\x8a\x6d\xd4\x21\xf1\x37\x66\xab\xbc\xda\x56\x72\xa8\xd9\xc6\x01\x3b\x28\xb9\xc8\x2a\xb9\x1c\x33\xa8\x95\x9e\x1c\xdf\x9d\x8c\xe9\xe4\xe2\xcb\xd5\xf1\xe5\xa4\x69\x4e\xca\x4c\x3a\xa5\x5a\x3c\x48\x96\x6b\x18\x42\xf7\x90\xac\x33\x03\x2e\x4d\x5a\xc8\x2c\x52\xf7\x7f\xc7\x0c\x2f\xfc\xed\xf9\x0e\x92\x35\x66\xd8\x04\x8e\xbb\xb5\x19\x82\x3d\x6b\x85\xa0\xd7\xad\x9c\x00\xa0\xd0\xcc\x95\x04\x3d\x2f\x51\xb9\xb6\x85\x01\x4c\x91\x71\x54\xda\x23\x80\x92\x13\x20\xbe\xed\x55\x63\xb3\x29\x5b\x20\x35\x4f\x25\xba\xf6\xe1\xd9\xc1\xb4\x38\x6c\xf4\x17\x0e\xdf\x72\xf8\x04\xb8\x50\xd4\x4a\x13\x0f\x6e\x27\x9d\x2b\x8d\xba\xe3\xb5\xa3\x72\x7d\xd8\xa0\x9a\xa5\xac\xec\x3c\xff\x40\x12\x07\x31\xf8\xc9\x41\x70\x50\xe9\x6f\xab\xb2\xf2\x5d\x47\xe5\x54\x21\x17\xba\xcc\xd9\x93\xe3\x6d\xc4\x08\xa9\x51\x19\x6a\x70\x69\xb6\xa0\x38\xe6\x68\xb0\x46\xf9\x73\x99\xa3\xd6\xeb\x9a\xe1\xb4\x6d\xe8\x54\x8d\xf9\xff\xf4\xec\x7c\x02\x47\x47\xe0\x84\xa7\xed\xef\xc3\xda\xf3\x4e\xd3\xa1\x54\x21\x33\x48\x67\xec\x11\x33\x91\x5b\xc6\x55\x15\xc7\xfb\xa7\x8c\x17\xf7\xdf\x63\xbc\xc1\x6a\x6e\x95\xf1\x92\x24\x48\xb6\xcd\xed\x77\x66\x02\xef\x9c\xc9\x0e\xbc\xba\x30\x84\x06\xb6\x60\x22\x67\xf7\x39\x82\x16\x32\xc5\x86\x2b\x8c\xa3\x3e\xb8\xfd\x6e\xb7\xe7\x45\xcf\xb9\xcd\x55\x25\x6c\xc5\x59\xb1\x40\x0e\xcc\xbc\x24\xec\x45\x03\x9b\xd0\x8b\xeb\x84\x71\xf1\x03\x17\xa8\x02\x40\x2e\x8c\x85\x80\x7b\x85\xe6\xf3\xe4\x14\xf6\xa2\x5e\x34\x08\xa0\x02\x03\x2f\x50\xcb\x8e\x01\x2b\xfe\x95\xc0\xc8\x1e\xd3\x37\x39\xc9\x9e\xd7\x9f\x01\x00\x00\xff\xff\xdd\x85\xa5\xd3\xb0\x06\x00\x00")

func dataPatches21101_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches21101_readlinePatch,
		"data/patches/2.1.1/01_readline.patch",
	)
}

func dataPatches21101_readlinePatch() (*asset, error) {
	bytes, err := dataPatches21101_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.1.1/01_readline.patch", size: 1712, mode: os.FileMode(0664), modTime: time.Unix(1733239392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0x98, 0x6b, 0xbf, 0xe9, 0x99, 0xf2, 0x25, 0x7d, 0x95, 0xdb, 0x26, 0x67, 0xe9, 0xab, 0x2a, 0x8b, 0xb2, 0x14, 0x37, 0x75, 0x38, 0x90, 0x46, 0x4, 0x64, 0xe4, 0x8, 0xad, 0xc5, 0xa5, 0xde}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/Dockerfile-bionic-libssl-yjit.template":               dataDockerfileBionicLibsslYjitTemplate,
	"data/Dockerfile-bionic-libssl.template":                    dataDockerfileBionicLibsslTemplate,
	"data/Dockerfile-bionic-yjit.template":                      dataDockerfileBionicYjitTemplate,
	"data/Dockerfile-bionic.template":                           dataDockerfileBionicTemplate,
	"data/Dockerfile.template":                                  dataDockerfileTemplate,
	"data/Gemfile.bionic":                                       dataGemfileBionic,
	"data/Gemfile.bionic.lock":                                  dataGemfileBionicLock,
	"data/Gemfile.template":                                     dataGemfileTemplate,
	"data/Gemfile.template.lock":                                dataGemfileTemplateLock,
	"data/patches/1.0.0/01_for_tests":                           dataPatches10001_for_tests,
	"data/patches/1.0.0/02_for_tests":                           dataPatches10002_for_tests,
	"data/patches/1.9.3-p551/01_strict_hostname_checking.patch": dataPatches193P55101_strict_hostname_checkingPatch,
	"data/patches/2.0.0-p0/01_readline.patch":                   dataPatches200P001_readlinePatch,
	"data/patches/2.0.0-p195/01_readline.patch":                 dataPatches200P19501_readlinePatch,
	"data/patches/2.0.0-p247/01_readline.patch":                 dataPatches200P24701_readlinePatch,
	"data/patches/2.0.0-p353/01_readline.patch":                 dataPatches200P35301_readlinePatch,
	"data/patches/2.0.0-p451/01_readline.patch":                 dataPatches200P45101_readlinePatch,
	"data/patches/2.1.0/01_readline.patch":                      dataPatches21001_readlinePatch,
	"data/patches/2.1.1/01_readline.patch":                      dataPatches21101_readlinePatch,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": {nil, map[string]*bintree{
		"Dockerfile-bionic-libssl-yjit.template": {dataDockerfileBionicLibsslYjitTemplate, map[string]*bintree{}},
		"Dockerfile-bionic-libssl.template":      {dataDockerfileBionicLibsslTemplate, map[string]*bintree{}},
		"Dockerfile-bionic-yjit.template":        {dataDockerfileBionicYjitTemplate, map[string]*bintree{}},
		"Dockerfile-bionic.template":             {dataDockerfileBionicTemplate, map[string]*bintree{}},
		"Dockerfile.template":                    {dataDockerfileTemplate, map[string]*bintree{}},
		"Gemfile.bionic":                         {dataGemfileBionic, map[string]*bintree{}},
		"Gemfile.bionic.lock":                    {dataGemfileBionicLock, map[string]*bintree{}},
		"Gemfile.template":                       {dataGemfileTemplate, map[string]*bintree{}},
		"Gemfile.template.lock":                  {dataGemfileTemplateLock, map[string]*bintree{}},
		"patches": {nil, map[string]*bintree{
			"1.0.0": {nil, map[string]*bintree{
				"01_for_tests": {dataPatches10001_for_tests, map[string]*bintree{}},
				"02_for_tests": {dataPatches10002_for_tests, map[string]*bintree{}},
			}},
			"1.9.3-p551": {nil, map[string]*bintree{
				"01_strict_hostname_checking.patch": {dataPatches193P55101_strict_hostname_checkingPatch, map[string]*bintree{}},
			}},
			"2.0.0-p0": {nil, map[string]*bintree{
				"01_readline.patch": {dataPatches200P001_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p195": {nil, map[string]*bintree{
				"01_readline.patch": {dataPatches200P19501_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p247": {nil, map[string]*bintree{
				"01_readline.patch": {dataPatches200P24701_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p353": {nil, map[string]*bintree{
				"01_readline.patch": {dataPatches200P35301_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p451": {nil, map[string]*bintree{
				"01_readline.patch": {dataPatches200P45101_readlinePatch, map[string]*bintree{}},
			}},
			"2.1.0": {nil, map[string]*bintree{
				"01_readline.patch": {dataPatches21001_readlinePatch, map[string]*bintree{}},
			}},
			"2.1.1": {nil, map[string]*bintree{
				"01_readline.patch": {dataPatches21101_readlinePatch, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
