// Code generated by go-bindata.
// sources:
// data/Dockerfile-centos.template
// data/Dockerfile-lucid.template
// data/Dockerfile.template
// data/patches/1.0.0/01_for_tests
// data/patches/1.0.0/02_for_tests
// data/patches/1.9.3-p551/01_strict_hostname_checking.patch
// data/patches/2.0.0-p0/01_readline.patch
// data/patches/2.0.0-p195/01_readline.patch
// data/patches/2.0.0-p247/01_readline.patch
// data/patches/2.0.0-p353/01_readline.patch
// data/patches/2.0.0-p451/01_readline.patch
// data/patches/2.1.0/01_readline.patch
// data/patches/2.1.1/01_readline.patch
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDockerfileCentosTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\x48\x07\x14\x58\x4b\xa9\xae\xdb\x34\xce\xe6\x0f\x9e\xdd\x0c\x49\xd3\xbc\x36\x0d\xb0\x75\x68\x69\x91\xb2\x99\x48\xa4\x40\x52\x76\x5e\xe6\xfd\xf6\x3d\xa4\x64\xc7\x69\x3b\x14\x33\x60\x91\xf7\xf0\xee\x78\xef\xdc\x3b\x3b\x7e\x4f\xf7\xf7\xc9\x58\x39\x6f\xcd\x72\xd9\x39\xbb\x38\xa2\xdb\xba\xa4\xba\x12\xdc\x4b\x62\xb7\x6b\x44\x69\xe7\x79\x51\x00\xa2\x69\x96\x85\x3f\xcb\x9e\x3d\xa3\x92\x5f\x4b\xe2\xb5\x37\x71\x73\x2d\xad\x96\x05\x13\x72\x2e\x0b\xb2\x55\xc9\x26\xb5\x2a\x04\x7d\xea\x10\x7e\xd3\x42\x4d\xb2\xf6\x0c\xdb\x3c\x57\x2d\x31\x15\x93\xb2\xdd\xea\xac\xb6\x4e\xba\x96\x6a\xe4\xac\xe4\xa2\x50\x5a\xb6\xa0\xa9\xa4\x76\xae\x78\x50\x74\xcb\xcb\x15\x75\x07\xf2\x91\x2c\xd4\x15\xe4\xb9\xed\x3c\xa1\x0f\xb2\xac\x8c\xe5\x56\x15\xb7\x6b\x67\x38\x95\xc6\x4a\x7c\x04\x0c\xa7\xb9\xb4\x4e\x19\x4d\x26\xa7\xb3\x7a\x72\x9b\xd0\x90\x84\xac\x02\x99\x57\x25\x4d\x8d\x6f\xc3\x22\x88\x6b\x41\xca\xe9\xa7\x9e\x32\x53\x56\xdc\xab\x49\x21\x69\xa1\xfc\x8c\x2c\x04\xa9\x9b\xec\x24\x6f\x70\xe5\x62\xa6\xb2\x19\x18\xb1\xe1\x3e\xac\xed\xbd\xd0\x30\x57\x3c\x84\xb5\x33\x1c\x8f\x69\xe6\x7d\xe5\x76\xd3\xd4\x49\x2d\x32\xee\x13\xe8\x4c\x45\x91\xfe\xc6\xc5\xc1\xa1\x78\x51\x0d\x6f\x4e\xbb\x07\x1f\x47\x07\xaf\xae\x0e\x47\x3e\x7f\xfd\xde\xee\xed\xbc\xed\x0d\xfb\x13\xfd\x72\xfe\xee\xbc\xe4\xfa\x8f\xfc\xd8\x77\xc7\xa7\xa7\xfd\xee\xdd\xd5\x68\xba\x48\xbb\xdb\xaf\xbb\x69\xb0\x83\xbd\x4c\x7a\xc9\x8b\xcf\xbd\x37\xee\x9f\x4c\x6a\x6f\xdc\x67\x5e\x8a\xed\x57\x09\x12\x43\xa9\x2f\xab\x34\x26\x37\x50\x4c\x35\xc0\x0f\xa4\xe0\x52\x90\xf8\x73\x2b\xad\x9d\x4d\x27\x4a\xa7\x53\x59\x6e\x3d\xa7\xad\xd6\xaf\xb0\x45\xa8\xc2\xc2\xe6\x88\x42\x2f\xe9\xc5\x3d\x03\xab\x50\x76\xb0\x12\x6b\x40\x6d\x98\x15\x26\x7b\x20\xd4\xd6\x5f\x9d\x56\xbf\xa9\x7c\x34\x26\xda\xf2\x83\x9b\xfe\xa7\xf6\x58\x12\xa1\xe6\xcd\x42\x17\x86\x8b\x0b\x5b\x2c\x97\x7f\xa3\x46\xc8\xdc\xdc\x8d\x62\x1c\x3a\xf7\xf7\x96\xeb\xa9\xa4\xe4\x84\xfb\x6c\x26\xdd\x72\x19\xf2\x04\xa1\xe5\x92\x52\x9c\x22\x51\x68\x96\xcb\xe3\xb3\x77\xe3\xfd\xb3\x8d\xd0\x81\x23\x54\xce\xc7\xa6\x90\xda\x7e\xca\x8d\x25\x85\xd4\xd3\x97\xe8\x48\xe1\x28\xfd\x39\xa9\x82\xe2\x2f\xbf\x90\x30\x14\xb7\xc4\xaa\x17\xf4\x2b\xfd\xa4\x02\xa4\x65\x14\x1c\xed\x1d\x0e\x7f\x3f\x1f\x3c\x65\x25\xb7\xd9\x6c\x70\xb3\xb3\xcd\xb6\x5f\x11\x3b\xee\x11\xcb\xe1\x51\xce\x9d\xc7\x11\x8a\x8e\x4d\x01\x4d\xd1\x46\xc4\x2e\x63\x8f\x5e\xca\x1b\x6f\x39\x56\xb0\xd5\xba\x76\x52\xb0\x8a\x5b\x5e\x4a\x2f\x6d\x83\x82\x44\x72\xe1\x9a\x74\x0d\x50\x18\x3d\x8d\x9f\x86\x2c\x95\x73\x0a\x48\xae\x64\x21\x98\xd2\xca\x2b\x5e\xa8\x3b\x38\x86\xf3\x56\xe5\x1c\xcd\xc4\x43\xe5\xb3\xcb\xca\x28\x0d\xdd\x0c\x48\xb0\xe7\x72\x81\x55\x32\x0c\x15\xe8\x08\x12\x42\x66\x05\x0c\xf0\x88\x0a\xe3\x79\xe0\x44\x1a\xbd\x2c\x61\x03\x4e\x55\x59\x15\x2a\x53\x9e\xe5\xb5\xce\x22\xcf\x06\x7f\x94\xae\xac\xcc\x42\xe7\x6d\x1e\xb8\x95\x27\xd9\x35\x0e\x26\xca\x37\xb6\x36\x1d\x49\xb8\x40\x0c\x94\x33\xfd\x9d\x7e\x7f\xb7\xdb\xef\xf7\x09\x51\x3b\xd9\x1f\x3d\xa5\x24\xcd\x8c\xce\xd5\xb4\x46\xe7\x87\x29\xc1\x18\xb4\xe7\xea\x66\xb0\xae\xba\xaf\xd3\xd8\xb2\x49\x1d\xbc\x65\x6e\x86\xd8\x89\x16\x13\xca\x45\xb0\xad\x4b\x86\x92\x7b\xcc\x1d\x4a\x8c\x59\x59\xc0\xe4\xb9\x44\x03\x9d\x4b\x59\x3a\xf2\x86\x8c\xc6\x20\xe2\x79\x2e\x33\x4f\xce\x94\x12\xfd\xd2\x27\x27\xad\x42\x46\x70\x3b\x96\xe7\x34\xa9\x3d\x21\x49\x61\xca\xa0\x74\x70\x69\x9c\xb2\xce\xcb\x6a\xb7\xf3\x04\xca\xc2\x2f\x54\x4a\x84\xd9\xd5\xce\x7a\xb0\x8d\xdf\x9e\x7f\x40\x69\x0e\x62\x69\xe6\xa1\x73\xc1\xed\xc3\x14\x42\x61\x47\x95\x51\x04\x1b\xdd\xec\x5a\xc1\xe7\xb4\xe0\x8e\x26\xd6\x5c\x4b\x9d\xd0\x39\xd2\xe2\x3d\x52\x48\x2a\xcc\x3e\x30\x79\x13\xf4\x2c\x0c\x0c\x0d\x05\xe5\xa3\x69\x98\x41\x02\x33\xce\xd8\x6b\x47\x39\xcc\xdc\xed\x6c\xd8\x84\x58\x1e\xd5\xe5\xe8\xe4\xa2\xed\x86\xcd\xdb\xbe\x35\xf3\xa1\xa7\x9a\xd6\xc1\x6c\x6a\x06\x39\x73\x84\x1e\x5f\x11\x3e\x4e\xad\x96\xd0\xf4\xdd\xde\x5b\x1d\xf3\xd0\xb7\x43\x34\xd0\x03\x34\xa7\xff\x60\x06\xbc\x8f\xe2\x8c\xe5\x05\x7b\x23\xb3\x78\xf4\x70\x7d\x5a\x81\x8f\x5e\xb0\x35\xba\xf1\x94\xad\xb1\xef\xbd\x69\x80\xbf\x7a\xd6\xd6\xf8\xe3\xf7\x6d\xf3\xbe\x8d\x87\x6e\x0d\x7f\xf3\xe2\xb1\x66\x84\xa5\x1b\xa1\xab\x28\x85\x63\x7b\xaa\x90\x47\x18\x01\x6b\x67\x51\xed\x9d\x7f\x03\x00\x00\xff\xff\x64\x25\x05\x98\x01\x08\x00\x00")

func dataDockerfileCentosTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileCentosTemplate,
		"data/Dockerfile-centos.template",
	)
}

func dataDockerfileCentosTemplate() (*asset, error) {
	bytes, err := dataDockerfileCentosTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-centos.template", size: 2049, mode: os.FileMode(420), modTime: time.Unix(1453219527, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerfileLucidTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\x70\x87\x16\x18\x42\x69\xe9\xba\x20\xce\xe6\x02\x41\xb2\x0c\xc1\xb6\x24\x48\x96\xe5\xc3\x3a\xa0\xb4\x78\x92\xb9\x48\xa4\x40\x52\x79\x9d\xff\xfb\x1e\x52\x96\xad\xa4\x9d\x3f\x58\xc7\xe7\x5e\x78\x77\x7c\xee\x4e\x2e\xcf\x7f\xa7\xe7\xe7\xec\x58\xfb\xe0\xec\x6a\x35\xb9\xbc\x3e\x23\x2e\x96\x96\xa6\x8a\x17\xb4\x0c\xa1\x3d\xc8\x73\xcf\x45\xe7\x74\x78\xcc\xba\x45\x67\x42\x97\x15\xb6\xc9\x7b\x91\xea\xae\xd0\x4a\x0c\x06\xd4\x48\x6d\xa6\xf4\xf1\x23\xe5\x1c\x8a\x5c\xb6\x21\xf7\xb6\x73\x05\xfb\xac\xc6\x0d\x29\x3a\x40\x51\x71\xa0\xae\x55\x32\xf0\x0b\x48\x1b\x1f\x64\x5d\x93\x78\x24\xd7\x2d\x1e\x77\xb3\x59\xb6\x2b\xca\x0e\xc8\xa2\xd3\xb5\x12\xec\x3d\x9b\xa0\x65\x4d\x9f\x26\x84\x5f\xad\x17\xc5\x9e\x50\x7c\x17\xa5\xb2\xd4\x83\x58\xa9\x45\x33\xc8\x06\x99\x79\xf6\x3f\xa4\xf3\xc6\xcd\xb1\x54\xb5\x36\x3c\x58\x79\x5f\x0f\xe2\xa3\x6c\x7a\xf9\x09\x87\xdd\xea\xa5\x9f\x6d\xd9\x44\xdb\x4d\x7a\xa3\x44\xa3\x21\x2e\xab\x53\x49\x51\x18\xda\xd7\x3a\xab\xba\x22\x68\x6b\xb2\xa2\xcc\xa2\x43\xc5\x8d\xcf\xac\xab\xf2\xe1\xb0\x11\xc4\xfb\xec\x43\xf6\x3e\x0b\xd5\x13\xfd\x1b\xa4\x23\xfb\xf0\x74\x44\x79\x68\xda\x3e\xaa\x4a\xf2\x2b\x6b\x7a\xfb\x76\x9b\x06\x79\x0e\x5d\x9b\xb9\x45\x72\xf8\x6b\x9a\x77\xde\xe5\x0b\x6d\x72\xd8\x4f\x77\x68\xba\xee\x71\x14\xcb\x36\x21\x42\x40\xad\xb4\x9b\x0f\xa6\x3d\x68\xac\x70\xca\x16\xdb\x83\x9e\xfe\xbd\x2d\x2d\x72\xc6\xde\x9b\xda\x4a\x75\xed\xea\xd5\xea\x55\xb2\xcf\xcf\x4e\x9a\x8a\x29\xbb\x90\xa1\x58\xb2\x5f\xad\x0e\x8f\x8f\xa3\xd3\x6a\x45\x39\xb4\x6c\x14\xc8\x76\x73\x7e\xf9\xeb\xf1\xe9\xe5\xb6\x26\x01\x8b\x4b\x7c\xff\x64\xe7\xd1\xae\x35\x1f\x4b\xeb\x48\x83\x1c\xf4\x39\x15\x52\x7b\xca\xbf\xcd\xda\x18\xf8\xf3\x8f\xa4\x2c\x25\x91\x44\xfb\x1d\xfd\x44\xdf\xe8\x08\x99\x9e\x57\x47\x27\xbf\x1d\xfe\x72\x35\x7f\x27\x1a\xe9\x8a\xe5\xfc\x61\x7f\x4f\xec\x7d\x20\x71\xfe\x3d\x89\x12\x15\x95\xd2\x07\xa8\x02\x7c\x2b\x40\x15\x68\x43\xe2\x26\x11\xf0\x86\x1f\x82\x93\xf8\xc2\xac\x33\x9d\x67\x25\x5a\xe9\x64\xc3\x81\x5d\x8f\xe2\x08\x2e\xa2\x34\xf6\x3d\x50\x5b\x53\xa5\xbf\xfe\xd8\x68\xef\x35\x90\x52\x33\x98\xab\x8d\x8e\xbc\xd5\x4f\x28\x0c\xfa\x75\xc8\x3b\xe9\xb4\x5c\xd4\x0c\xa4\xb5\xda\x20\xb6\x00\x12\xf3\xb9\xb9\xc7\x97\x05\x86\x12\x31\xa2\x87\xe2\xa2\x46\x02\x91\x44\x42\x96\xd1\x12\xcf\x18\xb8\x41\x0e\xd0\xea\xa6\xad\x75\xa1\x03\x86\xc5\x24\xa2\x89\x91\x7d\xf2\x6e\x1d\x17\xb0\x57\x63\x85\x1f\x2a\x29\x6e\xa1\x58\xe8\xd0\xe7\x8a\xe9\x46\x47\x09\x17\xa8\xb9\xf6\x76\xb6\x3f\x9b\x1d\xec\xce\x66\x33\x42\xd7\x2e\x4e\x8f\xde\x51\x96\x17\xd6\x94\xba\xea\x1c\xa7\xc9\x10\x02\xd1\x4b\xfd\x30\xcf\x2d\x06\x3e\xbe\xe3\xeb\x67\x5c\x9b\xb1\x89\xd5\x0a\xbf\x44\xef\xd4\x1a\x53\xda\x27\x70\xcd\x4b\x01\xca\xbd\xb4\x8e\x14\x13\x8e\x6b\xa4\x7c\xc7\x93\x37\x74\xc5\x20\x3e\x05\x4b\xd6\xd4\x8f\x24\xcb\x92\x8b\x40\xde\x36\x4c\xe0\x3f\xd8\xef\x34\x5e\x04\xb7\xe3\xb3\x83\xbd\x11\x08\x8f\x44\xa8\x09\xd4\xc1\xa5\x8d\xbc\x65\xf2\x81\xdb\x83\xc9\x1b\x04\x8b\xbf\xc8\x94\x04\x8b\x7f\xf6\x37\x2b\xe8\xf8\xe7\xab\x3f\x40\xcd\x79\xa2\x26\x06\x25\x59\x87\x25\xfa\x02\x62\xa7\x90\xc9\x05\x82\xe9\xa5\xb5\xe3\x0e\xdd\x4b\x4f\x0b\x67\x6f\xd9\x64\x74\x85\x67\x09\x01\x4f\x48\x3a\x2e\x3c\x18\x05\x1b\xe3\xdc\x5b\x24\x1a\x09\x15\x52\x6a\x8d\x34\xca\xd3\xbd\x75\xb7\x9e\x4a\xa4\x79\x30\x19\xe5\x84\x5e\x9e\x75\xcd\xd1\xc5\xf5\x7a\x1a\xc6\xb7\x7d\x99\xe6\x76\xa6\xfa\xd1\x69\x9b\xf5\xf2\x12\x9e\x30\xe3\xc3\x21\x50\x5c\xef\xeb\x83\xa1\xaf\xce\xde\xa0\x96\x71\x6e\x0f\x31\x40\x5b\xe8\x8e\xfe\xc7\x18\xf0\x29\xc8\x99\xe8\x85\x7c\x93\xb1\x1a\xed\xe9\x4f\x23\x68\x58\xd8\x63\x6c\xb3\xb9\xc7\xe0\x57\x56\x78\xaf\x78\xb1\xc5\xc7\x8a\x61\x9d\x8f\xb1\xcd\x5e\xdf\x80\x5f\x2c\x78\xd1\x6f\xaf\x7c\xd4\xb5\x96\x72\xd4\x74\xa2\x6b\x3e\xc3\xf4\x6f\xea\x04\xd1\x27\xff\x05\x00\x00\xff\xff\x22\xa3\x7d\x4c\x3c\x07\x00\x00")

func dataDockerfileLucidTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileLucidTemplate,
		"data/Dockerfile-lucid.template",
	)
}

func dataDockerfileLucidTemplate() (*asset, error) {
	bytes, err := dataDockerfileLucidTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-lucid.template", size: 1852, mode: os.FileMode(420), modTime: time.Unix(1450821337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerfileTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x5b\x4f\x23\x37\x14\x7e\xcf\xaf\x38\x62\x2b\xad\x54\xe1\x4c\xd1\xb6\x88\xd0\xe6\x01\x91\x52\xa1\xb6\x80\x42\x29\x0f\xdd\x4a\xeb\x8c\xcf\x04\x17\x8f\x3d\xb2\x3d\x84\x4b\xf3\xdf\xfb\xd9\x33\x13\x86\xee\x6e\x1e\x32\xf6\x77\x2e\x3e\x97\xef\x9c\xb3\xe5\xe5\xef\xf4\xf2\x32\x5d\xe8\x10\xbd\xdb\x6e\x27\xcb\x9b\x0b\x92\x4d\x14\x6b\x8e\xd4\x36\x4a\x46\x7e\x03\x69\x1b\xa2\x34\x86\xc4\x13\xf9\x76\xf5\x74\x30\x9d\x4d\x3f\xd0\xaa\xd5\x46\x09\x0e\x81\x6d\xd4\xd2\xd0\xc7\x09\xe1\x67\xf4\xaa\x3c\x14\x8a\x1f\xd2\xa9\xaa\xf4\x70\x5c\xab\x55\x3d\x9c\x6d\xd9\xfa\xc0\xe1\x87\x7c\xdf\x99\x79\x96\xca\x68\xcb\x83\x56\x08\x66\x38\x3e\xc9\xba\x3b\x3f\xe3\x72\xb0\x1e\xd9\xc1\x93\xc9\xa1\xfe\xb5\x57\xb4\xc1\x17\x2b\x6d\x8b\x35\xd7\x7b\xfb\xb4\xd7\x07\x9d\x8e\x55\x93\x11\x21\x20\x56\xda\xcf\x07\xd5\x0e\xb4\x4e\x78\xe5\xca\xd7\x8b\xde\xfb\x3b\xfb\x4c\xce\x73\x99\xdc\xc6\x1a\x27\xd5\x8d\x37\xdb\xed\xbf\x51\x7a\x72\x8f\xcf\xa7\x54\xc4\xba\x99\xbc\xbc\x78\x69\xd7\x4c\xd3\x2b\x19\xcb\x3b\x0e\xdb\xed\xc9\x62\x91\x8c\xb6\x5b\x2a\x20\x65\xab\x50\xdf\xdb\xcb\xe5\xaf\x8b\xf3\x65\x36\x29\x52\x09\x05\x34\x96\xf8\xfe\xc9\x3e\x68\x67\xfb\x16\x54\xce\x93\x46\xb5\xe9\x53\x4e\xc4\x04\x2a\xbe\x9d\x36\xc9\xf1\xa7\x1f\x49\x39\xca\x47\x12\xcd\x77\xf4\x13\x7d\xa3\x13\x64\xbb\x46\x9d\x9e\xfd\x76\xf2\xcb\xf5\xfc\xbd\xa8\xa5\x2f\xef\xe6\x8f\x47\x87\xe2\xf0\x7b\x12\x97\x1f\x48\x54\xc8\xa8\x92\x21\x42\x14\x61\xbb\x06\xb4\x46\x33\x48\xdc\xe6\x8e\xde\xf2\x63\xf4\x12\x5f\xa8\xb5\xb6\x0d\xac\x44\x23\xbd\xac\x39\xb2\xef\x50\x5c\xd1\x61\xa4\xc6\xa1\x03\x8c\xb3\xeb\xfc\xd7\x5d\x6b\x1d\x82\x06\x52\x69\x06\x1f\xb4\xd5\x89\x0d\xfa\x19\x89\x41\xde\xbb\x7c\x90\x5e\xcb\x95\x61\x20\x8d\xd3\x16\xbe\x05\x90\x14\xcf\xed\x06\x5f\x16\xe0\x21\x7c\x24\x0b\xc5\xa5\x41\x00\x11\x55\x11\xb2\x4a\x9a\x68\x63\xe4\x1a\x31\x40\xaa\xeb\xc6\xe8\x52\x47\x51\xb5\xb6\xcc\x3a\x23\xfd\x6c\xdd\x78\x2e\xa1\xaf\xc6\x82\x30\x64\x52\xde\x43\xb0\xd2\xb1\x8b\xb5\x74\x35\x2a\x4a\x78\x40\xcd\x75\x70\xb3\xa3\xd9\xec\xf8\x60\x36\x9b\x11\xaa\x76\x75\x7e\xfa\x9e\xa6\x45\xe9\x6c\xa5\xd7\xad\xe7\xcc\x37\x21\xe0\xbd\xd2\x8f\xf3\xc2\x35\x31\xf7\xf1\xff\x6d\xec\xd5\xd8\xa6\x6c\x45\xb8\x43\xed\x54\x8f\x29\x1d\x32\xd8\xf3\x52\x80\x72\x6f\xb5\x13\xc5\x84\x67\x83\x90\x1f\x78\xf2\x8e\xae\x99\xeb\x40\xd1\x91\xb3\xe6\x89\x64\x55\x71\x19\x29\xb8\x9a\x09\x03\x48\x81\xbd\x46\x47\xf0\x3a\x3e\xfb\x98\xc6\x48\x68\x12\x21\x27\x50\x07\x8f\xd6\xf2\x9e\x29\x44\x6e\x8e\x27\xef\xe0\x2c\xfd\x12\x53\x32\x2c\xfe\x39\xda\xcd\xf4\xe2\xe7\xeb\x3f\x40\xcd\x79\xa6\x26\x06\x25\x6b\xc7\x3b\xd4\x05\xc4\xce\x2e\xb3\x09\x0e\xb6\x3b\xf5\x86\xfb\xb4\x91\x81\x56\xde\xdd\xb3\x9d\xd2\x35\xda\x12\x23\x5a\x48\x3a\x6d\x10\x28\x45\x97\xfc\x6c\x1c\x02\x4d\x84\x8a\x39\xb4\x5a\x5a\x15\x68\xe3\xfc\x7d\xa0\x0a\x61\x1e\x4f\x46\x31\xa1\x96\x17\x6d\x7d\x7a\x75\xd3\x4f\xc3\xf8\xb5\xcf\xc3\x7c\x9d\xa9\x6e\x74\x9a\xba\x5f\x09\x22\x10\x66\x7c\xb8\x44\x52\xbc\x1a\x2e\x96\xbe\x38\x7b\x83\x58\xa6\xb9\x3d\xc1\x00\xbd\x42\x0f\xf4\x15\x65\xc0\xe7\x20\x67\xa6\x17\xe2\xcd\xca\x6a\xb4\xfd\x3e\x8e\xa0\x61\x0d\x8e\xb1\xdd\x3e\x1c\x83\x5f\x58\x8c\x9d\xe0\xcd\x6e\x1c\x0b\x86\x25\x39\xc6\x76\xdb\x72\x07\x7e\xb6\x36\x45\xb7\xbd\x8a\x51\xd5\x1a\x2a\x90\xd3\x99\x36\x7c\x81\xe9\xdf\xe5\x09\xa2\x4f\xfe\x0b\x00\x00\xff\xff\x79\xcd\x4e\xba\x2f\x06\x00\x00")

func dataDockerfileTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileTemplate,
		"data/Dockerfile.template",
	)
}

func dataDockerfileTemplate() (*asset, error) {
	bytes, err := dataDockerfileTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile.template", size: 1583, mode: os.FileMode(420), modTime: time.Unix(1450821337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches10001_for_tests = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x4a\x2c\x02\x04\x00\x00\xff\xff\xaa\x8c\xff\x76\x03\x00\x00\x00")

func dataPatches10001_for_testsBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches10001_for_tests,
		"data/patches/1.0.0/01_for_tests",
	)
}

func dataPatches10001_for_tests() (*asset, error) {
	bytes, err := dataPatches10001_for_testsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.0.0/01_for_tests", size: 3, mode: os.FileMode(420), modTime: time.Unix(1448757621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches10002_for_tests = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x4a\xac\x02\x04\x00\x00\xff\xff\x98\x04\x24\x78\x03\x00\x00\x00")

func dataPatches10002_for_testsBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches10002_for_tests,
		"data/patches/1.0.0/02_for_tests",
	)
}

func dataPatches10002_for_tests() (*asset, error) {
	bytes, err := dataPatches10002_for_testsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.0.0/02_for_tests", size: 3, mode: os.FileMode(420), modTime: time.Unix(1448757621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches193P55101_strict_hostname_checkingPatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x7b\x73\xda\x48\x12\xff\x9f\x4f\xd1\x07\x55\x31\xd8\x20\x1e\x06\x3f\xa8\xf5\x6e\x38\xdb\xd9\x4d\x55\x8c\x53\xc1\xa9\xbd\x2b\xdb\x47\x8d\xa4\x11\x68\x23\x46\xac\x34\x18\x9c\xdd\xbd\xef\xb2\x9f\x65\xbf\xd8\x75\xeb\x39\xe2\x1d\x87\x38\xa9\xad\xa3\x12\x83\x66\x5a\x3d\xfd\xf8\x4d\x3f\x46\x7a\xe5\xb9\x23\x38\x35\x1a\x87\xc7\xec\xe4\xb8\xa1\x1f\xd6\xf4\x5a\xb3\xae\x37\xeb\xcd\x66\xad\xd5\x68\x9d\x1c\x9d\x36\x2c\x5e\xab\xd5\x4f\x4e\x8c\x06\x6f\xc1\x95\x2b\xa0\xc7\xc7\x50\x3f\x86\x5a\xad\x1d\xfc\x83\x06\x4e\xe7\x88\x4d\x1b\x6e\x5c\xf1\x08\x1d\xcf\xb0\xb9\x67\xc3\x77\x3a\xf3\x8d\x89\xc3\x5f\x0e\x46\xcc\x76\x34\xc3\x1d\x7d\x9f\xbb\x60\x92\xb7\xa1\x37\x11\x65\x68\x9c\xc2\x15\xf3\xf0\xee\x7a\x0b\xd9\xb5\x1b\x27\xed\x66\x13\x2a\xb5\xe3\x5a\x2d\xd7\x9b\xe8\xbf\x70\x43\xb6\xe1\xf6\x6d\xe7\xe6\xfc\xa7\x7b\xe8\x49\xcf\x36\x24\xf7\x60\xe8\xfa\x52\xb0\x11\x87\x07\x5c\xc1\xb2\x0d\x26\x6d\x94\xc8\x72\x1d\xc7\x9d\xda\x62\x00\xef\x5e\x9d\xc3\x51\xbd\xd1\xd2\x72\xb9\x9b\x21\x13\x1f\x7c\x90\x2e\xbc\x14\x6c\x68\x23\x91\x07\x72\xc8\x41\x72\x5f\xfa\xc0\x84\x09\xb6\xb0\xa5\xcd\x1c\x30\x5d\x63\x32\xe2\x42\x06\xcc\xb4\x5c\xa5\x52\xc9\x01\x9f\xc9\xaa\x3b\xe6\xc2\xf7\x9d\xaa\x63\xeb\xc9\x6f\xfc\x5f\xb1\x05\x8a\x22\x98\xa3\x79\x3a\xfc\x0e\x70\xd4\x80\x83\x25\x1f\xe2\x42\x6b\x25\xb7\xd2\x45\x1f\x7f\xd0\x6d\x80\x37\xd6\x5b\xb5\xa5\x37\x6e\xfc\xe4\xa0\x01\x96\xed\x70\x1f\x0c\xd4\x71\xc0\x4d\x34\x66\xed\x04\xd5\xf1\xb9\x47\x2a\xf8\xc5\x83\x52\x19\x9a\x60\x72\x87\x87\xd7\x95\x52\x2e\x67\xda\x96\x05\x95\xca\xc0\x96\xc0\xaa\x6b\xd4\x23\xf1\xf4\x0d\x04\x39\x5b\x98\x7c\x06\x96\x55\x37\x9b\xdc\xd2\x34\x83\x59\x35\xfd\x94\x41\xbd\x56\x3b\x6a\x36\xc9\x82\xdb\x1a\x30\x87\xfa\x6c\x4d\xfb\xf2\x25\x54\xea\xcd\xc3\xf2\x09\x1c\xd0\xd7\x31\xe0\x80\xc9\xad\x10\x0c\x8f\x7d\x83\xd4\x0f\x40\xc1\xfb\xb6\x89\x0e\xb5\xe5\x63\x91\x06\xcb\x09\x6e\x4a\x39\x48\x3f\x06\xf3\x39\xf8\x4c\x68\x92\x0d\xd4\xf1\xe9\x90\x0b\x34\x71\x01\xcc\x6e\xaf\x4b\x60\xb3\x05\xfc\xc8\x05\xf7\x98\x13\x5c\x16\x11\x65\xad\xc6\x49\x2d\xc3\x0c\xc0\x1f\xba\x13\xc7\xec\xc7\xc2\xb8\xa3\x91\x2b\xfa\x01\x58\xcf\xc0\x62\x8e\xcf\x73\x15\x95\xdc\xe3\x03\x9c\x78\xc7\x07\x7c\x36\xd6\xb8\x6f\xb0\x31\x2f\x92\x30\x0f\xcc\x99\xf0\x92\x36\xf0\x27\x7a\xb1\x7a\x77\x77\xb7\x5f\x2d\x43\xfe\xf6\x3f\xda\xfd\x41\xbe\x34\xcf\x41\x4e\x3c\x01\xd2\x9b\xa0\x88\x16\x54\xef\x3a\x85\xdf\x90\xeb\x1f\x77\x1f\xab\x36\x9c\xfd\x37\x51\x3a\x77\xb0\xe6\xae\x48\xdc\x98\xb6\x18\xff\x28\x43\x2a\xcc\x82\x71\x8e\xd1\x38\xf6\xdb\x8e\x69\x7a\xdc\xf7\x77\x66\x9e\x0c\x79\x21\xda\xd5\x3e\xfc\x78\xd9\xbd\x7c\xd7\x79\xd3\xef\x76\xae\x2e\xfb\x63\x0f\x01\x51\x2c\xd1\x9a\xb3\x56\xed\xf4\xe1\xb0\xfa\x70\xd8\x67\x8e\xd4\x8c\x10\x1d\xad\xd3\x00\x1d\xad\x93\xcf\x42\x07\xda\x65\xa5\xb8\xa9\x98\x74\xb3\xe6\x87\xb1\x4a\x93\x6e\x9f\x69\x9c\x19\xc3\xdf\x7e\x77\x6d\xdc\x91\x81\xe5\x7e\x57\x75\x42\xa6\x38\x03\x67\x67\x90\x3f\xef\xe6\x37\x83\xe1\x9b\x01\xc2\x22\x08\xb8\x30\xd3\xcb\x3f\x72\xca\x68\xe0\x84\xa3\x93\x72\xbd\x8e\x5e\x38\x3a\x2a\x1f\x3d\xdd\x0d\xc9\x22\x23\xd7\xc4\x34\xd2\xb7\x26\xc2\x08\xc2\x7d\x7b\x0d\xab\x5c\xa8\xa3\xb2\xe0\x72\x64\x97\x10\x60\x6d\xe1\x62\xe8\x6f\xc7\x56\x29\x04\xd9\x83\x90\x5b\x86\xd7\x9d\x16\xe5\x1c\xcc\x28\xb6\x0f\x8e\x3d\xb2\x25\x37\x29\x95\x50\x02\xf1\xb9\x04\xd7\x82\x4e\xef\xfc\xf5\x6b\x8a\xc0\x1e\xa3\xd4\xe4\xc7\x6c\x22\xb3\x06\x90\x86\x89\x70\x68\x87\xd0\x56\xc2\x64\x68\xdb\x7d\x57\x38\x8f\x3f\xac\x23\x8d\xa5\xcc\xd2\xa7\x32\xf6\x38\x4f\xb2\x1c\x6a\xc2\x43\x93\x1c\x69\x4d\xad\x9e\x12\x5d\x31\x69\x0c\x23\xe9\x29\xca\x55\x28\x37\x08\x1f\xd3\xdd\x03\xd7\x62\x32\x14\xaa\x3f\x66\x1e\x26\xc3\xb3\x40\x40\xd3\x9d\x0a\x22\xd6\xfc\xb1\x63\xcb\x62\x5e\x43\x98\x29\x0b\xdf\x5c\x5f\x5c\xb7\xd1\x00\xc8\x52\xe7\x43\xf6\x60\x63\x3e\x0d\x37\x09\x8c\x3d\x57\x67\xba\xf3\x88\x13\xe8\x2c\x0f\x4d\x14\xe4\xeb\x39\x35\x71\x0d\x02\x7f\x92\xc2\x69\x93\xc5\x22\x68\xbe\xfd\x91\xc3\x77\xd0\x50\x57\xdc\x4a\x0b\x62\x97\xa8\x91\x18\x6f\x83\x2e\xcb\x0d\x78\x88\x97\x13\x1d\x5d\x3d\x82\x86\x96\x12\xbf\xb6\x02\xb7\x4f\x6d\xc7\x34\x98\x67\xa6\x2e\x27\xb9\x68\x86\x7c\xa4\x8c\xba\x21\xbd\xc3\x2d\x59\x19\xa1\x40\x29\x27\x87\xe9\xdc\xa1\xd0\x45\xf3\x63\x8c\x9d\x88\x59\xc4\x55\x88\x5d\x0b\x8b\xa6\x72\x30\x63\x38\x36\x0e\x40\xef\xa7\xeb\xf7\x6f\x2e\xa0\x7b\x7d\x03\x18\x7e\x50\x45\x9e\x72\x62\x03\x86\xc6\xc0\x4c\x2e\x1e\x65\x60\x22\x7d\x22\xb3\xab\x46\x8b\x45\xc2\x78\xdc\xe2\x1e\x17\x86\xc2\x22\x5d\x15\x8a\x5c\x1b\x68\x65\xd8\xd7\xf8\x8c\x8d\xc6\x0e\xa7\x5a\x0d\xa6\x81\x6b\x47\xe4\x03\x0c\xc5\x6e\x66\x0e\x57\x4b\x19\x09\x57\x82\xce\x3c\x6d\x9e\x08\xf1\xa1\x5c\x96\xb4\x0d\x1b\x44\x05\x42\x04\x13\x65\xe8\x93\xbc\x57\x57\xbc\x77\xb3\xd4\xa0\x4c\x22\xdd\x58\xd2\x96\x0e\x35\x64\x4b\xfd\x81\xbe\x4a\x39\x4d\x87\x36\x12\xae\x80\x02\x79\xc8\xb3\x7d\xac\xc9\x58\x6c\x79\xa4\xa4\x8a\x93\x05\xee\x56\x40\x30\xe7\xa1\xc8\xf8\xa6\x1b\x18\x32\x94\x86\xcc\x99\x7a\x43\x70\xb9\xde\x7a\x51\xa4\x8b\xc5\x2a\xaa\xb6\x1b\xda\x96\x2c\xab\xf6\xa5\x01\x65\x33\xa4\x33\xbf\xb8\xb6\x08\x76\xca\x9c\xf9\x93\xf1\xf0\x16\x0a\xcb\x07\xeb\xc2\x72\x9a\x6d\x16\x62\x71\x22\xa1\xe9\x62\x4f\x20\x28\xad\x8e\x5d\x81\xd6\x0e\x25\x4c\x2e\x97\x44\x67\x25\x52\xa5\x74\xf1\xf6\xde\xcf\x97\x31\xed\x28\x5a\x65\xac\x84\x81\x46\xc1\xd6\xf7\x14\x64\xe6\x03\x53\xca\x92\x94\x9f\x97\x6e\x8e\x03\x52\xd4\x3f\x09\x8f\x87\xbb\xc2\xa3\x0a\x46\xdc\xcf\x6b\xe2\x12\x1f\xe9\xdc\x34\xf1\xe6\xa9\x4d\x01\x02\x03\x05\x74\x2a\x11\x30\x15\x36\xef\x2b\x49\x98\x40\x8a\xa8\xd6\x26\x15\x98\x83\x9a\x9a\x91\x25\x20\x88\xa9\xab\x6c\x3b\x6f\x2d\xcd\x97\x68\xab\x3e\x2d\xfc\x43\x31\x3f\x13\x95\x0a\x42\xea\xc5\x8b\x39\x33\xff\x03\xcb\xa0\xfd\x7c\x6a\xc6\xc0\xbe\xb7\xb5\x7b\xcd\xe1\x62\x20\x87\x70\x10\x8d\xd4\x93\x91\xef\x16\x57\x8a\x66\x5e\xbc\x88\xb9\xac\x95\x25\x5e\xa2\xb4\xee\x06\x84\x77\x86\xbc\x7e\xbf\x2d\xee\x63\x47\xa0\x4e\x01\x6b\xc3\x61\xb8\x37\x7b\xbd\x37\x3d\xd7\xf8\xc0\x65\x52\x5b\x0a\xc3\x99\x98\x1c\xfe\x39\xb1\x30\x26\x63\xec\x9e\x9f\x08\xc9\x5f\xb9\xde\x14\x99\xa1\xcf\xe7\xa6\xbb\xae\xd0\x1d\x24\xc9\x25\x5e\x2c\xa4\xfe\x7c\xcb\x3d\xec\x73\x47\x2b\xfa\x64\x66\x11\x3a\xd0\xd1\x28\x14\x46\x2c\x21\x22\xb8\x12\x5e\xd0\x50\xba\x63\xfb\x43\x6e\x26\xdc\x54\xd0\x22\xc9\x88\xcb\xa1\x6b\xc2\xd5\xfb\xde\x0d\x25\x7a\x83\x39\x0e\x22\x24\xe4\x49\x17\x94\x86\x0a\x11\x57\x02\x32\xa6\xea\x49\x80\x51\x26\xb3\x11\x30\x11\x8e\x50\x87\x70\x1a\xb9\x12\xd3\x21\xa7\xf6\x9e\x51\x71\x81\x0d\x46\x28\x36\x37\xb5\x58\x7b\x0a\x22\x63\x8a\x49\xa9\xd8\x7d\x63\xc8\x8d\x0f\xc5\x25\xad\x5d\x14\x16\xaf\xb1\x8d\x44\x4d\xdb\x6d\xfc\xa3\xad\x2b\x3f\x69\xed\xfe\x9a\x46\xd1\x63\x18\xd9\xc9\x68\x97\x9e\xe7\x62\x92\xce\x27\x1a\xdc\xe5\x0b\xbf\xc5\x17\x7f\xdc\xe5\x11\x4e\x98\x01\xd2\x38\x1e\x96\x8b\xde\x03\x59\x28\x5d\x38\x9f\xed\xc5\x57\x1e\x12\xe8\x2b\xa7\xa2\xfe\x5b\x3f\x6a\x1d\x9e\x9e\x62\xff\xdd\x6c\x34\x6b\xf5\x93\x86\xda\x7f\xaf\xbc\x95\x1a\xee\x95\x93\x54\xbe\x37\x1b\x58\xb6\xc3\x01\x7d\xd5\x5b\x47\x71\xf9\x1e\x50\xad\x2b\xbc\x21\xde\x24\xd1\x17\xf9\x7b\xfe\xc6\x6c\x23\x82\xdb\x03\x19\xf5\xf9\xaf\x13\xe6\x14\xa9\x0d\x29\xc3\x52\x9f\x25\x15\x7c\x7e\x3a\x9d\xaa\x25\x06\x46\xfd\x7c\xa6\x68\xc9\x97\x4a\x4b\x58\x07\x91\xaa\xbc\x05\x6b\x8c\xd7\x61\x3c\xd8\x66\x91\x20\x1e\x2c\x53\x32\x8d\x03\x9f\x22\x49\x92\x1a\xf3\x58\x47\xd1\x9a\xb3\xfd\xe5\xda\xac\x31\xd4\x02\x0f\xfa\xfa\x7c\x26\x3b\x10\x64\x05\x8b\xad\xec\xc1\x74\x63\x5f\x37\x4c\x62\xc3\xe8\xfb\xe9\x9c\x28\x17\xfd\x6a\x7e\x68\xea\xa7\xfa\x3a\x0b\x3f\x85\xd7\x7e\x7a\xf5\x74\x63\xcd\xcb\x27\xe6\x99\x26\x98\x2b\xc0\xb9\x3b\xa2\x33\x4b\x3f\x6c\x27\xa8\x13\x41\x08\x06\x91\x7c\x86\xdb\x73\x4c\x75\x83\x45\x47\xbb\x43\x29\xc7\xed\x6a\x55\xba\xae\xe3\x6b\x36\x97\x96\xe6\x7a\x83\xea\x50\x8e\x9c\xaa\x67\x19\x54\xb6\x14\xc6\x6c\xc0\x2b\x8d\xe3\x0c\x96\x97\xc6\xda\x44\xd4\x3e\xe6\xf2\x50\xc9\xc2\x42\x67\x16\x37\xc6\x41\xcb\x62\xfb\x6e\x42\xb8\xb6\x6b\x2d\xc4\x54\x79\x4d\x1b\xc5\x7d\xdf\x7c\xf3\xa2\x56\xe6\x71\x07\xb4\xaa\x95\x8a\xf9\xa1\x45\xc6\x61\x52\xc4\x69\xfd\x31\x96\x0b\xb9\x2b\xbd\xbc\x52\xe6\x84\x55\xb9\x0f\x13\x9f\x68\xd8\xd6\x5a\x96\xd1\xdf\x94\xf2\xc3\xbc\x45\x2b\xdd\x5e\x74\x7b\x95\xf3\x4e\xef\xf2\x3e\xaa\xf1\x13\x15\x7f\xfe\xf9\x67\xed\x32\x0a\x28\xe8\xc7\x7c\xd4\x6b\x61\x52\x75\xdc\x29\xf7\x2a\xb4\x58\x70\xdc\xb0\x10\xf0\xe8\x14\x3b\x11\x29\x59\x1b\xc6\x13\x0f\x1d\xc6\xfd\xd5\xc8\xdb\x3a\x17\xc6\x69\xda\xf0\x38\x8d\x13\x4d\x50\x0f\x91\xcb\x8b\x7b\xa8\x52\x3b\x13\x0c\xf7\x4a\x65\xd8\x9b\x93\x72\x6f\xcd\x0e\xd8\xa9\x1c\x89\x0d\xaf\xaf\xbe\xaa\x1c\xf3\xf6\xc8\xf8\x97\x64\x2b\xc5\x3e\xab\x6b\xb0\xa3\x8e\xb4\x10\x48\xb5\x83\x9e\x34\x64\xf4\x59\x5d\xe9\xb6\xd1\xf3\x89\x06\x26\xb7\xee\x6f\x04\x5b\x01\x1a\x68\xdc\xdd\x1c\xd6\x44\x36\xd9\xc9\x71\x4d\xc8\xeb\x33\x0f\x6c\x42\x26\x3b\x39\xb2\x09\x59\x7d\xda\xa1\xcd\x73\x6f\xa0\x39\xa9\x96\x6f\xe4\xdd\x03\x6d\x51\x90\x25\x26\x52\x00\x77\x98\xdd\xcd\x57\x9d\x7f\x6f\xda\xbb\x4b\x36\xac\xea\x95\x0c\x5a\xc9\x45\x6b\x10\xab\x6c\x53\x95\x85\xce\x3e\x66\xf6\x68\xf0\xa4\x73\x1f\x47\x17\x06\xf5\xfd\xec\x58\x80\x9e\x0c\x2b\x6c\xde\xd8\x07\xec\xc6\x92\x98\x84\x6c\xea\x0b\x7c\xd0\x3e\x4b\xd8\x67\x18\x4d\x3e\x66\xe6\xcb\x08\x6f\x7f\x4c\x45\xc0\x03\x77\x1e\x4b\x68\x45\x4d\x7b\x16\xa4\x65\x8c\x93\xfa\x58\x51\xea\x19\xd3\x86\x6a\x34\x05\xf8\x0b\xc3\xcf\x22\x8d\x0a\x86\xc4\x30\xaa\xdb\xb2\xc8\xef\xa9\x07\x5d\x04\x49\x2c\xee\xa8\xb6\x03\x5f\xe2\x02\x7e\xd8\xf4\x47\xdb\x22\x7a\x48\x40\x81\x31\x44\xd1\x62\x91\x16\x9e\x66\x25\x41\x1b\xc1\xaf\x64\xaa\xb9\x08\xa9\xcd\x15\x8c\x1d\xc7\x77\xc1\x46\x19\x6d\xc3\x96\xb8\x53\xa8\x2a\xa6\x87\xde\xab\xf2\x40\xb0\x9d\x70\x27\x52\x7d\x37\xc1\x7a\x8d\x4a\xaa\x51\xb2\x85\x08\xd0\xa6\xed\x1b\xee\xc4\xc3\xaa\xd8\x87\xa4\x16\x8d\x03\x78\xf0\x7c\x23\x90\xcb\x15\x29\xff\x79\xa1\x96\x3f\xa5\x39\xd6\x1a\x8b\x8f\x18\xbe\x74\x4c\xd3\x17\x11\x8f\x6d\xd4\x57\x09\xaf\x4b\x45\xf9\x56\x24\x59\x61\x93\x30\x82\xad\xf9\x60\xe8\x02\xf8\x09\xeb\xf6\x87\x95\x05\x41\xca\x69\xdb\x2a\x6f\xf1\x78\x37\xe5\xb1\xfd\x39\x6f\x72\xbc\x7b\xfb\xfa\xa2\xdb\xa9\x5c\x5c\xbe\xea\xdd\xe3\x66\x55\xc4\xd9\x70\xe6\x1b\xdd\xf8\xf6\xdd\xf5\xcd\xf5\xfd\xb3\x44\xe8\x99\x58\xf4\xcc\x4c\xd4\x0d\xb6\xc2\x39\x74\x48\x1b\x3c\x8d\x0d\x35\x7d\x16\xf4\x50\x5f\xbe\x4c\xca\x4a\x65\xb3\x9c\xef\x55\x39\x33\x6f\x98\x44\x6f\x4d\x90\x53\xd1\x2d\xe9\x03\x68\x8c\x6e\xb1\x1b\x95\x48\x8a\xb9\x99\xd1\xeb\x11\x3c\x01\x86\xc7\x07\x08\x93\xe0\xe0\x13\xd7\x59\x17\x98\x7a\x69\x38\x8a\x42\x77\xf0\xd4\xbb\x9d\xe2\xe2\x09\x8f\xbf\x9f\x27\x9a\xfd\xf5\xe7\xa2\xe1\xff\xfa\x73\x59\xfa\x5e\x3c\x9e\xdb\x70\xa4\x61\x88\x2f\x88\xef\xe0\x8c\x71\xef\x2b\x77\xce\xb1\x10\x5f\xb5\x6d\x5e\x65\x89\x55\x3d\xf3\x97\x01\x54\x28\xc5\x76\x8d\xe5\xb3\x9a\xe1\x79\x3b\x9f\x55\x52\xac\x6b\x7b\xbe\xa0\x39\xbe\x81\xf2\x3c\xb2\xc8\xb7\x50\x9b\x47\x36\xf9\x7f\x61\x0e\x7f\xa7\xc2\x3c\x06\xd8\xd7\xae\xca\xd7\xc9\xf1\x4d\x88\xb1\x8d\x35\x76\xbb\xd5\x3e\xad\xf6\xfc\x92\xf6\xd8\x61\x85\x19\xbd\x4b\xaf\x56\x98\x51\x28\xd8\xf8\x48\xe3\xef\x51\x3b\x86\x16\x7d\x62\xe1\xb8\xb4\x12\xa5\xd7\x47\xc3\xe5\x90\xe2\x2c\x15\xf1\x5f\xad\xda\x69\xbb\x7d\x39\x93\x64\x51\x57\xbc\x42\xe5\x5c\xef\x51\x13\x7c\x1a\x52\x13\x97\x45\xfa\xf3\x54\x9b\x2c\x69\xfc\x6a\xf1\xe2\x2d\xd4\x32\x68\xe8\x24\x9f\x17\xf3\xd5\x8b\xf3\x33\xdf\x1d\xf1\xe0\x1b\x6d\x5d\x3d\xef\x9e\xf5\xf0\x1a\x7a\x78\x91\xbc\xb3\x35\x23\x2e\xdc\xd2\x22\x7d\xf0\xba\xb8\x17\xb1\xef\x38\x92\xf8\xed\x85\xaf\xc5\x2a\xcb\x33\xd3\x24\xc2\x50\x99\x22\xfe\x52\x26\x37\x1b\x2a\x30\x7b\xf8\x26\xc5\x17\x50\x1e\x69\x8b\xb7\xb7\x7b\x17\xe7\x28\xf6\x1e\xa9\xbf\x77\x5f\x86\xe4\x1a\x35\x0f\xaf\xcf\xbb\x78\x4d\x42\xdc\xdf\x2f\x17\x3e\x17\x80\xf6\x3c\x10\x1e\xba\xef\xdf\xbc\x01\xfd\x11\x7f\xf5\x3a\x5d\xf5\x85\x0d\xa2\x52\x94\x14\x13\xc7\xe9\x13\x5d\x1f\xe9\x54\x34\x16\x0d\x0f\x77\x92\xc1\x9c\xf8\x95\xf6\xf8\x4d\xe6\x2d\x61\xf2\xbf\x00\x00\x00\xff\xff\x3c\x67\x0d\x81\x8c\x33\x00\x00")

func dataPatches193P55101_strict_hostname_checkingPatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches193P55101_strict_hostname_checkingPatch,
		"data/patches/1.9.3-p551/01_strict_hostname_checking.patch",
	)
}

func dataPatches193P55101_strict_hostname_checkingPatch() (*asset, error) {
	bytes, err := dataPatches193P55101_strict_hostname_checkingPatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.9.3-p551/01_strict_hostname_checking.patch", size: 13196, mode: os.FileMode(420), modTime: time.Unix(1448757621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P001_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xef\x4f\xdb\x30\x10\xfd\xee\xbf\xe2\x54\x26\x91\xcc\x4d\x48\x7f\x8c\xa6\x2a\x48\x54\x8c\xad\xd5\x10\x20\x60\xfb\x6a\x85\xe4\xd2\x5a\xa4\x4e\x64\x3b\x13\xfc\xf7\x3b\x67\x6d\xd5\x8e\xa6\xfb\xe2\xd4\xef\x9e\xdf\xd9\xef\x5e\x33\x99\xe7\x10\x04\x0b\x69\x01\xdf\xec\x99\xc6\x24\x2b\xa4\xc2\x33\xda\xa4\xa5\xca\x43\xfd\xd2\x86\x33\xa9\x32\x7c\x83\xe1\xb8\x1f\xf5\x06\xa3\x30\x8c\x31\xee\xf5\xbf\x0c\xa0\x17\x45\xe7\xc3\x21\x0b\x82\xa0\xf5\x24\xe7\xbc\xb5\x76\x75\x05\x41\x6f\xdc\x3d\x07\x4e\x6b\x2f\x02\xda\x67\x98\xc3\x86\x1a\x2e\x93\xdf\x28\xf2\x5a\xa5\x9e\x5b\x7c\x06\x40\x35\x5b\x6b\x05\xa6\xae\x50\x37\x68\x17\x96\x44\x47\x6d\xa8\x8c\x2a\x63\x8c\x7f\x94\xb0\xef\x15\x7a\x6e\xf1\x19\xff\x47\xc2\xa1\x3b\x12\xdc\x49\x70\x06\x99\xd4\xc2\xdd\x52\x2e\xbc\xd3\xb4\xd6\x06\xcd\xa9\xbf\x8f\xaa\xc3\xb0\x45\xbd\x4a\x93\x8a\x60\xf7\xb8\xf1\xa0\x3b\x04\x3e\x1e\x75\xc7\xee\x6d\x07\xde\xd5\xd1\xb8\x2a\x69\xb3\x94\xc6\x96\xfa\xbd\x43\x6a\x87\x58\x69\x81\x89\xfe\x1f\x49\x17\x42\x63\x26\x4d\x55\x24\xc7\x38\x52\x19\xd4\x56\x58\x9a\x03\xb1\x38\xe3\xb5\x2a\xd0\x98\x43\x96\x39\xfa\xb2\x2c\x5f\x9b\xc3\xa2\xa1\x03\x7c\x22\x7f\x0d\x5c\x5c\x40\x27\xf8\xba\x5f\xbf\xfc\x46\x1f\x2b\x4b\xd5\xd9\xfa\x98\x92\xaa\x45\xb1\x4a\x5e\x31\x97\x85\x53\x5c\x77\x21\xad\xb6\x38\x6e\x2f\x92\xb6\xe1\xeb\x38\x0e\x70\x94\x23\x26\x61\x38\x8c\xfb\x2f\x79\x1c\xb5\xc6\x71\xe7\xe4\x87\x38\xee\xd4\x9a\x38\xc6\xf1\xa0\x3b\xa2\x40\xfe\xfd\x12\x34\x57\xd2\x8a\x0d\xcb\xf3\x99\x4b\x21\x85\xa8\x10\x89\xb5\xb8\xaa\x2c\x66\x34\xfc\x55\x55\xa0\x7b\x79\xe3\x84\xfb\x01\x97\x5b\x43\x8f\x13\x27\x0c\x4e\x64\xee\x72\x4f\xd4\xcc\x9b\x4d\x7f\xdd\x88\xc7\x5b\xf1\xf0\x78\x23\xe6\x77\x0f\x3f\x9f\xc5\xec\xfe\xfe\x87\xcf\x82\x75\xd3\x4a\x23\x4d\xb0\xaa\x6d\x63\x3c\x75\xf1\x36\xa6\xc3\x67\x7f\xdb\x71\x9f\x35\x71\x63\x6b\x39\xbd\x3f\xc1\x63\x1a\x70\x42\x33\x95\x79\x73\x5d\xf7\x17\xdb\xdc\xf4\x7a\xfa\x7c\x3d\x13\x4f\xf3\xef\x77\xd3\xdb\xa7\xad\x39\x69\x62\xd3\xa5\x30\x72\xa1\x92\xc2\x50\xa3\x68\xc2\xfe\x04\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P001_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P001_readlinePatch,
		"data/patches/2.0.0-p0/01_readline.patch",
	)
}

func dataPatches200P001_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P001_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p0/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1448757621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P19501_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xef\x4f\xdb\x30\x10\xfd\xee\xbf\xe2\x54\x26\x91\xcc\x4d\x48\x7f\x8c\xa6\x2a\x48\x54\x8c\xad\xd5\x10\x20\x60\xfb\x6a\x85\xe4\xd2\x5a\xa4\x4e\x64\x3b\x13\xfc\xf7\x3b\x67\x6d\xd5\x8e\xa6\xfb\xe2\xd4\xef\x9e\xdf\xd9\xef\x5e\x33\x99\xe7\x10\x04\x0b\x69\x01\xdf\xec\x99\xc6\x24\x2b\xa4\xc2\x33\xda\xa4\xa5\xca\x43\xfd\xd2\x86\x33\xa9\x32\x7c\x83\xe1\xb8\x1f\xf5\x06\xa3\x30\x8c\x31\xee\xf5\xbf\x0c\xa0\x17\x45\xe7\xc3\x21\x0b\x82\xa0\xf5\x24\xe7\xbc\xb5\x76\x75\x05\x41\x6f\xdc\x3d\x07\x4e\x6b\x2f\x02\xda\x67\x98\xc3\x86\x1a\x2e\x93\xdf\x28\xf2\x5a\xa5\x9e\x5b\x7c\x06\x40\x35\x5b\x6b\x05\xa6\xae\x50\x37\x68\x17\x96\x44\x47\x6d\xa8\x8c\x2a\x63\x8c\x7f\x94\xb0\xef\x15\x7a\x6e\xf1\x19\xff\x47\xc2\xa1\x3b\x12\xdc\x49\x70\x06\x99\xd4\xc2\xdd\x52\x2e\xbc\xd3\xb4\xd6\x06\xcd\xa9\xbf\x8f\xaa\xc3\xb0\x45\xbd\x4a\x93\x8a\x60\xf7\xb8\xf1\xa0\x3b\x04\x3e\x1e\x75\xc7\xee\x6d\x07\xde\xd5\xd1\xb8\x2a\x69\xb3\x94\xc6\x96\xfa\xbd\x43\x6a\x87\x58\x69\x81\x89\xfe\x1f\x49\x17\x42\x63\x26\x4d\x55\x24\xc7\x38\x52\x19\xd4\x56\x58\x9a\x03\xb1\x38\xe3\xb5\x2a\xd0\x98\x43\x96\x39\xfa\xb2\x2c\x5f\x9b\xc3\xa2\xa1\x03\x7c\x22\x7f\x0d\x5c\x5c\x40\x27\xf8\xba\x5f\xbf\xfc\x46\x1f\x2b\x4b\xd5\xd9\xfa\x98\x92\xaa\x45\xb1\x4a\x5e\x31\x97\x85\x53\x5c\x77\x21\xad\xb6\x38\x6e\x2f\x92\xb6\xe1\xeb\x38\x0e\x70\x94\x23\x26\x61\x38\x8c\xfb\x2f\x79\x1c\xb5\xc6\x71\xe7\xe4\x87\x38\xee\xd4\x9a\x38\xc6\xf1\xa0\x3b\xa2\x40\xfe\xfd\x12\x34\x57\xd2\x8a\x0d\xcb\xf3\x99\x4b\x21\x85\xa8\x10\x89\xb5\xb8\xaa\x2c\x66\x34\xfc\x55\x55\xa0\x7b\x79\xe3\x84\xfb\x01\x97\x5b\x43\x8f\x13\x27\x0c\x4e\x64\xee\x72\x4f\xd4\xcc\x9b\x4d\x7f\xdd\x88\xc7\x5b\xf1\xf0\x78\x23\xe6\x77\x0f\x3f\x9f\xc5\xec\xfe\xfe\x87\xcf\x82\x75\xd3\x4a\x23\x4d\xb0\xaa\x6d\x63\x3c\x75\xf1\x36\xa6\xc3\x67\x7f\xdb\x71\x9f\x35\x71\x63\x6b\x39\xbd\x3f\xc1\x63\x1a\x70\x42\x33\x95\x79\x73\x5d\xf7\x17\xdb\xdc\xf4\x7a\xfa\x7c\x3d\x13\x4f\xf3\xef\x77\xd3\xdb\xa7\xad\x39\x69\x62\xd3\xa5\x30\x72\xa1\x92\xc2\x50\xa3\x68\xc2\xfe\x04\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P19501_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P19501_readlinePatch,
		"data/patches/2.0.0-p195/01_readline.patch",
	)
}

func dataPatches200P19501_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P19501_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p195/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1448757621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P24701_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xef\x4f\xdb\x30\x10\xfd\xee\xbf\xe2\x54\x26\x91\xcc\x4d\x48\x7f\x8c\xa6\x2a\x48\x54\x8c\xad\xd5\x10\x20\x60\xfb\x6a\x85\xe4\xd2\x5a\xa4\x4e\x64\x3b\x13\xfc\xf7\x3b\x67\x6d\xd5\x8e\xa6\xfb\xe2\xd4\xef\x9e\xdf\xd9\xef\x5e\x33\x99\xe7\x10\x04\x0b\x69\x01\xdf\xec\x99\xc6\x24\x2b\xa4\xc2\x33\xda\xa4\xa5\xca\x43\xfd\xd2\x86\x33\xa9\x32\x7c\x83\xe1\xb8\x1f\xf5\x06\xa3\x30\x8c\x31\xee\xf5\xbf\x0c\xa0\x17\x45\xe7\xc3\x21\x0b\x82\xa0\xf5\x24\xe7\xbc\xb5\x76\x75\x05\x41\x6f\xdc\x3d\x07\x4e\x6b\x2f\x02\xda\x67\x98\xc3\x86\x1a\x2e\x93\xdf\x28\xf2\x5a\xa5\x9e\x5b\x7c\x06\x40\x35\x5b\x6b\x05\xa6\xae\x50\x37\x68\x17\x96\x44\x47\x6d\xa8\x8c\x2a\x63\x8c\x7f\x94\xb0\xef\x15\x7a\x6e\xf1\x19\xff\x47\xc2\xa1\x3b\x12\xdc\x49\x70\x06\x99\xd4\xc2\xdd\x52\x2e\xbc\xd3\xb4\xd6\x06\xcd\xa9\xbf\x8f\xaa\xc3\xb0\x45\xbd\x4a\x93\x8a\x60\xf7\xb8\xf1\xa0\x3b\x04\x3e\x1e\x75\xc7\xee\x6d\x07\xde\xd5\xd1\xb8\x2a\x69\xb3\x94\xc6\x96\xfa\xbd\x43\x6a\x87\x58\x69\x81\x89\xfe\x1f\x49\x17\x42\x63\x26\x4d\x55\x24\xc7\x38\x52\x19\xd4\x56\x58\x9a\x03\xb1\x38\xe3\xb5\x2a\xd0\x98\x43\x96\x39\xfa\xb2\x2c\x5f\x9b\xc3\xa2\xa1\x03\x7c\x22\x7f\x0d\x5c\x5c\x40\x27\xf8\xba\x5f\xbf\xfc\x46\x1f\x2b\x4b\xd5\xd9\xfa\x98\x92\xaa\x45\xb1\x4a\x5e\x31\x97\x85\x53\x5c\x77\x21\xad\xb6\x38\x6e\x2f\x92\xb6\xe1\xeb\x38\x0e\x70\x94\x23\x26\x61\x38\x8c\xfb\x2f\x79\x1c\xb5\xc6\x71\xe7\xe4\x87\x38\xee\xd4\x9a\x38\xc6\xf1\xa0\x3b\xa2\x40\xfe\xfd\x12\x34\x57\xd2\x8a\x0d\xcb\xf3\x99\x4b\x21\x85\xa8\x10\x89\xb5\xb8\xaa\x2c\x66\x34\xfc\x55\x55\xa0\x7b\x79\xe3\x84\xfb\x01\x97\x5b\x43\x8f\x13\x27\x0c\x4e\x64\xee\x72\x4f\xd4\xcc\x9b\x4d\x7f\xdd\x88\xc7\x5b\xf1\xf0\x78\x23\xe6\x77\x0f\x3f\x9f\xc5\xec\xfe\xfe\x87\xcf\x82\x75\xd3\x4a\x23\x4d\xb0\xaa\x6d\x63\x3c\x75\xf1\x36\xa6\xc3\x67\x7f\xdb\x71\x9f\x35\x71\x63\x6b\x39\xbd\x3f\xc1\x63\x1a\x70\x42\x33\x95\x79\x73\x5d\xf7\x17\xdb\xdc\xf4\x7a\xfa\x7c\x3d\x13\x4f\xf3\xef\x77\xd3\xdb\xa7\xad\x39\x69\x62\xd3\xa5\x30\x72\xa1\x92\xc2\x50\xa3\x68\xc2\xfe\x04\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P24701_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P24701_readlinePatch,
		"data/patches/2.0.0-p247/01_readline.patch",
	)
}

func dataPatches200P24701_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P24701_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p247/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1448757621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P35301_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xef\x4f\xdb\x30\x10\xfd\xee\xbf\xe2\x54\x26\x91\xcc\x4d\x48\x7f\x8c\xa6\x2a\x48\x54\x8c\xad\xd5\x10\x20\x60\xfb\x6a\x85\xe4\xd2\x5a\xa4\x4e\x64\x3b\x13\xfc\xf7\x3b\x67\x6d\xd5\x8e\xa6\xfb\xe2\xd4\xef\x9e\xdf\xd9\xef\x5e\x33\x99\xe7\x10\x04\x0b\x69\x01\xdf\xec\x99\xc6\x24\x2b\xa4\xc2\x33\xda\xa4\xa5\xca\x43\xfd\xd2\x86\x33\xa9\x32\x7c\x83\xe1\xb8\x1f\xf5\x06\xa3\x30\x8c\x31\xee\xf5\xbf\x0c\xa0\x17\x45\xe7\xc3\x21\x0b\x82\xa0\xf5\x24\xe7\xbc\xb5\x76\x75\x05\x41\x6f\xdc\x3d\x07\x4e\x6b\x2f\x02\xda\x67\x98\xc3\x86\x1a\x2e\x93\xdf\x28\xf2\x5a\xa5\x9e\x5b\x7c\x06\x40\x35\x5b\x6b\x05\xa6\xae\x50\x37\x68\x17\x96\x44\x47\x6d\xa8\x8c\x2a\x63\x8c\x7f\x94\xb0\xef\x15\x7a\x6e\xf1\x19\xff\x47\xc2\xa1\x3b\x12\xdc\x49\x70\x06\x99\xd4\xc2\xdd\x52\x2e\xbc\xd3\xb4\xd6\x06\xcd\xa9\xbf\x8f\xaa\xc3\xb0\x45\xbd\x4a\x93\x8a\x60\xf7\xb8\xf1\xa0\x3b\x04\x3e\x1e\x75\xc7\xee\x6d\x07\xde\xd5\xd1\xb8\x2a\x69\xb3\x94\xc6\x96\xfa\xbd\x43\x6a\x87\x58\x69\x81\x89\xfe\x1f\x49\x17\x42\x63\x26\x4d\x55\x24\xc7\x38\x52\x19\xd4\x56\x58\x9a\x03\xb1\x38\xe3\xb5\x2a\xd0\x98\x43\x96\x39\xfa\xb2\x2c\x5f\x9b\xc3\xa2\xa1\x03\x7c\x22\x7f\x0d\x5c\x5c\x40\x27\xf8\xba\x5f\xbf\xfc\x46\x1f\x2b\x4b\xd5\xd9\xfa\x98\x92\xaa\x45\xb1\x4a\x5e\x31\x97\x85\x53\x5c\x77\x21\xad\xb6\x38\x6e\x2f\x92\xb6\xe1\xeb\x38\x0e\x70\x94\x23\x26\x61\x38\x8c\xfb\x2f\x79\x1c\xb5\xc6\x71\xe7\xe4\x87\x38\xee\xd4\x9a\x38\xc6\xf1\xa0\x3b\xa2\x40\xfe\xfd\x12\x34\x57\xd2\x8a\x0d\xcb\xf3\x99\x4b\x21\x85\xa8\x10\x89\xb5\xb8\xaa\x2c\x66\x34\xfc\x55\x55\xa0\x7b\x79\xe3\x84\xfb\x01\x97\x5b\x43\x8f\x13\x27\x0c\x4e\x64\xee\x72\x4f\xd4\xcc\x9b\x4d\x7f\xdd\x88\xc7\x5b\xf1\xf0\x78\x23\xe6\x77\x0f\x3f\x9f\xc5\xec\xfe\xfe\x87\xcf\x82\x75\xd3\x4a\x23\x4d\xb0\xaa\x6d\x63\x3c\x75\xf1\x36\xa6\xc3\x67\x7f\xdb\x71\x9f\x35\x71\x63\x6b\x39\xbd\x3f\xc1\x63\x1a\x70\x42\x33\x95\x79\x73\x5d\xf7\x17\xdb\xdc\xf4\x7a\xfa\x7c\x3d\x13\x4f\xf3\xef\x77\xd3\xdb\xa7\xad\x39\x69\x62\xd3\xa5\x30\x72\xa1\x92\xc2\x50\xa3\x68\xc2\xfe\x04\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P35301_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P35301_readlinePatch,
		"data/patches/2.0.0-p353/01_readline.patch",
	)
}

func dataPatches200P35301_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P35301_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p353/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1448757621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P45101_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xef\x4f\xdb\x30\x10\xfd\xee\xbf\xe2\x54\x26\x91\xcc\x4d\x48\x7f\x8c\xa6\x2a\x48\x54\x8c\xad\xd5\x10\x20\x60\xfb\x6a\x85\xe4\xd2\x5a\xa4\x4e\x64\x3b\x13\xfc\xf7\x3b\x67\x6d\xd5\x8e\xa6\xfb\xe2\xd4\xef\x9e\xdf\xd9\xef\x5e\x33\x99\xe7\x10\x04\x0b\x69\x01\xdf\xec\x99\xc6\x24\x2b\xa4\xc2\x33\xda\xa4\xa5\xca\x43\xfd\xd2\x86\x33\xa9\x32\x7c\x83\xe1\xb8\x1f\xf5\x06\xa3\x30\x8c\x31\xee\xf5\xbf\x0c\xa0\x17\x45\xe7\xc3\x21\x0b\x82\xa0\xf5\x24\xe7\xbc\xb5\x76\x75\x05\x41\x6f\xdc\x3d\x07\x4e\x6b\x2f\x02\xda\x67\x98\xc3\x86\x1a\x2e\x93\xdf\x28\xf2\x5a\xa5\x9e\x5b\x7c\x06\x40\x35\x5b\x6b\x05\xa6\xae\x50\x37\x68\x17\x96\x44\x47\x6d\xa8\x8c\x2a\x63\x8c\x7f\x94\xb0\xef\x15\x7a\x6e\xf1\x19\xff\x47\xc2\xa1\x3b\x12\xdc\x49\x70\x06\x99\xd4\xc2\xdd\x52\x2e\xbc\xd3\xb4\xd6\x06\xcd\xa9\xbf\x8f\xaa\xc3\xb0\x45\xbd\x4a\x93\x8a\x60\xf7\xb8\xf1\xa0\x3b\x04\x3e\x1e\x75\xc7\xee\x6d\x07\xde\xd5\xd1\xb8\x2a\x69\xb3\x94\xc6\x96\xfa\xbd\x43\x6a\x87\x58\x69\x81\x89\xfe\x1f\x49\x17\x42\x63\x26\x4d\x55\x24\xc7\x38\x52\x19\xd4\x56\x58\x9a\x03\xb1\x38\xe3\xb5\x2a\xd0\x98\x43\x96\x39\xfa\xb2\x2c\x5f\x9b\xc3\xa2\xa1\x03\x7c\x22\x7f\x0d\x5c\x5c\x40\x27\xf8\xba\x5f\xbf\xfc\x46\x1f\x2b\x4b\xd5\xd9\xfa\x98\x92\xaa\x45\xb1\x4a\x5e\x31\x97\x85\x53\x5c\x77\x21\xad\xb6\x38\x6e\x2f\x92\xb6\xe1\xeb\x38\x0e\x70\x94\x23\x26\x61\x38\x8c\xfb\x2f\x79\x1c\xb5\xc6\x71\xe7\xe4\x87\x38\xee\xd4\x9a\x38\xc6\xf1\xa0\x3b\xa2\x40\xfe\xfd\x12\x34\x57\xd2\x8a\x0d\xcb\xf3\x99\x4b\x21\x85\xa8\x10\x89\xb5\xb8\xaa\x2c\x66\x34\xfc\x55\x55\xa0\x7b\x79\xe3\x84\xfb\x01\x97\x5b\x43\x8f\x13\x27\x0c\x4e\x64\xee\x72\x4f\xd4\xcc\x9b\x4d\x7f\xdd\x88\xc7\x5b\xf1\xf0\x78\x23\xe6\x77\x0f\x3f\x9f\xc5\xec\xfe\xfe\x87\xcf\x82\x75\xd3\x4a\x23\x4d\xb0\xaa\x6d\x63\x3c\x75\xf1\x36\xa6\xc3\x67\x7f\xdb\x71\x9f\x35\x71\x63\x6b\x39\xbd\x3f\xc1\x63\x1a\x70\x42\x33\x95\x79\x73\x5d\xf7\x17\xdb\xdc\xf4\x7a\xfa\x7c\x3d\x13\x4f\xf3\xef\x77\xd3\xdb\xa7\xad\x39\x69\x62\xd3\xa5\x30\x72\xa1\x92\xc2\x50\xa3\x68\xc2\xfe\x04\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P45101_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P45101_readlinePatch,
		"data/patches/2.0.0-p451/01_readline.patch",
	)
}

func dataPatches200P45101_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P45101_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p451/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1448757621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches21001_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xeb\x4f\xdb\x3e\x14\xfd\xfc\xf3\x5f\x71\x15\x7e\x52\x93\xe5\xb1\x3e\xc2\xa3\x03\xa4\x32\x1e\x2b\x1a\x02\x44\xd9\xbe\x5a\x26\xb9\xa5\x16\xa9\x13\xd9\x4e\x07\xff\xfd\xec\xd0\x84\x05\xb5\x15\x6c\x9a\xb4\x7c\x48\x5d\xe7\xdc\x73\x4f\xce\x3d\xce\xb9\x48\xf1\xf1\x13\xe0\xa3\xfe\x28\x91\xa5\x19\x17\xd8\x2c\xa2\x84\x1c\xfe\xf9\x45\xc2\x30\x5c\xc7\xff\x9f\x2b\x71\xc1\x15\xcf\x05\xc4\xdb\xfd\x7e\xec\x11\xdf\xf7\xdf\x08\xde\xf6\xc8\x68\x04\x61\x6f\xb8\x1b\x07\xbb\xe0\x2f\x7f\x47\x23\x02\x04\xec\x25\x33\xca\xb4\xc6\x79\xa1\x31\xa5\x49\x3e\x2f\x32\xd4\xa6\x96\x4e\x4b\x91\xd8\x05\x1c\x42\xcd\xbd\x19\xb8\x4f\x60\x8b\x4f\x21\xc5\xa9\x81\xa6\xee\xf8\xe8\xfb\x29\xbd\xb9\xa0\xd7\x37\xa7\xf4\xfc\xf2\xfa\xdb\x2d\x1d\x5f\x5d\x7d\xf5\x48\xb8\x6c\x5a\x48\xa4\x5c\x14\xa5\xa6\xb3\x3c\x7f\x30\x5d\xdc\xb3\xba\xe3\x07\xaf\xe9\xd8\x46\xed\x13\x7f\x6d\xb5\xd9\xb4\xcb\x4a\x0e\xd5\x9b\x38\x60\x0b\x45\xca\xa7\x95\x5c\xa3\x16\x6a\xa5\xc7\x47\xb7\xc7\x63\x3a\x39\xff\x72\x79\x74\x31\x69\xcc\x49\x98\x4e\x66\x54\xf1\x7b\xc1\x32\x65\x1a\x75\xf7\xc9\xaa\x30\x98\x3f\x49\x2e\xa6\x91\xbc\xfb\x3b\x61\x78\xe1\x6f\xcf\x77\x30\x5c\x11\x86\x75\xe0\xb8\x5b\x87\x21\xd8\xb1\x51\x08\x7a\xdd\x2a\x09\xe6\x45\x51\x97\x52\x80\x2a\x0b\x94\xae\xb5\x30\x80\x99\x61\x43\xa9\x3c\x02\xc6\x2e\x93\x16\xdf\x7a\xd5\xc4\x6c\xc6\x16\x48\xf5\x53\x81\xae\xbd\x79\x76\x30\x2d\x0e\xbb\xfb\x0b\x87\x6f\x39\x7c\x02\x29\x97\xd4\x4a\xe3\xf7\x6e\x27\x29\xa5\x42\xd5\xf1\xda\xbb\x62\xf5\xb6\x46\x39\x4f\x58\xd1\x79\x7e\x81\x61\x1c\xc4\xe0\x0f\xf7\x82\xbd\x4a\x7f\x5b\x95\x95\xef\x3a\x66\x74\x12\x53\xae\x8a\x8c\x3d\x39\xde\x5a\x0c\x17\x0a\xa5\xa6\xda\x58\xb6\x01\x95\xa2\x09\x3b\xd6\x28\xbf\x14\x19\x2a\xb5\xca\x0c\xa7\x1d\x43\xa7\x32\xe6\xff\x93\xd3\xb3\x09\x1c\x1c\x80\x13\x9e\xb4\x9f\x1f\xd6\x99\x77\x1a\x87\x12\xc3\x6a\x5a\xcd\xd9\x83\x39\x48\x99\x65\x5c\x76\x31\x5c\xff\x52\xf0\xe2\xfe\x7b\x82\x37\x58\xce\xad\x0a\x9e\xb9\x0f\x37\xcd\xed\x77\x66\x02\xef\x9c\xc9\x16\xbc\xfa\x60\x70\x05\x6c\xc1\x78\xc6\xee\x32\x04\xc5\x45\x82\x0d\x57\x18\x47\x7d\x70\xfb\xdd\x6e\xcf\x8b\x9e\x6b\x9b\x4f\x15\xb7\x1d\xe7\xf9\x02\x53\x60\xfa\xa5\x60\x27\x1a\xd8\x82\x5e\x5c\x17\x8c\xf3\x1f\xb8\x40\x19\x80\x89\xa4\xb6\x10\x70\x2f\x51\x7f\x9e\x9c\xc0\x4e\xd4\x8b\x06\x01\x54\x60\x48\x73\x54\xa2\xa3\xc1\x8a\x7f\x25\x30\xb2\xc7\xf4\x4d\x49\xb2\xe7\xf5\x67\x00\x00\x00\xff\xff\xdd\x85\xa5\xd3\xb0\x06\x00\x00")

func dataPatches21001_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches21001_readlinePatch,
		"data/patches/2.1.0/01_readline.patch",
	)
}

func dataPatches21001_readlinePatch() (*asset, error) {
	bytes, err := dataPatches21001_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.1.0/01_readline.patch", size: 1712, mode: os.FileMode(420), modTime: time.Unix(1448757621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches21101_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xeb\x4f\xdb\x3e\x14\xfd\xfc\xf3\x5f\x71\x15\x7e\x52\x93\xe5\xb1\x3e\xc2\xa3\x03\xa4\x32\x1e\x2b\x1a\x02\x44\xd9\xbe\x5a\x26\xb9\xa5\x16\xa9\x13\xd9\x4e\x07\xff\xfd\xec\xd0\x84\x05\xb5\x15\x6c\x9a\xb4\x7c\x48\x5d\xe7\xdc\x73\x4f\xce\x3d\xce\xb9\x48\xf1\xf1\x13\xe0\xa3\xfe\x28\x91\xa5\x19\x17\xd8\x2c\xa2\x84\x1c\xfe\xf9\x45\xc2\x30\x5c\xc7\xff\x9f\x2b\x71\xc1\x15\xcf\x05\xc4\xdb\xfd\x7e\xec\x11\xdf\xf7\xdf\x08\xde\xf6\xc8\x68\x04\x61\x6f\xb8\x1b\x07\xbb\xe0\x2f\x7f\x47\x23\x02\x04\xec\x25\x33\xca\xb4\xc6\x79\xa1\x31\xa5\x49\x3e\x2f\x32\xd4\xa6\x96\x4e\x4b\x91\xd8\x05\x1c\x42\xcd\xbd\x19\xb8\x4f\x60\x8b\x4f\x21\xc5\xa9\x81\xa6\xee\xf8\xe8\xfb\x29\xbd\xb9\xa0\xd7\x37\xa7\xf4\xfc\xf2\xfa\xdb\x2d\x1d\x5f\x5d\x7d\xf5\x48\xb8\x6c\x5a\x48\xa4\x5c\x14\xa5\xa6\xb3\x3c\x7f\x30\x5d\xdc\xb3\xba\xe3\x07\xaf\xe9\xd8\x46\xed\x13\x7f\x6d\xb5\xd9\xb4\xcb\x4a\x0e\xd5\x9b\x38\x60\x0b\x45\xca\xa7\x95\x5c\xa3\x16\x6a\xa5\xc7\x47\xb7\xc7\x63\x3a\x39\xff\x72\x79\x74\x31\x69\xcc\x49\x98\x4e\x66\x54\xf1\x7b\xc1\x32\x65\x1a\x75\xf7\xc9\xaa\x30\x98\x3f\x49\x2e\xa6\x91\xbc\xfb\x3b\x61\x78\xe1\x6f\xcf\x77\x30\x5c\x11\x86\x75\xe0\xb8\x5b\x87\x21\xd8\xb1\x51\x08\x7a\xdd\x2a\x09\xe6\x45\x51\x97\x52\x80\x2a\x0b\x94\xae\xb5\x30\x80\x99\x61\x43\xa9\x3c\x02\xc6\x2e\x93\x16\xdf\x7a\xd5\xc4\x6c\xc6\x16\x48\xf5\x53\x81\xae\xbd\x79\x76\x30\x2d\x0e\xbb\xfb\x0b\x87\x6f\x39\x7c\x02\x29\x97\xd4\x4a\xe3\xf7\x6e\x27\x29\xa5\x42\xd5\xf1\xda\xbb\x62\xf5\xb6\x46\x39\x4f\x58\xd1\x79\x7e\x81\x61\x1c\xc4\xe0\x0f\xf7\x82\xbd\x4a\x7f\x5b\x95\x95\xef\x3a\x66\x74\x12\x53\xae\x8a\x8c\x3d\x39\xde\x5a\x0c\x17\x0a\xa5\xa6\xda\x58\xb6\x01\x95\xa2\x09\x3b\xd6\x28\xbf\x14\x19\x2a\xb5\xca\x0c\xa7\x1d\x43\xa7\x32\xe6\xff\x93\xd3\xb3\x09\x1c\x1c\x80\x13\x9e\xb4\x9f\x1f\xd6\x99\x77\x1a\x87\x12\xc3\x6a\x5a\xcd\xd9\x83\x39\x48\x99\x65\x5c\x76\x31\x5c\xff\x52\xf0\xe2\xfe\x7b\x82\x37\x58\xce\xad\x0a\x9e\xb9\x0f\x37\xcd\xed\x77\x66\x02\xef\x9c\xc9\x16\xbc\xfa\x60\x70\x05\x6c\xc1\x78\xc6\xee\x32\x04\xc5\x45\x82\x0d\x57\x18\x47\x7d\x70\xfb\xdd\x6e\xcf\x8b\x9e\x6b\x9b\x4f\x15\xb7\x1d\xe7\xf9\x02\x53\x60\xfa\xa5\x60\x27\x1a\xd8\x82\x5e\x5c\x17\x8c\xf3\x1f\xb8\x40\x19\x80\x89\xa4\xb6\x10\x70\x2f\x51\x7f\x9e\x9c\xc0\x4e\xd4\x8b\x06\x01\x54\x60\x48\x73\x54\xa2\xa3\xc1\x8a\x7f\x25\x30\xb2\xc7\xf4\x4d\x49\xb2\xe7\xf5\x67\x00\x00\x00\xff\xff\xdd\x85\xa5\xd3\xb0\x06\x00\x00")

func dataPatches21101_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches21101_readlinePatch,
		"data/patches/2.1.1/01_readline.patch",
	)
}

func dataPatches21101_readlinePatch() (*asset, error) {
	bytes, err := dataPatches21101_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.1.1/01_readline.patch", size: 1712, mode: os.FileMode(420), modTime: time.Unix(1448757621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/Dockerfile-centos.template": dataDockerfileCentosTemplate,
	"data/Dockerfile-lucid.template": dataDockerfileLucidTemplate,
	"data/Dockerfile.template": dataDockerfileTemplate,
	"data/patches/1.0.0/01_for_tests": dataPatches10001_for_tests,
	"data/patches/1.0.0/02_for_tests": dataPatches10002_for_tests,
	"data/patches/1.9.3-p551/01_strict_hostname_checking.patch": dataPatches193P55101_strict_hostname_checkingPatch,
	"data/patches/2.0.0-p0/01_readline.patch": dataPatches200P001_readlinePatch,
	"data/patches/2.0.0-p195/01_readline.patch": dataPatches200P19501_readlinePatch,
	"data/patches/2.0.0-p247/01_readline.patch": dataPatches200P24701_readlinePatch,
	"data/patches/2.0.0-p353/01_readline.patch": dataPatches200P35301_readlinePatch,
	"data/patches/2.0.0-p451/01_readline.patch": dataPatches200P45101_readlinePatch,
	"data/patches/2.1.0/01_readline.patch": dataPatches21001_readlinePatch,
	"data/patches/2.1.1/01_readline.patch": dataPatches21101_readlinePatch,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"Dockerfile-centos.template": &bintree{dataDockerfileCentosTemplate, map[string]*bintree{}},
		"Dockerfile-lucid.template": &bintree{dataDockerfileLucidTemplate, map[string]*bintree{}},
		"Dockerfile.template": &bintree{dataDockerfileTemplate, map[string]*bintree{}},
		"patches": &bintree{nil, map[string]*bintree{
			"1.0.0": &bintree{nil, map[string]*bintree{
				"01_for_tests": &bintree{dataPatches10001_for_tests, map[string]*bintree{}},
				"02_for_tests": &bintree{dataPatches10002_for_tests, map[string]*bintree{}},
			}},
			"1.9.3-p551": &bintree{nil, map[string]*bintree{
				"01_strict_hostname_checking.patch": &bintree{dataPatches193P55101_strict_hostname_checkingPatch, map[string]*bintree{}},
			}},
			"2.0.0-p0": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P001_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p195": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P19501_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p247": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P24701_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p353": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P35301_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p451": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P45101_readlinePatch, map[string]*bintree{}},
			}},
			"2.1.0": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches21001_readlinePatch, map[string]*bintree{}},
			}},
			"2.1.1": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches21101_readlinePatch, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

