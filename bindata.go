// Code generated by go-bindata.
// sources:
// data/Dockerfile-centos.template
// data/Dockerfile-lucid.template
// data/Dockerfile.template
// data/patches/1.0.0/01_for_tests
// data/patches/1.0.0/02_for_tests
// data/patches/2.1.0/01_readline.patch
// data/patches/2.1.1/01_readline.patch
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDockerfileCentosTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\xb2\x87\x3d\x6c\x18\x61\xd1\x62\x11\x07\xf0\x61\x91\x34\x45\xd0\x36\x59\x38\x4d\x7d\xe8\xf6\x40\x89\x23\x9b\x35\x3f\x04\x92\x8a\xe3\x6c\xf3\xdf\xfb\x44\x49\x8e\xbc\x1f\x06\x2c\x72\xde\x0c\x87\xc3\x99\x37\x73\xbd\xbc\xfb\x83\xbe\x7c\x39\xbb\xd2\x31\x05\xff\xf2\x32\x5b\x3e\xdc\xd2\xbe\xb5\xd4\x36\x4a\x26\x26\xb1\x3f\x20\xda\xc5\x24\x8d\x01\x44\xeb\xaa\xea\xfe\xa2\x7a\xf7\x8e\xac\xdc\x32\xc9\x36\xf9\xbc\xd9\x72\x70\x6c\x84\xe2\x47\x36\x14\x1a\x2b\xca\x56\x1b\x45\x9f\x67\x84\xdf\xda\xe8\xb2\x1a\x74\xd8\xd6\xb5\x1e\x84\xb5\x2a\xed\xb0\x75\x55\x1b\x22\xc7\x41\xea\xcf\x05\x96\xca\x68\xc7\x03\xe8\x1b\x76\x31\x9a\x57\x47\x7b\x69\x47\xe9\x19\xe2\xf1\xd9\xb6\xdc\xe7\xcf\x18\x13\xb6\x6b\xb6\x91\x70\x8f\xa1\x24\x43\x7e\xdf\xdf\x27\x45\x1b\x43\x51\x6a\x57\x40\x79\x72\x4a\x27\xc3\x6b\xbb\x6d\xdd\x64\x44\x08\xa8\x95\x0e\x8b\xd1\xb4\x07\x9d\x17\x41\xf9\xea\x55\xd0\x27\xff\x64\x9f\xf9\x82\x2e\xb5\x7e\xe7\x8c\x97\xea\x21\x98\x97\x97\xff\x70\x23\xf9\xa7\xe7\x4b\x2a\x92\x6d\x66\xab\xbb\xe5\x6f\x57\x37\xcb\x2c\x14\x39\x4a\x1c\x58\x62\xfd\x8b\x43\xd4\xde\x0d\x05\xb9\xbc\xfe\xfd\xe3\xaf\xf7\x8b\xb7\xc2\xca\x50\x6d\x16\x4f\xe7\x1f\xc4\x87\x9f\x49\xdc\xfd\x44\xa2\xc6\x95\xb5\x8c\x09\xaa\xb4\x21\xb1\x06\xb4\x46\x3a\x49\xac\x72\xad\x56\xfc\x94\x82\xc4\x0a\xb3\xd6\xb5\x91\x95\x68\x64\x90\x96\x13\x87\x1e\x85\xc8\x2e\x6d\x18\x49\xef\x01\xe3\xdd\x3a\x7f\x7a\xd1\xea\x18\x35\x90\x5a\xb3\x51\x42\x3b\x9d\xb4\x34\xfa\x19\xf1\x41\x3f\xb8\x7c\x94\x41\xcb\xd2\x80\x2e\xab\xc6\x6b\x07\xdf\x02\x48\x17\xcf\x6a\x87\x95\x05\xc8\x05\x1f\xdd\x09\xc5\x95\x41\x00\x09\x8f\x13\xb2\xee\x2c\x91\xe7\xc4\x16\x31\x40\xab\x6d\x63\x74\xa5\x93\xa8\x5b\x57\x65\x9b\x89\x7d\x3e\xdd\x04\xae\x60\xaf\xa6\x8a\x38\xbe\xa4\xda\x42\x51\xea\xd4\xc7\x5a\x79\xdb\x48\x78\x8d\x49\x2d\x74\xf4\xf3\xf3\xf9\xfc\xe2\xfd\x7c\x3e\x27\x64\xed\xd3\xcd\xe5\x5b\x3a\x2b\x2a\xef\x6a\xbd\x6e\x03\x67\xb6\x08\x01\xef\xb5\x7e\x5a\x14\xbe\x49\xb9\x1c\x5f\x57\x63\x30\x63\xd7\xbd\x56\xc4\x0d\x72\xa7\x06\x4c\xe9\x98\xc1\x81\x38\x02\x9c\x38\xb6\xee\x38\x20\x02\x1b\x84\xfc\xc8\xb3\x37\x74\xcf\x1d\x0d\x93\x27\xef\xcc\x9e\x64\x5d\x73\x95\x28\x7a\xcb\xf4\xfe\x6c\x4e\x91\x83\x46\x45\x70\x3b\x96\x53\x2a\xdb\x44\x28\x12\xe1\x4d\x60\x1e\x2e\xcd\xdd\x16\x13\x37\x17\xb3\x37\x70\xd6\xfd\x3a\xa6\x64\x58\xfc\x7b\x7e\xe8\xd6\xab\x5f\xee\xff\x04\xc3\x16\x99\x61\x60\x72\xb6\x4e\x1b\xe4\x25\x48\xc7\xd9\x67\x3e\x83\x8d\xeb\x77\xc3\xc9\x53\xda\xc9\x48\x65\xf0\x5b\x76\x67\x74\x8f\xba\xa4\x84\x1a\x92\x4e\x98\x0d\x30\x4a\xbe\x73\xb4\xf3\x88\xb4\x63\x54\xca\xb1\x59\xe9\x54\xa4\x9d\x0f\xdb\x48\x35\xe2\xbc\x98\x4d\x82\x42\x32\x6f\x5b\x7b\xf9\xe9\x61\x60\xf5\xf4\xb6\x6f\xe3\x7c\xed\x8d\x6c\x0c\x68\xe8\x68\x11\x09\x5d\x38\x0a\xa9\x9b\x32\xa3\xe0\xe8\xbb\x3d\x34\xaa\x65\xd7\x8e\x1f\xd1\x41\xaf\xd0\x23\xfd\xc0\x18\xf0\x0d\xd8\x99\xf9\x85\x78\xb3\xb1\x3a\x9a\x60\x9f\x47\xf0\x68\x94\x1d\xd0\xc9\x4c\x3b\x60\xdf\x1b\x6e\x80\xbf\x9a\x6f\x07\xfc\x78\xd0\x4d\xef\x9b\x4c\xbc\x03\xfc\xcd\xe8\x13\xfd\x90\x29\x26\xa9\x6b\xa8\xc0\xc3\xae\xb5\xe1\x5b\xcc\x80\xc3\x63\x41\xf7\xd9\xff\x01\x00\x00\xff\xff\xe2\x94\xb3\x2e\x0a\x06\x00\x00")

func dataDockerfileCentosTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileCentosTemplate,
		"data/Dockerfile-centos.template",
	)
}

func dataDockerfileCentosTemplate() (*asset, error) {
	bytes, err := dataDockerfileCentosTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-centos.template", size: 1546, mode: os.FileMode(420), modTime: time.Unix(1448756444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerfileLucidTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x41\x6f\xdc\x36\x13\xbd\xef\xaf\x18\x24\x40\x72\x09\x25\x38\x5f\x3e\xc3\x6b\x60\x03\x04\x76\x5d\x18\x6d\xed\xc0\xae\xeb\x4b\x2e\x94\x38\xd2\xb2\xa6\x48\x81\xa4\x6c\xaf\x53\xff\xf7\x3e\x52\xab\x5d\xd9\x49\xf7\xb0\x1a\x3e\xce\x0c\x1f\x39\x6f\xe6\xec\xea\xf2\x0f\xfa\xfe\xbd\x38\xd5\x21\x7a\xf7\xfc\xbc\xb8\xba\xb9\x20\xae\xd7\x8e\xde\x28\xae\x68\x1d\x63\x7f\x5c\x96\x81\xeb\xc1\xeb\xb8\x29\x86\x6a\xb0\x71\x28\x6a\xd7\x95\xa3\x49\x66\xa8\xb5\x12\x93\x03\x75\x52\xdb\x37\xf4\xf9\x33\x95\x1c\xeb\x52\xf6\xb1\x0c\x6e\xf0\x35\x87\xc2\xe0\x84\x9c\x1d\xa0\x68\x39\xd2\xd0\x2b\x19\xf9\x05\xa4\x6d\x88\xd2\x18\x12\x1b\xf2\x43\xb5\x39\x28\x96\xc5\x81\x68\x06\x20\xd5\xa0\x8d\x12\x1c\x02\xdb\xa8\xa5\xa1\x6f\x0b\xc2\xcf\xe8\xaa\x3e\x14\x8a\xef\x93\xd5\x34\x7a\x32\x5b\x55\x75\x93\x6d\xc1\x2c\x70\xf8\x7f\x5e\xef\xc2\x3c\x4b\x65\xb4\xe5\xc9\x2b\x04\x33\x99\x1b\xd9\x8d\xf6\x13\x16\x07\xed\xcb\x38\xd7\xb3\x4d\xbe\x3b\x7a\x33\xa2\xc9\x11\x87\x99\x7c\xa5\x64\x4c\xcf\xd7\x7b\xa7\x86\x3a\x6a\x67\x8b\xba\x29\x52\x40\xcb\x5d\x28\x9c\x6f\xcb\x69\xb1\x33\xc4\xc7\xe2\x53\xf1\xb1\x88\xed\x13\xfd\x13\xa5\x27\xf7\xf8\x74\x42\x65\xec\xfa\x31\xab\xca\xf6\x2b\x6f\x7a\xf7\x6e\x4f\x83\x02\xc7\xa1\x2f\x7c\x95\x03\xe0\x34\xa2\xd3\xd3\x36\x7d\x47\x42\x54\xda\x2a\xed\x57\xe5\x10\x7c\x09\x1b\x88\x75\xc2\x2b\x57\x6f\x2d\xbd\xbf\x43\x12\x87\x7b\xb0\xc6\x49\x75\xe3\xcd\xf3\xf3\x2b\x56\xb7\x97\x57\xbf\x9d\x9e\x5f\xed\x69\x09\x04\x5c\xe1\xfb\x17\xfb\x80\x1b\x6f\x25\x75\x72\xf6\xfb\x97\x5f\xaf\x57\xef\x45\x27\x7d\xbd\x5e\x3d\x1e\x1d\x8a\xc3\x4f\x24\x2e\xff\x47\xa2\xc1\x81\x8d\x0c\x11\x5b\x71\x4d\xa2\x05\xd4\xa2\x80\x24\x6e\xb3\x14\x6e\xf9\x31\x7a\x89\x2f\xdc\x06\x3b\x04\x56\xa2\x97\x5e\x76\x1c\xd9\x8f\x28\x96\x50\xc5\x9a\x51\xe5\x11\x30\xce\xb6\xf9\x6f\x5c\x76\x3a\x04\x0d\xa4\xd1\x0c\x0d\x69\xab\x93\x82\xf4\x13\xf8\x61\x7f\x9b\xf2\x5e\x7a\x2d\x2b\xc3\x40\x7a\xa7\x2d\x72\x0b\x20\x89\xcf\xed\x03\xbe\x2c\xd0\x1e\xc8\x91\x22\x14\xd7\x06\x04\x52\x39\x85\x6c\x92\x27\x5e\x36\x72\x07\x0e\xd8\xd5\x5d\x6f\x74\xad\x23\x64\x6b\x73\xc9\xc5\xcc\x3f\x47\xf7\x9e\x6b\xf8\xab\xf9\x46\x98\x6e\x52\xdf\x61\xa3\xd2\x71\xe4\x8a\x3e\xeb\x25\xb2\x86\xa8\x56\x3a\xb8\xe5\xd1\x72\x79\x7c\xb0\x5c\x2e\x09\xaf\xf6\xf5\xfc\xe4\x3d\x15\x65\xed\x6c\xa3\xdb\xc1\x73\xd6\xa8\x10\xc8\xde\xe8\xc7\x55\xe9\xd0\x7a\xa9\x1c\xaf\xab\xb1\x75\x63\x9b\x6e\x2b\xc2\x1a\x6f\xa7\xb6\x98\xd2\x21\x83\x5b\xa9\x88\x24\x87\x17\xde\x49\x03\xc2\xb3\x01\xe5\x7b\x5e\xbc\xa5\x6b\x86\x04\x29\x3a\x72\xd6\x6c\x48\x36\x0d\xd7\x91\x82\xeb\x98\xa0\x39\xe8\xd0\x6b\x54\x04\xa7\xe3\xf3\x01\x1d\x1c\x09\x45\x22\xdc\x09\x8a\xc3\xa1\x9d\xbc\x63\x0a\x91\xfb\xe3\xc5\x5b\x24\x4b\xbf\xa4\x94\x0c\x8b\xbf\x8f\x76\x8a\x3d\xfd\xe5\xfa\x4f\x28\x6c\x95\x15\x06\xf9\x66\xef\xb8\xc6\xbb\x78\x69\x39\xe7\xcc\x31\x30\xec\x68\x6d\x23\x3f\xd0\x83\x0c\x54\x79\x77\xc7\xb6\xa0\x6b\xd4\x25\x46\xd4\x90\x74\x9a\x3d\x70\x8a\x2e\x25\x7a\x70\x60\x9a\x14\x15\x33\xb7\x4e\x5a\x15\xe8\xc1\xf9\xbb\x40\x0d\x78\x1e\x2f\x66\xa4\xf0\x98\x17\x43\x77\xf2\xf5\x66\xab\xea\xf9\x69\x3f\xf2\xdc\xf7\x46\x76\x4e\x9d\x37\xce\x11\x11\x08\xdd\x37\x2d\x22\xa5\x49\xbb\x5d\x58\xfa\x69\x0f\x4d\xdb\x32\xb5\xe3\x17\x74\xd0\x1e\xba\xa7\xff\x70\x06\x7c\x0e\x75\x66\x7d\x81\x6f\x76\x56\xb3\x91\xf9\x6d\x06\x4d\xb3\x73\x8e\xed\x86\xe8\x1c\xfc\xc9\x34\x1d\x37\x5e\x0c\xd4\xf9\xc6\x34\x59\xe7\xd8\x6e\xc4\xee\xc0\x1f\x66\xad\x18\xe7\x4b\x39\x7b\xb5\x9e\x4a\xdc\xe9\x4c\x1b\xbe\x40\xfb\xef\xee\x09\xa5\x2f\xfe\x0d\x00\x00\xff\xff\xdf\x9a\xa4\x89\xc7\x06\x00\x00")

func dataDockerfileLucidTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileLucidTemplate,
		"data/Dockerfile-lucid.template",
	)
}

func dataDockerfileLucidTemplate() (*asset, error) {
	bytes, err := dataDockerfileLucidTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-lucid.template", size: 1735, mode: os.FileMode(420), modTime: time.Unix(1448756444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerfileTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x5d\x4f\xe4\x36\x14\x7d\x9f\x5f\x71\xc5\x56\x5a\xa9\xc2\x93\xa2\x6d\x11\x43\x3b\x0f\x2b\x28\x15\x6a\x0b\xab\xa1\x94\x87\x6e\xa5\x75\xe2\x9b\x19\x17\xc7\x8e\x6c\x87\x01\xb6\xfc\xf7\x1e\x3b\xc9\x10\xba\xec\x3c\x4c\xae\xcf\xfd\xf0\xf1\xfd\x3a\x5b\x5d\xfe\x4e\x9f\x3f\xcf\x4f\x75\x88\xde\x3d\x3d\xcd\x56\xd7\x17\x24\xdb\x28\xd6\x1c\xa9\x6b\x95\x8c\xfc\x02\xd2\x36\x44\x69\x0c\x89\x07\xf2\x5d\xf9\x70\x30\x5f\xcc\xdf\x51\xd9\x69\xa3\x04\x87\xc0\x36\x6a\x69\xe8\xe3\x8c\xf0\x33\xba\xac\x0e\x85\xe2\xbb\x24\xd5\xb5\x1e\xc5\xb5\x2a\x9b\x51\xb6\x55\xe7\x03\x87\x1f\xf2\x79\xe7\xe6\x59\x2a\xa3\x2d\x8f\x56\x21\x98\x51\x7c\x90\x4d\x2f\x3f\xe2\x70\xb0\x9e\xf8\x21\x92\xc9\x54\xff\xda\x2b\xba\xe0\x8b\x52\xdb\x62\xcd\xcd\xde\x3e\xed\x0d\xa4\x93\x58\xb7\x19\x11\x02\x6a\xa5\xfd\x72\x34\xed\x41\xeb\x84\x57\xae\x7a\x3e\xe8\xbd\xbf\x73\xcc\x14\x3c\xa7\xc9\x6d\xad\x71\x52\x5d\x7b\xf3\xf4\xf4\x6f\x94\x9e\xdc\xfd\xe3\x09\x15\xb1\x69\x67\x37\x97\xab\x5f\x4f\xcf\x57\xf9\x50\xa4\xe4\x08\x38\xac\xf0\xfd\x93\x7d\xd0\xce\x0e\xc9\x35\x81\x84\xa1\x22\xcb\xb5\xf3\xa4\x91\x53\xfa\x94\xe9\x42\x55\x7c\x3b\x6f\x65\xac\x36\x9f\x7e\x24\xe5\x28\x8b\x24\xda\xef\xe8\x27\xfa\x46\x27\xc8\xf6\xe5\x38\x39\xfb\xed\xfd\x2f\x57\xcb\xb7\xa2\x91\xbe\xda\x2c\xef\x8f\x0e\xc5\xe1\xf7\x24\x2e\xdf\x91\xa8\xc1\xbb\x96\x21\x42\x15\xe1\xbb\x06\xb4\x46\xca\x49\xdc\xe4\xba\xdd\xf0\x7d\xf4\x12\x5f\x98\x75\xb6\x0b\xac\x44\x2b\xbd\x6c\x38\xb2\xef\x51\x1c\x51\xc7\x0d\xa3\x2e\x3d\x60\x9c\x5d\xe7\xbf\xfe\xd8\xe8\x10\x34\x90\x5a\x33\xaa\xae\xad\x4e\x35\xd7\x8f\x78\x24\xf4\x43\xc8\x3b\xe9\xb5\x2c\x0d\x03\x69\x9d\xb6\x88\x2d\x80\x24\x3e\x37\x5b\x7c\x59\xa0\xdb\x10\x23\x79\x28\xae\x0c\x08\x44\x64\x48\xc8\x3a\x59\xa2\x58\x91\x1b\x70\x80\x56\x37\xad\xd1\x95\x8e\xa2\xee\x6c\x95\x6d\x26\xf6\xd9\xbb\xf5\x5c\xc1\x5e\x4d\x15\x61\x7c\x49\x75\x0b\x45\xa9\x63\xcf\xb5\x72\x0d\x32\x4a\xb8\x40\x2d\x75\x70\x8b\xa3\xc5\xe2\xf8\x60\xb1\x58\x10\xb2\xf6\xe1\xfc\xe4\x2d\xcd\x8b\xca\xd9\x5a\xaf\x3b\xcf\xb9\xab\x84\x40\xf4\x5a\xdf\x2f\x0b\xd7\xc6\x5c\xd3\xff\x97\x74\x30\x63\x9b\x5e\x2b\xc2\x06\xb9\x53\x03\xa6\x74\xc8\xe0\xd0\x7d\x02\x8d\xf5\xd2\x3a\x35\x92\xf0\x6c\x40\xf9\x8e\x67\x6f\xe8\x8a\xb9\x09\x14\x1d\x39\x6b\x1e\x48\xd6\x35\x57\x91\x82\x6b\x98\x30\x66\x14\xd8\x6b\x54\x04\xb7\xe3\xb3\x8f\x99\x8b\x84\x22\x11\xde\x84\xd6\xc1\xa5\x8d\xbc\x65\x0a\x91\xdb\xe3\xd9\x1b\x04\x4b\xbf\xd4\x29\x19\x16\xff\x1c\xed\x26\xf7\xf4\xe7\xab\x3f\xd0\xa6\xcb\xdc\xa6\x18\x87\x6c\x1d\x37\xc8\x8b\x97\x96\x73\xcc\xec\x03\xc1\xf6\xd2\xe0\xb9\x4f\x5b\x19\xa8\xf4\xee\x96\xed\x9c\xae\x50\x97\x18\x51\x43\xd2\x69\x51\xc0\x28\xba\x14\x68\xeb\xc0\x34\x75\x54\xcc\xdc\x1a\x69\x55\xa0\xad\xf3\xb7\x81\x6a\xf0\x3c\x9e\x4d\x48\x21\x99\x17\x5d\x73\xf2\xe1\x7a\x18\x8d\xe9\x6d\x5f\xf2\x7c\x1e\xb0\x7e\x76\xda\x66\x98\x7c\x11\x08\xa3\x3c\x1e\x22\x29\x2e\xc7\x83\xa5\x57\x07\x71\x54\xcb\x34\xd3\xef\x31\x41\xcf\xd0\x1d\x7d\xc5\x18\xf0\x39\xba\x33\xf7\x17\xf8\x66\x63\x35\x59\x72\x1f\x27\xd0\xb8\xed\xa6\xd8\x6e\xed\x4d\xc1\x57\xf6\x5f\xaf\x78\xb1\x02\xa7\x8a\x71\x17\x4e\xb1\xdd\x52\xdc\x81\x5f\x6c\x47\xd1\x2f\xa9\x62\x92\xb5\x96\x0a\xbc\xe9\x4c\x1b\xbe\xc0\xf8\xef\xde\x89\x4e\x9f\xfd\x17\x00\x00\xff\xff\x76\xba\x49\x10\x16\x06\x00\x00")

func dataDockerfileTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileTemplate,
		"data/Dockerfile.template",
	)
}

func dataDockerfileTemplate() (*asset, error) {
	bytes, err := dataDockerfileTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile.template", size: 1558, mode: os.FileMode(420), modTime: time.Unix(1448756467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches10001_for_tests = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x4a\x2c\x02\x04\x00\x00\xff\xff\xaa\x8c\xff\x76\x03\x00\x00\x00")

func dataPatches10001_for_testsBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches10001_for_tests,
		"data/patches/1.0.0/01_for_tests",
	)
}

func dataPatches10001_for_tests() (*asset, error) {
	bytes, err := dataPatches10001_for_testsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.0.0/01_for_tests", size: 3, mode: os.FileMode(420), modTime: time.Unix(1448756444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches10002_for_tests = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x4a\xac\x02\x04\x00\x00\xff\xff\x98\x04\x24\x78\x03\x00\x00\x00")

func dataPatches10002_for_testsBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches10002_for_tests,
		"data/patches/1.0.0/02_for_tests",
	)
}

func dataPatches10002_for_tests() (*asset, error) {
	bytes, err := dataPatches10002_for_testsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.0.0/02_for_tests", size: 3, mode: os.FileMode(420), modTime: time.Unix(1448756444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches21001_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xeb\x4f\xdb\x3e\x14\xfd\xfc\xf3\x5f\x71\x15\x7e\x52\x93\xe5\xb1\x3e\xc2\xa3\x03\xa4\x32\x1e\x2b\x1a\x02\x44\xd9\xbe\x5a\x26\xb9\xa5\x16\xa9\x13\xd9\x4e\x07\xff\xfd\xec\xd0\x84\x05\xb5\x15\x6c\x9a\xb4\x7c\x48\x5d\xe7\xdc\x73\x4f\xce\x3d\xce\xb9\x48\xf1\xf1\x13\xe0\xa3\xfe\x28\x91\xa5\x19\x17\xd8\x2c\xa2\x84\x1c\xfe\xf9\x45\xc2\x30\x5c\xc7\xff\x9f\x2b\x71\xc1\x15\xcf\x05\xc4\xdb\xfd\x7e\xec\x11\xdf\xf7\xdf\x08\xde\xf6\xc8\x68\x04\x61\x6f\xb8\x1b\x07\xbb\xe0\x2f\x7f\x47\x23\x02\x04\xec\x25\x33\xca\xb4\xc6\x79\xa1\x31\xa5\x49\x3e\x2f\x32\xd4\xa6\x96\x4e\x4b\x91\xd8\x05\x1c\x42\xcd\xbd\x19\xb8\x4f\x60\x8b\x4f\x21\xc5\xa9\x81\xa6\xee\xf8\xe8\xfb\x29\xbd\xb9\xa0\xd7\x37\xa7\xf4\xfc\xf2\xfa\xdb\x2d\x1d\x5f\x5d\x7d\xf5\x48\xb8\x6c\x5a\x48\xa4\x5c\x14\xa5\xa6\xb3\x3c\x7f\x30\x5d\xdc\xb3\xba\xe3\x07\xaf\xe9\xd8\x46\xed\x13\x7f\x6d\xb5\xd9\xb4\xcb\x4a\x0e\xd5\x9b\x38\x60\x0b\x45\xca\xa7\x95\x5c\xa3\x16\x6a\xa5\xc7\x47\xb7\xc7\x63\x3a\x39\xff\x72\x79\x74\x31\x69\xcc\x49\x98\x4e\x66\x54\xf1\x7b\xc1\x32\x65\x1a\x75\xf7\xc9\xaa\x30\x98\x3f\x49\x2e\xa6\x91\xbc\xfb\x3b\x61\x78\xe1\x6f\xcf\x77\x30\x5c\x11\x86\x75\xe0\xb8\x5b\x87\x21\xd8\xb1\x51\x08\x7a\xdd\x2a\x09\xe6\x45\x51\x97\x52\x80\x2a\x0b\x94\xae\xb5\x30\x80\x99\x61\x43\xa9\x3c\x02\xc6\x2e\x93\x16\xdf\x7a\xd5\xc4\x6c\xc6\x16\x48\xf5\x53\x81\xae\xbd\x79\x76\x30\x2d\x0e\xbb\xfb\x0b\x87\x6f\x39\x7c\x02\x29\x97\xd4\x4a\xe3\xf7\x6e\x27\x29\xa5\x42\xd5\xf1\xda\xbb\x62\xf5\xb6\x46\x39\x4f\x58\xd1\x79\x7e\x81\x61\x1c\xc4\xe0\x0f\xf7\x82\xbd\x4a\x7f\x5b\x95\x95\xef\x3a\x66\x74\x12\x53\xae\x8a\x8c\x3d\x39\xde\x5a\x0c\x17\x0a\xa5\xa6\xda\x58\xb6\x01\x95\xa2\x09\x3b\xd6\x28\xbf\x14\x19\x2a\xb5\xca\x0c\xa7\x1d\x43\xa7\x32\xe6\xff\x93\xd3\xb3\x09\x1c\x1c\x80\x13\x9e\xb4\x9f\x1f\xd6\x99\x77\x1a\x87\x12\xc3\x6a\x5a\xcd\xd9\x83\x39\x48\x99\x65\x5c\x76\x31\x5c\xff\x52\xf0\xe2\xfe\x7b\x82\x37\x58\xce\xad\x0a\x9e\xb9\x0f\x37\xcd\xed\x77\x66\x02\xef\x9c\xc9\x16\xbc\xfa\x60\x70\x05\x6c\xc1\x78\xc6\xee\x32\x04\xc5\x45\x82\x0d\x57\x18\x47\x7d\x70\xfb\xdd\x6e\xcf\x8b\x9e\x6b\x9b\x4f\x15\xb7\x1d\xe7\xf9\x02\x53\x60\xfa\xa5\x60\x27\x1a\xd8\x82\x5e\x5c\x17\x8c\xf3\x1f\xb8\x40\x19\x80\x89\xa4\xb6\x10\x70\x2f\x51\x7f\x9e\x9c\xc0\x4e\xd4\x8b\x06\x01\x54\x60\x48\x73\x54\xa2\xa3\xc1\x8a\x7f\x25\x30\xb2\xc7\xf4\x4d\x49\xb2\xe7\xf5\x67\x00\x00\x00\xff\xff\xdd\x85\xa5\xd3\xb0\x06\x00\x00")

func dataPatches21001_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches21001_readlinePatch,
		"data/patches/2.1.0/01_readline.patch",
	)
}

func dataPatches21001_readlinePatch() (*asset, error) {
	bytes, err := dataPatches21001_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.1.0/01_readline.patch", size: 1712, mode: os.FileMode(420), modTime: time.Unix(1448756444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches21101_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xeb\x4f\xdb\x3e\x14\xfd\xfc\xf3\x5f\x71\x15\x7e\x52\x93\xe5\xb1\x3e\xc2\xa3\x03\xa4\x32\x1e\x2b\x1a\x02\x44\xd9\xbe\x5a\x26\xb9\xa5\x16\xa9\x13\xd9\x4e\x07\xff\xfd\xec\xd0\x84\x05\xb5\x15\x6c\x9a\xb4\x7c\x48\x5d\xe7\xdc\x73\x4f\xce\x3d\xce\xb9\x48\xf1\xf1\x13\xe0\xa3\xfe\x28\x91\xa5\x19\x17\xd8\x2c\xa2\x84\x1c\xfe\xf9\x45\xc2\x30\x5c\xc7\xff\x9f\x2b\x71\xc1\x15\xcf\x05\xc4\xdb\xfd\x7e\xec\x11\xdf\xf7\xdf\x08\xde\xf6\xc8\x68\x04\x61\x6f\xb8\x1b\x07\xbb\xe0\x2f\x7f\x47\x23\x02\x04\xec\x25\x33\xca\xb4\xc6\x79\xa1\x31\xa5\x49\x3e\x2f\x32\xd4\xa6\x96\x4e\x4b\x91\xd8\x05\x1c\x42\xcd\xbd\x19\xb8\x4f\x60\x8b\x4f\x21\xc5\xa9\x81\xa6\xee\xf8\xe8\xfb\x29\xbd\xb9\xa0\xd7\x37\xa7\xf4\xfc\xf2\xfa\xdb\x2d\x1d\x5f\x5d\x7d\xf5\x48\xb8\x6c\x5a\x48\xa4\x5c\x14\xa5\xa6\xb3\x3c\x7f\x30\x5d\xdc\xb3\xba\xe3\x07\xaf\xe9\xd8\x46\xed\x13\x7f\x6d\xb5\xd9\xb4\xcb\x4a\x0e\xd5\x9b\x38\x60\x0b\x45\xca\xa7\x95\x5c\xa3\x16\x6a\xa5\xc7\x47\xb7\xc7\x63\x3a\x39\xff\x72\x79\x74\x31\x69\xcc\x49\x98\x4e\x66\x54\xf1\x7b\xc1\x32\x65\x1a\x75\xf7\xc9\xaa\x30\x98\x3f\x49\x2e\xa6\x91\xbc\xfb\x3b\x61\x78\xe1\x6f\xcf\x77\x30\x5c\x11\x86\x75\xe0\xb8\x5b\x87\x21\xd8\xb1\x51\x08\x7a\xdd\x2a\x09\xe6\x45\x51\x97\x52\x80\x2a\x0b\x94\xae\xb5\x30\x80\x99\x61\x43\xa9\x3c\x02\xc6\x2e\x93\x16\xdf\x7a\xd5\xc4\x6c\xc6\x16\x48\xf5\x53\x81\xae\xbd\x79\x76\x30\x2d\x0e\xbb\xfb\x0b\x87\x6f\x39\x7c\x02\x29\x97\xd4\x4a\xe3\xf7\x6e\x27\x29\xa5\x42\xd5\xf1\xda\xbb\x62\xf5\xb6\x46\x39\x4f\x58\xd1\x79\x7e\x81\x61\x1c\xc4\xe0\x0f\xf7\x82\xbd\x4a\x7f\x5b\x95\x95\xef\x3a\x66\x74\x12\x53\xae\x8a\x8c\x3d\x39\xde\x5a\x0c\x17\x0a\xa5\xa6\xda\x58\xb6\x01\x95\xa2\x09\x3b\xd6\x28\xbf\x14\x19\x2a\xb5\xca\x0c\xa7\x1d\x43\xa7\x32\xe6\xff\x93\xd3\xb3\x09\x1c\x1c\x80\x13\x9e\xb4\x9f\x1f\xd6\x99\x77\x1a\x87\x12\xc3\x6a\x5a\xcd\xd9\x83\x39\x48\x99\x65\x5c\x76\x31\x5c\xff\x52\xf0\xe2\xfe\x7b\x82\x37\x58\xce\xad\x0a\x9e\xb9\x0f\x37\xcd\xed\x77\x66\x02\xef\x9c\xc9\x16\xbc\xfa\x60\x70\x05\x6c\xc1\x78\xc6\xee\x32\x04\xc5\x45\x82\x0d\x57\x18\x47\x7d\x70\xfb\xdd\x6e\xcf\x8b\x9e\x6b\x9b\x4f\x15\xb7\x1d\xe7\xf9\x02\x53\x60\xfa\xa5\x60\x27\x1a\xd8\x82\x5e\x5c\x17\x8c\xf3\x1f\xb8\x40\x19\x80\x89\xa4\xb6\x10\x70\x2f\x51\x7f\x9e\x9c\xc0\x4e\xd4\x8b\x06\x01\x54\x60\x48\x73\x54\xa2\xa3\xc1\x8a\x7f\x25\x30\xb2\xc7\xf4\x4d\x49\xb2\xe7\xf5\x67\x00\x00\x00\xff\xff\xdd\x85\xa5\xd3\xb0\x06\x00\x00")

func dataPatches21101_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches21101_readlinePatch,
		"data/patches/2.1.1/01_readline.patch",
	)
}

func dataPatches21101_readlinePatch() (*asset, error) {
	bytes, err := dataPatches21101_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.1.1/01_readline.patch", size: 1712, mode: os.FileMode(420), modTime: time.Unix(1448756444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/Dockerfile-centos.template": dataDockerfileCentosTemplate,
	"data/Dockerfile-lucid.template": dataDockerfileLucidTemplate,
	"data/Dockerfile.template": dataDockerfileTemplate,
	"data/patches/1.0.0/01_for_tests": dataPatches10001_for_tests,
	"data/patches/1.0.0/02_for_tests": dataPatches10002_for_tests,
	"data/patches/2.1.0/01_readline.patch": dataPatches21001_readlinePatch,
	"data/patches/2.1.1/01_readline.patch": dataPatches21101_readlinePatch,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"Dockerfile-centos.template": &bintree{dataDockerfileCentosTemplate, map[string]*bintree{}},
		"Dockerfile-lucid.template": &bintree{dataDockerfileLucidTemplate, map[string]*bintree{}},
		"Dockerfile.template": &bintree{dataDockerfileTemplate, map[string]*bintree{}},
		"patches": &bintree{nil, map[string]*bintree{
			"1.0.0": &bintree{nil, map[string]*bintree{
				"01_for_tests": &bintree{dataPatches10001_for_tests, map[string]*bintree{}},
				"02_for_tests": &bintree{dataPatches10002_for_tests, map[string]*bintree{}},
			}},
			"2.1.0": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches21001_readlinePatch, map[string]*bintree{}},
			}},
			"2.1.1": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches21101_readlinePatch, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

