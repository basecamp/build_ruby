// Code generated by go-bindata.
// sources:
// data/Dockerfile-centos.template
// data/Dockerfile-xenial.template
// data/Dockerfile.template
// data/patches/1.0.0/01_for_tests
// data/patches/1.0.0/02_for_tests
// data/patches/1.9.3-p551/01_strict_hostname_checking.patch
// data/patches/2.0.0-p0/01_readline.patch
// data/patches/2.0.0-p195/01_readline.patch
// data/patches/2.0.0-p247/01_readline.patch
// data/patches/2.0.0-p353/01_readline.patch
// data/patches/2.0.0-p451/01_readline.patch
// data/patches/2.1.0/01_readline.patch
// data/patches/2.1.1/01_readline.patch
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDockerfileCentosTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x55\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x48\x06\x14\x58\x4b\xa9\x6e\xda\x34\xce\x96\x0f\x59\xdc\x0c\xe9\x5b\xda\x64\xad\x81\xad\x43\x4b\x89\x27\xe9\x1a\xbe\x08\xe4\xc9\x8e\xa3\x79\xbf\x7d\xa0\xa4\x38\xce\xda\x61\x1f\x12\xf3\x1e\x3e\x47\xdd\x91\xcf\xdd\x9d\x5e\x9c\xbf\x81\xae\x4b\x67\x14\xd8\xbb\xf5\x3a\xb9\xf8\xf0\x16\x56\xad\x81\xb6\x51\x92\x11\xc4\x6a\x83\x90\x0d\x2c\xb5\x06\xb1\x82\xaa\x28\xe2\x9f\x28\x1e\x3e\x04\x23\xaf\x10\x64\xcb\xae\x5f\x5c\xa1\xb7\xa8\x85\xc2\x05\x6a\xf0\x8d\x11\x79\x4b\x5a\xc1\xa7\x04\x00\xa0\xd2\x94\x17\xe3\x9e\xa6\xbc\x2c\x69\x34\x2a\x95\x9b\x71\x69\x8b\xd6\x07\x0c\xa3\x35\xf8\x79\x94\x4a\x93\xc5\x11\x74\x0d\xda\x10\xf4\xdd\x41\x2b\x69\x6e\xad\x1b\x4d\xf9\x3d\xdf\xa2\xf5\x1a\x58\xfa\x64\x17\xce\xc6\x04\x24\x18\xe7\x11\x8c\x53\xe8\x2d\x2c\xd0\x07\x72\x16\x5c\x09\x17\x6d\xbe\x4a\xe1\x18\x14\x36\xd1\x2c\x1b\x03\x95\xe3\xf1\x2a\x14\x48\xab\x80\x82\x7d\xc0\xc9\x2e\x14\xce\x34\x92\x29\xd7\x08\x4b\xe2\x1a\x7c\x9b\xaf\x60\x92\x1e\xa4\xcf\x61\x59\x53\x51\x03\x05\x58\xd6\x92\xe3\xef\x78\x71\xa8\x60\x41\x32\x5e\x65\x72\x3c\x9b\x41\xcd\xdc\x84\xc3\x2c\x0b\x68\x55\x21\x39\x2d\x9c\xc9\x94\xce\x7e\x91\xea\xe5\x6b\xf5\xb8\x39\xbe\x7e\x3f\x79\xf9\xf1\xe4\xe5\xd3\xaf\xaf\x4f\xb8\x7c\xf6\xc6\x9f\x1e\xbc\xd8\x3b\x9e\xe6\xf6\xc9\xe2\xd5\xa5\x91\xf6\xf7\xf2\x9c\x27\xb3\xf7\xef\xa7\x93\x9b\xaf\x27\xd5\x32\x9b\xec\x3f\x9b\x64\x31\x0a\xf1\x24\xdd\x4b\x1f\x7f\xde\x7b\x1e\xfe\x2e\xd0\xb2\x0b\x9f\xa5\x51\xfb\x4f\x53\xdf\x18\xc8\xd8\x34\x59\xff\xa0\xd1\x12\x34\x00\xff\xe3\xd5\xf3\xff\xd8\xc9\x5c\xc3\x3d\xb5\x67\x66\x39\xd9\xac\x42\xb3\xf3\x08\x76\xc6\xfc\xe2\xb2\x6c\x7a\x44\x88\x9c\xac\x22\x7f\x94\xb5\xc1\x47\xea\x00\x5a\x27\xbc\x72\xc5\x9d\x41\x3b\x7f\xf6\xa7\xf7\x8f\x14\x55\xe8\x96\x56\x3b\xa9\x3e\x78\xbd\x5e\xff\xc5\xd2\x83\xbb\xbe\x39\xe9\xa3\x4c\xba\xce\x4b\x5b\x21\xa4\xef\x24\x17\x35\x86\xf5\x3a\xde\x62\xd7\xa5\xeb\x35\x64\x49\xd7\xa1\x55\xeb\x75\x32\x3f\xbf\x78\x35\x3b\xbb\xd8\x4a\xac\xeb\xd2\xf8\xae\x1f\x87\x67\x1e\x15\x5e\x3a\x0f\x04\x64\xe1\x4b\x9f\x88\x0e\x90\xfd\x98\x36\xf1\xe0\x2f\x3f\x81\x72\xd0\x2f\x41\x34\x8f\xe1\x67\xf8\x81\x22\x64\xb1\x77\x3c\x39\x7d\x7d\xfc\xeb\xe5\xd1\x03\x61\xa4\x2f\xea\xa3\xeb\x83\x7d\xb1\xff\x14\xc4\xf9\x1e\x88\xd2\x3a\x51\xca\xc0\xc2\x48\xae\x41\x54\x7b\x20\xaa\x4a\xe5\x20\xe6\x7d\xd5\xcc\xf1\x9a\xbd\x04\x31\xb7\x4e\xb4\xb6\x0d\xa8\x44\x23\xbd\x34\xc8\xe8\x07\xb4\x91\x1e\x2d\xd7\x18\x30\x0c\x80\x76\xb6\xea\xff\x0d\xa6\xa1\x10\xc8\x56\xa2\x24\xd4\x4a\x90\x25\x26\xa9\xe9\x06\x7d\xa4\x8f\x47\x2e\xa4\x27\x19\x55\x29\xe6\x8d\x23\xcb\xe8\x85\xf4\x51\xa0\x62\xbe\xf4\xc4\x28\x02\x7b\xb2\x55\xf4\x50\x58\x68\xe9\x25\x93\xb3\x42\x96\x91\x19\x58\x32\x1a\xb4\x0c\x62\x4e\xa6\xd1\x54\x10\x8b\xb2\xb5\x45\xcf\xd9\xe2\xf7\xde\x8d\xc7\x22\xd6\xc5\xf6\x46\xb8\xcd\xa4\xb8\x42\x25\x72\xe2\x21\xd6\xa1\x5a\x40\x04\x56\x47\x14\xdc\xf4\x60\x3a\x3d\x9c\x4c\xa7\x53\x00\x51\xbe\x3b\x3b\x79\x00\x69\x56\x38\x5b\x52\xd5\x7a\xec\xeb\x56\x88\xc6\x63\x49\xd7\x83\x80\xb4\x2b\xa4\x1e\x71\xb4\x31\x3d\x11\x6a\xe9\x51\x8d\x98\xa2\xd0\x83\xa3\x10\x85\x72\xc5\x7d\x76\xd4\x94\xf0\xa8\x25\xd3\x02\x93\x5d\xb8\x44\x34\x01\xd8\x81\xb3\x7a\x05\xb2\x2c\xb1\x60\x08\xce\x20\x4c\xd2\x29\x04\xf4\x84\x21\x76\x03\xc2\xf0\x08\xf2\x96\x81\x6b\x8c\x25\x9f\x93\x45\x35\x74\xbc\xc0\xd8\x1c\x26\xbb\xc9\x6e\x6c\x32\x10\xa5\xd1\xc3\xe2\xeb\xc1\xa6\x51\xce\x5e\x5c\xfe\x36\x3b\xbb\x38\xea\xb5\x58\x36\xa6\x67\x73\x6c\x0a\x5e\xda\xfe\xc8\xde\x85\x6b\xb4\xc3\x6a\x74\x7c\x04\x4b\x19\x20\xf7\xee\x0a\x6d\x0a\x97\x8d\x26\x66\xb2\x15\x50\x6c\x45\x40\x96\x5d\x3c\x67\xe9\x20\x60\x54\x10\xf7\xa1\x19\x69\x55\x80\xa5\xf3\x57\x01\x4a\xb2\x78\x98\x6c\xc5\xd4\x75\xe9\xdb\xd6\x9c\xbc\xfb\x30\xca\x7f\xfb\x6b\xdf\x86\x79\x57\x44\x43\xad\x34\x66\xec\xa5\x22\x80\x22\x7f\x6b\x70\xdf\x44\x46\xc3\xc2\x77\x8b\xed\x76\x5b\xc6\x42\x3d\xf6\x45\x7d\x07\x2d\xe0\x3f\xc8\x5d\x97\x9e\x31\x0e\x7a\x5a\xaf\x07\xb2\xba\x37\x3b\x3e\xdd\x82\xf7\x86\xc8\x06\xdd\x9a\x26\x1b\xec\x7b\x63\x45\xa8\x7f\x4f\x96\x0d\x7e\x7f\xc4\x6c\x7f\x6f\x6b\xd6\x6c\xe0\x6f\x86\x8e\x18\x7a\x56\xb6\x75\x75\x0d\x64\x5d\x97\x9e\x92\xc6\xb7\xd2\xe0\x26\xd9\x36\xf8\xe4\x9f\x00\x00\x00\xff\xff\xf9\x36\x4b\x39\x84\x07\x00\x00")

func dataDockerfileCentosTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileCentosTemplate,
		"data/Dockerfile-centos.template",
	)
}

func dataDockerfileCentosTemplate() (*asset, error) {
	bytes, err := dataDockerfileCentosTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-centos.template", size: 1924, mode: os.FileMode(420), modTime: time.Unix(1479497077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerfileXenialTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\xdf\x4f\xe4\x36\x10\x7e\xcf\x5f\x31\x82\x4a\x27\x55\xcc\x6e\xd1\xb5\x88\xa5\xe5\x01\xb1\xa5\x42\x6d\x01\x2d\xa5\xfb\xd0\xab\x74\x4e\x3c\xc9\x4e\x71\xec\xc8\x9e\x00\x4b\x9a\xff\xbd\xb2\xb3\x59\x82\xee\xfa\x12\xcd\x7c\xf3\x23\x63\xfb\x9b\xef\x6a\x75\xfb\x3b\x74\xdd\x6c\xc9\x41\xbc\xeb\xfb\x6c\xf5\x70\x03\xaa\x11\xac\x48\xa0\x6d\xb4\x12\x7a\x07\xb1\x0d\xa2\x8c\x01\xdc\x42\xde\xb2\xd1\x48\x21\x90\x15\x56\x06\x3e\x65\x00\x00\x86\xf3\xe2\x04\x35\x3d\x45\xab\x2c\x79\x34\x2b\x9d\xd7\xa3\x6d\x8b\xd6\x07\x0a\x3f\x24\x7f\x5f\xe6\x49\x69\xc3\x96\xc6\xac\x10\xcc\x68\x6e\x55\x3d\xd8\xaf\x86\xf3\xe3\x6a\x52\x57\xb4\xde\x80\x6f\xf3\x6d\xfa\xc4\x40\x1a\xf7\xaf\x83\x8a\xea\x83\x23\x38\xd8\xcd\x1b\xcd\xb2\x49\x08\x62\xce\x56\xb3\x3f\x9f\xb7\xc1\xcf\x73\xb6\x03\x68\x1d\x7a\xed\x8a\x37\x87\x0f\xfe\xce\x52\xaf\xf4\x8b\x78\x45\xee\xd9\x1a\xa7\xf4\x83\x37\x7d\xff\xaf\x28\x0f\xee\xe5\xf5\x12\xe6\x52\x37\x59\xd7\x79\x65\x2b\x82\xd9\x9d\x92\x62\x43\xa1\xef\x2f\x96\xcb\x58\xd4\xf7\x30\xcf\xba\x8e\xac\xee\xfb\x6c\x7d\xbb\xfa\x75\x79\xbd\x4a\x25\xf3\x34\x6f\xd7\xcd\x56\x6d\xbe\xfd\x93\x7c\x60\x67\x77\xd7\x5f\x3a\x0f\x0c\x6c\xe1\x73\x1c\x6f\x6e\x02\xcc\xbf\x9d\x35\xb1\xf1\xe7\x1f\x41\x3b\x48\x26\x60\xf3\x1d\xfc\x04\xdf\x70\x84\xec\xf0\x48\x97\x57\xbf\x5d\xfc\x72\x7f\xfe\x01\x6b\xe5\x8b\xcd\xf9\xcb\xe9\x09\x9e\x7c\x0f\x78\xfb\x11\xb0\xb4\x0e\x4b\x15\x04\x6b\x25\x1b\xc0\xea\x23\x60\x55\xe9\x1c\x70\x9d\x5e\x73\x4d\x2f\xe2\x15\xe0\xda\x3a\x6c\x6d\x1b\x48\x63\xa3\xbc\xaa\x49\xc8\x0f\x68\xa3\x3c\x59\xd9\x50\xa0\x30\x00\xc6\xd9\x2a\x7d\x06\xb7\xe6\x10\xd8\x56\x58\x32\x19\x8d\x6c\x39\x72\x82\x5f\xc9\xc7\xf4\x5d\xcb\x27\xe5\x59\xe5\x86\x00\xd7\x8d\x63\x2b\xe4\x51\x79\x8e\xf3\xac\x9f\x3d\x0b\x61\x10\xcf\xb6\x8a\x15\x9a\x0a\xa3\xbc\x12\x76\x16\x55\x19\x33\x83\x28\xa1\x9a\xac\x00\xae\xb9\x6e\x0c\x17\x2c\x58\xb6\xb6\x48\x39\x93\xfc\x54\xdd\x78\x2a\x94\x90\x9e\x06\xc2\x78\x92\xe2\x91\x34\xe6\x2c\xc3\xac\x85\xab\x1b\x25\x80\x41\xf4\x39\x07\xb7\x38\x5d\x2c\xce\x8e\x17\x8b\x05\x00\x96\x77\xd7\x97\x1f\x60\x36\x2f\x9c\x2d\xb9\x6a\x3d\x25\xd6\x21\x36\x9e\x4a\x7e\x19\x18\x64\x5c\xb1\x23\x3f\x22\xd9\x78\x3c\x0c\x1b\xe5\x49\xef\x30\xcd\x21\x81\x3b\x26\xa2\x76\xc5\xfb\xec\xc8\x29\xf4\x64\x94\xf0\x13\x65\x87\x70\x4f\x54\x07\x10\x07\xce\x9a\x2d\xa8\xb2\xa4\x42\x20\xb8\x9a\xe0\x78\xb6\x80\x40\x9e\x29\xc0\xaa\xcd\x99\xc2\x11\xe4\xad\x80\x6c\x08\x0a\x57\xe7\x6c\x49\x43\xad\x1e\x09\x82\x50\x73\x96\x1d\x66\x87\x71\x45\x20\x52\x23\xc1\xf8\xcf\xe9\x7e\x81\x97\x3f\xdf\xff\xb1\xbc\x5e\x9d\x27\x2e\x96\x4d\x9d\xb2\x65\xa3\x04\xbc\xb2\xa9\x65\x2a\x91\x0d\xd9\xc1\xda\x15\x1e\xc1\xb3\x0a\x90\x7b\xf7\x48\x76\x06\xf7\x8d\x61\x11\xb6\x15\x70\x94\x0b\x60\x2b\x2e\xf6\x79\x76\x10\x28\x32\x48\xd2\x68\xb5\xb2\x3a\xc0\xb3\xf3\x8f\x01\x4a\xb6\x74\x96\x4d\x66\xea\xba\xd9\x4d\x5b\x5f\xde\x3d\xec\xe8\x3f\xfd\xdb\x97\x63\xbe\x2d\xd1\xb0\x2b\x4d\xbd\x53\x02\x0c\xa0\xd9\x8f\x8e\x80\xa6\x7c\x74\x2c\x7c\x75\xd9\xc6\xb0\x8a\x8b\x7a\xe1\x8b\xcd\x1b\xf4\x04\xff\x93\xdc\x75\xb3\x6b\xa1\x81\x4f\x7d\x3f\x24\xeb\x89\xe8\x7d\x9a\x40\xa3\xfa\x4d\xb1\xbd\x0c\x4e\xc1\xaf\xe8\xe1\x10\x78\x27\x89\xd3\xc0\xa8\x8d\x53\x6c\x2f\x92\x7b\xf0\x0b\xb5\xc4\x41\xae\xe6\x93\x5b\x6b\x60\xde\x75\xb3\x2b\x36\x74\xa3\x6a\xda\x9f\xb3\x0d\x3e\xfb\x2f\x00\x00\xff\xff\x77\x45\x29\xc1\x1c\x06\x00\x00")

func dataDockerfileXenialTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileXenialTemplate,
		"data/Dockerfile-xenial.template",
	)
}

func dataDockerfileXenialTemplate() (*asset, error) {
	bytes, err := dataDockerfileXenialTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-xenial.template", size: 1564, mode: os.FileMode(420), modTime: time.Unix(1479497085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerfileTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x51\x4f\xe3\x46\x10\x7e\xcf\xaf\x18\x71\x95\x4e\xaa\x18\xa7\x88\x16\x11\x5a\x1e\x10\x29\x15\x6a\x0b\x28\x94\xe6\xa1\x57\xe9\xd6\xde\xb1\x33\x65\xbd\x6b\xed\x8e\x81\xe0\xfa\xbf\x57\xbb\x8e\x83\xd1\x5d\x5f\xa2\x99\x6f\xbf\x99\xcc\x7a\xbf\xf9\xae\x56\xb7\xbf\x43\xd7\x65\x4b\x0e\xe2\x5d\xdf\xcf\x56\x0f\x37\xa0\x1a\xc1\x8a\x04\xda\x46\x2b\xa1\x77\x10\xdb\x20\xca\x18\xc0\x2d\xf8\x36\xdf\x1e\x65\x8b\xec\x18\xf2\x96\x8d\x46\x0a\x81\xac\xb0\x32\xf0\x69\x06\x00\x60\x38\x2f\x4e\x50\xd3\x53\x8c\xca\x92\xc7\xb0\xd2\x79\x3d\xc6\xb6\x68\x7d\xa0\xf0\x43\xca\xf7\x65\x9e\x94\x36\x6c\x69\x64\x85\x60\xc6\x70\xab\xea\x21\x7e\x35\x9c\x1f\x55\x93\xba\xa2\xf5\x26\x8d\xfa\xd7\xc1\xbc\x0d\x7e\x9e\xb3\x9d\x57\x54\x1f\x1c\xc2\xc1\x6e\xe8\x18\x96\x4d\x42\x10\x73\xb6\x9a\xfd\xf9\x48\x1d\x40\xeb\xd0\x6b\x57\xbc\x25\x7c\xf0\x77\xea\x19\x9b\xa7\xcf\xe4\x9e\xad\x71\x4a\x3f\x78\xd3\xf7\xff\x8a\xf2\xe0\x5e\x5e\x2f\x61\x2e\x75\x33\xeb\x3a\xaf\x6c\x45\x90\xdd\x29\x29\x36\x14\xfa\xfe\x62\xb9\x8c\x45\x7d\x0f\xf3\x59\xd7\x91\xd5\x7d\x3f\x5b\xdf\xae\x7e\x5d\x5e\xaf\x52\xc9\x3c\x7e\x42\xec\xba\x6c\xd5\xe6\xdb\x3f\xc9\x07\x76\x76\xf7\x04\xa5\xf3\xc0\xc0\x16\x3e\xa7\x8b\x98\x00\xf3\x6f\xb3\x26\x36\xfe\xfc\x23\x68\x07\x29\x04\x6c\xbe\x83\x9f\xe0\x1b\x8e\x90\x1d\x1e\xea\xf2\xea\xb7\x8b\x5f\xee\xcf\x3f\x62\xad\x7c\xb1\x39\x7f\x39\x3d\xc1\x93\xef\x01\x6f\x8f\x01\x4b\xeb\xb0\x54\x41\xb0\x56\xb2\x01\xac\x8e\x01\xab\x4a\xe7\x80\xeb\xf4\xa2\x6b\x7a\x11\xaf\x00\xd7\xd6\x61\x6b\xdb\x40\x1a\x1b\xe5\x55\x4d\x42\x7e\x40\x1b\xe5\xc9\xca\x86\x02\x85\x01\x30\xce\x56\xe9\x67\x48\x6b\x0e\x81\x6d\x85\x25\x93\xd1\xc8\x96\xa3\x1a\xf8\x95\x7c\xa4\xef\x5a\x3e\x29\xcf\x2a\x37\x04\xb8\x6e\x1c\x5b\x21\x8f\xca\x73\x9c\x67\xfd\xec\x59\x08\x83\x78\xb6\x55\xac\xd0\x54\x18\xe5\x95\xb0\xb3\xa8\xca\xc8\x0c\xa2\x84\x6a\xb2\x02\xb8\xe6\xba\x31\x5c\xb0\x60\xd9\xda\x22\x71\x26\xfc\x54\xdd\x78\x2a\x94\x90\x9e\x1e\x84\xf1\x26\xc5\x23\x69\xcc\x59\x86\x59\x0b\x57\x37\x4a\x00\x83\xe8\x73\x0e\x6e\x71\xba\x58\x9c\x1d\x2d\x16\x0b\x00\x2c\xef\xae\x2f\x3f\x42\x36\x2f\x9c\x2d\xb9\x6a\x3d\x25\xbd\x21\x36\x9e\x4a\x7e\x19\x04\x64\x5c\xb1\x93\x3d\x22\xd9\x78\x3d\x0c\x1b\xe5\x49\xef\x30\xcd\x21\x81\x3b\x21\xa2\x76\xc5\x7b\x76\xd4\x14\x7a\x32\x4a\xf8\x89\x66\x1f\xe0\x9e\xa8\x0e\x20\x0e\x9c\x35\x5b\x50\x65\x49\x85\x40\x70\x35\xc1\x51\xb6\x80\x40\x9e\x29\xc0\xaa\xcd\x99\xc2\x21\xe4\xad\x80\x6c\x08\x0a\x57\xe7\x6c\x49\x43\xad\x1e\x09\x82\x50\x73\x36\xfb\x30\xfb\x10\x97\x03\xa2\x34\x12\x8c\xff\x9c\xee\x97\x78\xf9\xf3\xfd\x1f\xcb\xeb\xd5\x79\xd2\x62\xd9\xd4\x89\x2d\x1b\x25\xe0\x95\x4d\x2d\x53\x89\x6c\xc8\x0e\xd1\xae\xf0\x10\x9e\x55\x80\xdc\xbb\x47\xb2\x19\xdc\x37\x86\x45\xd8\x56\xc0\xd1\x32\x80\xad\xb8\xd8\xe7\xd9\x41\xa0\xa8\x20\x49\xa3\xd5\xca\xea\x00\xcf\xce\x3f\x06\x28\xd9\xd2\xd9\x6c\x32\x53\xd7\x65\x37\x6d\x7d\x79\xf7\xb0\x93\xff\xf4\xdf\xbe\x1c\xf3\x6d\x89\x86\x5d\x69\xea\x9d\x07\x60\x00\xcd\x7e\x4c\x04\x34\xe5\x63\x62\xe1\xab\xcb\x36\x1e\xab\xb8\xa8\x17\xbe\xd8\xbc\x41\x4f\xf0\x3f\xe4\xae\xcb\xae\x85\x06\x3d\xf5\xfd\x40\xd6\x13\xbb\xfb\x34\x81\x46\xdf\x9b\x62\x7b\x03\x9c\x82\x5f\x71\xc2\xe1\xe0\x9d\x19\x4e\x0f\x46\x57\x9c\x62\x7b\x7b\xdc\x83\x5f\xf8\x24\x0e\x76\x35\x9f\x7c\xb5\x06\xe6\x5d\x97\x5d\xb1\xa1\x1b\x55\xd3\xfe\x9e\x6d\xf0\xb3\xff\x02\x00\x00\xff\xff\xa9\xcb\xdf\xc5\x20\x06\x00\x00")

func dataDockerfileTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileTemplate,
		"data/Dockerfile.template",
	)
}

func dataDockerfileTemplate() (*asset, error) {
	bytes, err := dataDockerfileTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile.template", size: 1568, mode: os.FileMode(420), modTime: time.Unix(1479495314, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches10001_for_tests = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x4a\x2c\x02\x04\x00\x00\xff\xff\xaa\x8c\xff\x76\x03\x00\x00\x00")

func dataPatches10001_for_testsBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches10001_for_tests,
		"data/patches/1.0.0/01_for_tests",
	)
}

func dataPatches10001_for_tests() (*asset, error) {
	bytes, err := dataPatches10001_for_testsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.0.0/01_for_tests", size: 3, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches10002_for_tests = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x4a\xac\x02\x04\x00\x00\xff\xff\x98\x04\x24\x78\x03\x00\x00\x00")

func dataPatches10002_for_testsBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches10002_for_tests,
		"data/patches/1.0.0/02_for_tests",
	)
}

func dataPatches10002_for_tests() (*asset, error) {
	bytes, err := dataPatches10002_for_testsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.0.0/02_for_tests", size: 3, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches193P55101_strict_hostname_checkingPatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xfd\x6e\xdb\x38\x12\xff\xdf\x4f\x31\x67\x03\x8d\x9d\xc8\xf2\x47\xec\x7c\x18\x9b\xdd\xfa\x9c\x64\xb7\x40\xe2\x14\x75\x8a\xbd\x43\x92\x33\x28\x69\x64\x73\x2b\x91\x5e\x92\x8e\x9d\x6c\x7b\xef\xb2\xcf\xb2\x2f\x76\xa0\xbe\xfd\xed\xa6\x69\x5a\x2c\x2e\x28\xe0\x8a\x1a\x0d\x67\x7e\xf3\xe3\x70\x86\xd2\xb9\xe0\x3e\x1c\xdb\xf5\xfd\x43\x72\x74\x58\xb7\xf6\xab\x56\xb5\x51\xb3\x1a\xb5\x46\xa3\xda\xac\x37\x8f\x0e\x8e\xeb\x2e\x56\xab\xb5\xa3\x23\xbb\x8e\x4d\xb8\xe4\x0c\x7a\x38\x82\xda\x21\x54\xab\xad\xe0\x1f\xd4\xab\xd5\x5a\x4e\xab\x69\xc1\x35\x67\x0f\xd0\x16\x36\x45\x41\xe1\x07\x8b\x48\x7b\xec\xe1\xeb\x81\x4f\xa8\x67\xda\xdc\xff\x31\x77\x4a\x14\xb6\xa0\x37\x66\x06\xd4\x8f\xe1\x92\x08\xa8\x57\x6b\x4d\xa8\x1d\xb6\xea\x47\xad\x46\x03\xca\xd5\xc3\x6a\x35\xd7\x1b\x5b\xbf\xa1\xad\x5a\x70\xf3\xb6\x7d\xdd\xf9\xe5\x0e\x7a\x4a\x50\x5b\xa1\x80\x21\x97\x8a\x11\x1f\xe1\x1e\x05\x75\xa9\x4d\x14\xe5\x0c\x5c\xee\x79\x7c\x42\xd9\x00\xde\x9d\x77\xe0\xa0\x56\x6f\x9a\xb9\xdc\xf5\x90\xb0\x0f\x12\x14\x87\xd7\x8c\x0c\x29\xb8\x5c\x80\x1a\x22\x28\x94\x4a\x02\x61\x0e\x50\x46\x15\x25\x1e\x38\xdc\x1e\xfb\xc8\x54\xa0\xcc\xcc\x95\xcb\xe5\x1c\xe0\x54\x55\xf8\x08\x99\x94\x5e\xc5\xa3\x56\xf2\x7f\x29\xbd\x32\x65\x0a\x05\x23\x9e\x29\x2c\xf8\x08\x70\x50\x87\xbd\x25\x7f\x5a\x8b\x9e\x2b\x79\x54\x5f\xf4\xa5\x0c\x1e\x03\xf8\x08\xb5\x66\x75\xe9\x83\x1b\xff\x72\x50\x07\x97\x7a\x28\xc1\x1e\x12\x36\x40\xc7\x80\x7a\xf5\x08\x28\x93\x28\xb4\x0b\xb2\xb8\x57\x32\xa0\x01\x0e\x7a\x18\x5e\x97\x4b\xb9\x9c\x43\x5d\x17\xca\xe5\x01\x55\x40\x2a\x6b\xdc\xd3\xe6\x59\x1b\x04\x72\x94\x39\x38\x05\xd7\xad\x39\x0d\x74\x4d\xd3\x26\x6e\xd5\x3a\x26\x50\xab\x56\x0f\x1a\x0d\x8d\xe0\xb6\x00\xe6\xf6\xf6\xf6\xb6\x96\x7d\xfd\x1a\xca\xb5\xc6\xbe\x71\x04\x7b\xfa\xe7\x10\x5e\xbf\x06\x07\xdd\x90\x0c\x0f\x7d\x5b\xbb\x1f\x90\x02\xfb\xd4\x41\xa6\xa8\x7a\x28\xea\x41\x23\xe1\x4d\x29\x07\xe9\x9f\x4d\x24\x82\x24\xcc\x54\x64\x90\x1d\x9f\x0c\x91\x41\x1d\x0a\xe0\x74\x7b\x5d\x4d\x36\xca\xe0\x67\x64\x28\x88\x17\x5c\x16\xdf\x9d\x77\x9a\xf5\xa3\xea\x8c\x32\x00\x39\xe4\x63\xcf\xe9\xc7\xc6\x70\xdf\xe7\xac\x1f\x90\xf5\x04\x5c\xe2\x49\xcc\x95\xb3\xe2\x02\x07\x70\x02\xef\x70\x80\xd3\x91\x89\xd2\x26\x23\x2c\x6a\x63\xee\x89\x37\xc6\x92\x39\x90\x63\xab\x58\xb9\xbd\xbd\xdd\xad\x18\x90\xbf\xf9\x8f\x79\xb7\x97\x2f\xcd\x6b\x50\x63\xc1\x40\x89\x31\x02\x75\xa1\x72\xdb\x2e\xfc\x21\x70\xf0\xe9\xf6\xb1\x42\xe1\xe4\xbf\x89\xd3\xb9\xbd\x35\x4f\x45\xe6\xc6\xb2\xc5\xf8\x3f\x06\xa4\xc6\x2c\x80\x73\x08\x05\xa0\x6f\xdb\x8e\x23\x50\xca\x67\x83\x67\x46\xbc\x10\xad\x6a\x09\x3f\x9f\x75\xcf\xde\xb5\x2f\xfa\xdd\xf6\xe5\x59\x7f\x24\x28\x53\xc5\x92\x9e\x73\xda\xac\x1e\xdf\xef\x57\xee\xf7\xfb\xc4\x53\xa6\x1d\xb2\xa3\x79\x1c\xb0\xa3\x79\xf4\x45\xec\xa0\xee\x6a\x73\x53\x33\xf5\xc3\xa6\x0c\x73\x95\xa9\x78\x9f\x98\x48\xec\xe1\x1f\x1f\x39\x75\x0c\x08\x90\xfb\x98\xf5\x89\xba\xc0\xa9\x03\x27\x27\x90\xef\x74\xf3\x9b\xc9\xf0\xdd\x10\x61\x91\x04\xc8\x9c\xf4\xf2\x53\x2e\x33\x1a\x04\xe1\xe0\xc8\xa8\xd5\x60\xaf\x76\x70\x60\x1c\x3c\x3d\x0c\xc9\x24\x3e\x77\xc6\x1e\xf6\xdd\x31\xb3\x83\x74\xdf\x5a\xa3\x2a\x17\xfa\x98\x99\x70\x39\xb3\x4b\x50\x80\x16\xe3\x0e\xb7\x5b\x31\x2a\x85\x60\xf7\xd0\xcc\x35\xe0\x4d\xbb\xa9\xf7\x1c\x36\x00\x2a\xc1\xa3\x3e\x55\xe8\xe8\xad\x44\x6f\x20\x12\x15\x70\x17\xda\xbd\xce\x9b\x37\x3a\x03\x0b\xa2\xb7\x26\x19\xab\x89\x60\x0d\x28\x0d\x63\xe6\xe9\x15\xa2\x97\x12\x91\x36\xa5\x7d\xce\xbc\x87\x9f\xd6\x89\xc6\x56\xce\xca\xa7\x36\xf6\x10\x93\x5d\xce\x00\x89\x21\x24\x07\x66\xc3\xac\xa5\x42\x97\x44\xd9\xc3\xc8\x7a\x9d\xe5\xca\x7a\x6f\x60\x92\x2a\x7a\x8f\x66\x2c\x26\x09\xeb\x8f\x88\x50\x12\x4e\x02\x03\x1d\x3e\x61\x5a\xd8\x94\x23\x8f\xaa\x62\xde\xcc\x97\xb2\x13\x5f\x5f\x9d\x5e\xb5\x40\x0d\xa9\x04\x0b\x87\xe4\x9e\x72\x11\x2d\x12\x18\x09\x6e\x11\xcb\x7b\x00\x0b\xc1\xe7\x02\x41\x06\xfb\xf5\x9c\x9b\x92\x30\x4d\xfe\x64\x0b\xd7\x8b\x2c\x36\xc1\x94\xf4\x11\xe1\x07\xa8\x67\x67\xdc\xca\x0b\xad\x2e\x71\x23\x01\x6f\x83\x2f\xcb\x01\xdc\x37\x40\x8e\x2d\xaa\xd0\x87\xba\x99\x0a\xbf\x71\x83\xb0\x4f\xa8\xe7\xd8\x44\x38\x69\xc8\xb5\x5d\xfa\x8e\x8e\x51\x66\x94\x87\xf2\x1e\xba\xaa\xec\x73\xa9\x52\x4d\x1e\xb1\xd0\xd3\xa9\x4b\xdf\x1f\x09\x94\xc8\x34\xaf\x42\xee\xba\x14\x85\x11\xdc\xb1\x3d\x8a\x4c\x41\xef\x97\xab\xf7\x17\xa7\xd0\xbd\xba\x06\x9b\xfb\x23\x22\x30\xd5\x44\x06\x84\x32\xa9\x80\xb0\x07\x15\x40\x64\x8d\xd5\xec\xac\xd1\x64\x91\x31\x02\x5d\x14\xc8\xec\x8c\x8a\x74\x56\x28\xa2\x39\x30\x0d\xd8\x35\x71\x4a\xfc\x91\x87\xba\x56\x83\x49\x10\x5a\x5f\xc7\x00\x5c\xce\x67\xee\x59\xe3\x8c\x57\x8c\x2b\xb0\x88\x30\xe7\x85\xb8\x80\xcc\x65\xc9\xdc\xb0\x40\xb2\x44\x88\x68\x92\x19\xfa\xac\xe8\xd5\x32\xd1\xbb\x5e\x0a\x28\x51\x0a\xfd\x91\xd2\x4b\x3a\xf4\x90\x2c\x8d\x07\x50\x96\x6a\x9a\x0c\xa9\x3d\x5c\x45\x05\x1d\x21\x41\x25\x4a\x20\x31\xf2\x6a\x88\xba\xe2\x24\x41\xb8\x33\x24\x98\x8b\x50\x04\xbe\xc3\x03\x20\x43\x6b\x34\x9c\x69\x34\x18\xaa\xf5\xe8\x45\x99\x2e\x36\xab\x98\xc5\x6e\x48\x5d\x65\x64\xf1\xd5\x03\x99\xc5\x90\xde\xf9\x8d\x53\x16\xac\x94\x39\xf8\x93\xf1\xf0\x11\x9d\x96\xf7\xd6\xa5\xe5\x74\xb7\x59\xc8\xc5\x89\x85\x0e\xf7\x09\x65\x7a\x5b\x1d\x71\x86\x2c\xb2\x30\xb9\x5c\x92\x9d\x33\x99\x2a\x95\x8b\x97\xf7\x6e\xde\x80\x72\x2d\xe3\xd5\x0c\x4a\xd4\x85\x0c\xb7\x7e\xd4\x49\x66\x3e\x31\xa5\x2a\xb5\xf3\xf3\xd6\xcd\x69\x38\x39\x81\xda\x67\xf1\x71\xff\xb9\xf8\x98\x25\x23\x0a\x5c\x93\x97\xd0\xb7\xd0\x71\xd0\x81\x09\xd5\x09\x02\x08\x83\x76\x39\x22\x66\x46\xcd\xfb\x72\x92\x26\x08\x83\xa8\xd6\xd6\x2e\x10\x8f\x3e\xa2\x13\x21\x01\x41\x4e\x5d\x85\xed\x3c\x5a\xa6\x54\x44\xa8\xbe\x9e\xf8\xa7\x62\x7e\xca\xca\xe5\x7c\x09\x5e\xbd\x9a\x83\xf9\x1f\x27\x90\xdf\xcd\xa7\x30\x06\xf8\xde\x54\xef\x4c\x0f\xd9\x40\x0d\x61\x2f\x1a\xa9\x25\x23\x3f\x2c\xce\x14\xdd\x79\xf5\x2a\xd6\xb2\xd6\x96\x78\x8a\xd2\xba\x07\x90\x39\x33\xe2\xb5\xbb\x6d\x79\x1f\x07\x22\xb7\x17\x96\x2d\xb6\x47\xa4\x84\x5e\xef\xa2\xc7\xed\x0f\xa8\x92\xda\x92\xd9\xde\xd8\x41\xf8\xe7\xd8\x75\x51\x97\x18\xf3\x37\x42\xf1\x73\x2e\x26\x44\x38\x28\xe6\x6f\x77\x39\xb3\x3c\x6e\x7f\xc8\x25\x51\x2c\xa4\xf1\x7c\x8b\xc2\xe5\xc2\x5f\xd1\x27\x13\x57\xb3\x83\x30\x6d\x14\xd8\x9c\xb1\x88\xae\x9a\x2f\x52\x11\xcb\xa3\x72\x88\x4e\xa2\x2d\x4b\x5a\x2a\xc1\x47\x35\xe4\x0e\x5c\xbe\xef\x5d\xeb\x8d\xde\x26\x9e\x87\x4e\xa4\x53\x5f\xe8\x6d\xa8\x10\x69\xd5\x44\x46\x26\xc7\x01\x47\x89\x9a\xcd\x80\x89\x71\x9a\x75\x20\xd0\xe7\x0a\x61\x84\xba\xbd\x27\xba\xb8\x40\x16\x99\x8d\x8e\x19\x7b\xaf\x93\xc8\x48\xe7\xa4\xd4\xec\xbe\x3d\x44\xfb\x43\x71\x49\x6b\x17\xa5\xc5\xab\x11\xb2\x5e\xef\xa2\xd5\xea\xf5\x2e\xcc\x75\xe5\xa7\x9e\xbb\xbf\xa6\x51\x14\x84\x4a\xd4\xa0\x9d\x09\xc1\x85\x01\xf9\xc4\x83\xdb\x7c\xe1\x8f\xf8\xe2\xd3\x6d\x1e\x1c\x8e\x32\x93\xc7\xc3\x72\x51\xdc\x6b\x84\xd2\x89\xf3\xb3\xbd\xf8\xca\x43\x02\x6b\xe5\xad\xa8\xff\xb6\x0e\x9a\xfb\xc7\xc7\xae\x69\x36\xea\x8d\x6a\xed\xa8\x9e\xed\xbf\x57\x3e\xaa\x1b\xee\x95\x37\x75\xf9\xde\xa8\x1f\x18\x07\xb0\xa7\x7f\x6a\xcd\x83\xb8\x7c\x0f\xa4\xd6\x15\xde\x00\x69\xcd\xae\x7f\x74\xbc\xe7\x1f\x9c\x6d\x44\x88\x94\x28\x54\x1f\x7f\x1f\x13\xaf\xa8\xdb\x10\x03\x96\xc6\x2c\xa9\xe0\xf3\x93\xc9\x24\x5b\x62\xe4\x0d\xc8\xcf\x14\x2d\xf9\x52\x69\x89\xea\x20\x53\x19\x5b\xa8\x96\x63\x2b\xcc\x07\xdb\x4c\x12\xe4\x83\x65\x4e\xa6\x79\xe0\x73\x2c\x49\xb6\xc6\xbc\xcb\xb9\x9e\x73\xba\xbb\xdc\x9b\x35\x40\x2d\xe8\xd0\x3f\x5f\xae\xe4\x19\x0c\x59\xa1\x62\x2b\x3c\x88\x65\xef\x5a\xb6\xa3\xd5\x10\xfd\xfb\x74\x4d\x7a\x2f\xfa\xdd\xf9\xd0\xb0\x8e\xad\x75\x08\x3f\x45\xd7\x6e\x7a\xf5\x74\xb0\xe6\xed\x63\xf3\x4a\x13\xce\x15\xa0\xc3\x7d\x1f\x99\x92\x61\x3b\xa1\x3b\x11\x94\x2a\xc8\xe4\x53\x1b\xc5\x48\xd7\x0d\xae\xe0\x3e\x0c\x95\x1a\xb5\x2a\x15\xc5\xb9\x27\x4d\x8a\xca\x35\xb9\x18\x54\x86\xca\xf7\x2a\xc2\xb5\x75\xd9\x52\x18\x91\x01\x96\xeb\x87\x33\x5c\x5e\x9a\x6b\x13\x53\xfb\x92\x44\x85\x71\x61\xa1\x33\x8b\x1b\xe3\xa0\x65\xa1\x92\x27\x82\x6b\xbb\xd6\x42\x2c\x95\x37\x4d\x3f\xee\xfb\xe6\x9b\x97\x6c\x65\x1e\x77\x40\xab\x5a\xa9\x58\x1f\x95\x30\x0a\x37\x45\x74\xc0\x7a\x88\xed\x62\x83\x6c\x2f\x9f\x29\x73\xc2\xaa\x5c\xc2\x58\x6a\x19\xb2\xb5\x97\x06\x10\xa9\xb7\xfc\x70\xdf\xd2\x33\xdd\x9c\x76\x7b\xe5\x4e\xbb\x77\x76\x17\xd5\xf8\x89\x8b\xbf\xfe\xfa\xab\x79\x16\x25\x94\x0e\xf7\xf3\x51\xaf\x65\x21\x78\x7c\x82\xa2\xac\x27\x0b\x8e\x1b\x16\x12\x1e\xb8\x3c\xf1\x2c\x9d\x1b\x46\x63\x31\xe2\x12\xe5\x6a\xe6\x6d\xbd\x17\xc6\xdb\xb4\x2d\x50\x8f\x6b\x99\xa0\x1e\xd2\x21\x2f\xee\x9c\x76\x7b\xad\x99\x64\xb8\x53\x32\x60\x67\xce\xca\x9d\x35\x2b\xe0\x59\xed\x48\x30\xbc\xba\xfc\xa6\x76\xcc\xe3\x31\x13\x5f\x6d\x5b\x29\x8e\x59\xcd\x84\x67\xea\x48\x0b\x81\x55\xcf\xd0\x93\x86\x8a\xbe\xa8\x2b\xdd\x36\x7b\x3e\x11\x60\x1d\xd6\xdd\x8d\x64\x2b\x40\xdd\x84\x67\x3a\xac\x89\x30\x79\x96\xe3\x9a\x50\xd7\x17\x1e\xd8\x84\x4a\x9e\xe5\xc8\x26\x54\xf5\x79\x87\x36\x2f\xbd\x80\xe6\xac\x5a\xbe\x90\x9f\x9f\x68\x8b\x86\x2c\x81\x28\x43\xb8\xfd\xd9\xd5\x7c\xd9\xfe\xf7\xa6\xb5\xbb\x64\xc1\x66\xa3\x32\xc3\x56\x1d\xa2\x35\x8c\xcd\x2c\xd3\xac\x0a\x8b\x3c\xce\xac\xd1\xe0\x4d\xe7\xae\x45\x1e\x17\x06\xad\xdd\xd9\xb1\x80\x3d\x33\xaa\x10\x14\xf9\x80\x2c\xcd\x49\x16\x79\xac\x2d\xe8\x71\x39\x5f\xa2\x7e\x46\xd1\xf8\x71\xe6\xbe\x01\x02\xe5\x48\x17\x01\xf7\xe8\x3d\x94\x4c\x00\xd3\x7c\x11\xa6\xcd\x80\x93\xc6\x38\xe3\xd4\x0b\x6e\x1b\x59\xd0\x32\xc4\x5f\x18\x7e\x11\x6b\xb2\x64\x48\x80\xc9\x86\x6d\x96\xf9\xbd\xec\x41\x97\xa6\xe4\xbb\xf3\x8e\xae\xed\x40\x2a\xa2\x50\x86\x4d\x7f\xb4\x2c\xa2\x97\x04\x3a\x31\x86\x2c\x5a\x2c\xd2\xc2\xd3\xac\x24\x69\x53\x99\xdd\xa9\xe6\x32\xa4\x39\x57\x30\xb6\x3d\xc9\x81\xfa\x23\x8f\xda\x54\x79\x0f\xa0\xab\x62\xca\x99\x5c\xb5\x0f\x04\xcb\x89\x32\xd0\xf5\xdd\xd8\x23\x42\x97\x54\x7e\xb2\x84\x34\xa1\x1d\x2a\x6d\x3e\x16\x64\x80\x12\x92\x5a\x34\x4e\xe0\xc1\xfb\x8d\xc0\x2e\xce\x52\xfd\xf3\x46\x2d\x7f\x4b\x73\x68\xd6\x17\x5f\x31\x7c\xed\x9c\x66\x2d\x32\x9e\x58\xf6\x37\x49\xaf\x4b\x4d\xf9\x5e\x2c\x59\x81\x49\x01\x36\xfc\x99\xa6\x09\xf0\x0b\x9f\xe0\xfd\xca\x82\x20\xd5\xb4\x6d\x95\xb7\x78\xbc\x9b\xea\xd8\xfe\x9c\x37\x39\xde\xbd\x79\x73\xda\x6d\x97\x4f\xcf\xce\x7b\x77\xc0\xdd\x8c\x39\x1b\xce\x7c\xa3\x07\xdf\xbe\xbb\xba\xbe\xba\x7b\x91\x0c\x3d\x65\x8b\x91\x99\xb2\x9a\x4d\x56\x04\x67\x44\x44\xf8\x36\x36\xf4\xf4\x45\xd8\xa3\xfb\xf2\x65\x56\x96\xcb\x9b\xed\x7c\x9f\xb5\x73\xe6\x0b\x93\xe8\xab\x09\x1d\x54\xc2\x32\x2f\xa0\x25\x4f\xc2\x98\xc9\xa4\x16\x02\xf1\x74\xb7\x98\x10\x43\xe0\x80\x08\x27\x38\xf8\xe4\xee\xda\xc4\xd4\x4b\xd3\x51\x94\xba\x83\xb7\xde\xad\x94\x17\x4f\x78\xfd\xfd\x32\xd9\xec\xaf\x3f\x17\x81\xff\xeb\xcf\x65\xdb\xf7\xe2\xf1\xdc\x86\x23\x0d\x9b\x7d\x45\x7e\x07\x67\x8c\x3b\xdf\xb8\x73\x8e\x8d\xf8\xa6\x6d\xf3\x2a\x24\x56\xf5\xcc\x5f\x87\x50\xa1\x15\xdb\x35\x96\x2f\x0a\xc3\xcb\x76\x3e\xab\xac\x58\xd7\xf6\x7c\x45\x38\xbe\x83\xf2\x3c\x42\xe4\x7b\xa8\xcd\x23\x4c\xfe\x5f\x98\xff\xad\x0a\xf3\x98\x60\xdf\xba\x2a\x5f\x67\xc7\x77\x61\xc6\x36\x68\x3c\xef\x52\xfb\xbc\xda\xf3\x6b\xe2\xf1\x8c\x15\x66\xf4\x2d\x7d\xb6\xc2\x8c\x52\xc1\xc6\x57\x1a\x7f\x8f\xda\x31\x44\xf4\x89\x85\xe3\xd2\x4a\x54\x12\x16\x7f\x13\xe2\xc2\x49\x6a\xe2\xbf\x9a\xd5\xe3\x56\xeb\x6c\xaa\x34\xa2\x9c\x9d\x13\x5b\x71\xf1\x60\x32\x9c\x84\xd2\x5a\xcb\xa2\x7c\x27\xf5\x66\x56\x34\xfe\xb4\x78\xf1\x11\xdd\x32\x98\x23\x22\x24\x16\xf3\x95\xd3\xce\x89\xe4\x3e\x06\xbf\x54\x61\xa5\xd3\x3d\xe9\x71\x1f\xa1\x47\x15\x26\xdf\x6c\x4d\xb5\x16\x74\xcd\xc8\x1f\x9c\xaa\xe2\x4e\xa4\xbe\xed\x29\xad\x6f\x27\xfc\x2c\x36\x33\x3d\x71\x1c\x2d\x18\x3a\x53\xc4\xa9\xca\xdc\xdc\x0c\x54\x00\x7b\xf8\x25\xc5\x57\x70\x9e\xe1\xa4\x78\x73\xb3\x73\xda\xd9\x31\x60\x47\xbb\xbf\x73\x67\x40\x72\x4d\x55\x74\xdd\xe9\xee\x18\x41\x23\x7b\x77\xb7\xdc\xf8\x5c\x40\xda\x4e\x60\x3c\x74\xdf\x5f\x5c\x80\xf5\xa0\x10\x7a\xed\x6e\xf6\x83\x8d\x1c\xcc\x38\xc9\xc6\x9e\xd7\xd7\x72\xfd\x5e\xbb\x9b\x65\x63\xd1\x16\x54\x51\x9b\x78\xf1\x27\xed\xf1\x97\xcc\x5b\xd2\xe4\x7f\x01\x00\x00\xff\xff\x3c\x67\x0d\x81\x8c\x33\x00\x00")

func dataPatches193P55101_strict_hostname_checkingPatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches193P55101_strict_hostname_checkingPatch,
		"data/patches/1.9.3-p551/01_strict_hostname_checking.patch",
	)
}

func dataPatches193P55101_strict_hostname_checkingPatch() (*asset, error) {
	bytes, err := dataPatches193P55101_strict_hostname_checkingPatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/1.9.3-p551/01_strict_hostname_checking.patch", size: 13196, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P001_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P001_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P001_readlinePatch,
		"data/patches/2.0.0-p0/01_readline.patch",
	)
}

func dataPatches200P001_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P001_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p0/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P19501_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P19501_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P19501_readlinePatch,
		"data/patches/2.0.0-p195/01_readline.patch",
	)
}

func dataPatches200P19501_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P19501_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p195/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P24701_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P24701_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P24701_readlinePatch,
		"data/patches/2.0.0-p247/01_readline.patch",
	)
}

func dataPatches200P24701_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P24701_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p247/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P35301_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P35301_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P35301_readlinePatch,
		"data/patches/2.0.0-p353/01_readline.patch",
	)
}

func dataPatches200P35301_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P35301_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p353/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches200P45101_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x61\x4f\xdb\x30\x10\xfd\xee\x5f\x71\x0a\x93\x48\xe6\x24\x24\xb4\xa3\x89\xa0\x52\x10\x63\x03\x0d\x01\x02\xb6\xaf\x96\x89\x2f\xad\x45\xea\x44\xb6\x83\xca\xbf\x9f\x1c\xb5\x55\x3b\x9a\xee\x8b\x5b\x3d\xbf\x7b\x77\xf7\xfc\x22\x64\x55\x41\x14\xcd\xa4\x05\x5c\xda\x13\x8d\x5c\xd4\x52\xe1\x09\x2e\x6d\xd9\xa8\x2a\xd6\xaf\x43\x38\x91\x4a\xe0\x12\xc6\xf9\x69\x92\x8e\x26\x71\x9c\x61\x96\x9e\x7e\x1b\x41\x9a\x24\x67\xe3\x31\x89\xa2\x68\xb0\x92\x52\x3a\x78\x57\x14\x10\xa5\x79\x78\x06\x34\xcd\xc3\x34\x81\xa2\x00\x81\x15\xac\xa9\xf1\x9c\xbf\x23\xab\x3a\x55\xfa\xee\x08\x08\x00\x68\xb4\x9d\x56\x60\xba\x16\x75\x8f\x86\x30\x47\x2e\x50\x9b\x80\x00\x2a\x41\x08\xfd\x2c\x61\x3f\x5a\xf4\xdd\x11\x10\xfa\x8f\x84\x43\xb7\x24\xa8\x93\xa0\x04\x84\xd4\xcc\x4d\x29\x67\xfe\x71\xd9\x69\x83\xe6\x38\xd8\x45\xd5\x7e\xd8\xa2\x5e\x94\xbc\x3d\x0e\xfa\xe5\xf2\x51\x38\x06\x9a\x4f\xc2\xdc\xed\xb6\x67\x2f\x4f\xe3\xa2\x79\x47\x36\x97\xc6\x36\xfa\xc3\x0b\xc8\x5e\x56\x59\x23\xd7\xff\x23\xe9\x9a\x69\x14\xd2\xb4\x35\x3f\xc4\x91\xca\xa0\xb6\xcc\xe2\xd2\x7a\x01\xa1\x84\x76\xaa\x46\x63\xf6\x59\xe6\xe8\xf3\xa6\x79\xeb\x8b\x59\x4f\x07\xf8\x22\xb0\x32\x70\x71\x01\x5e\xf4\x7d\xf7\x7e\xfa\xa3\x53\xa5\x95\x8d\xf2\x36\x3e\x96\x1a\xb9\x45\xb6\xe0\x6f\x58\xc9\xda\x29\xae\xba\x78\x01\x19\x8a\xe3\x66\x90\x72\x08\x5f\xc5\x71\x84\x93\x0a\x91\xc7\xf1\x38\x3b\x7d\xad\xb2\x64\x30\x8e\x5b\x95\x9f\xe2\xb8\x75\xd7\xc7\x31\xcb\x46\xe1\x04\xe8\xea\xb7\x28\xe0\x56\x49\xcb\xd6\x2c\x3f\x20\x2e\x85\x00\xba\x66\xdc\x5a\x5c\xb4\x16\x05\x2b\x9b\x45\x5b\xa3\xdb\xbc\x77\xc2\xfd\x81\xe9\xc6\xd0\xc3\xc4\x73\x02\x47\xb2\x72\xb9\x97\x0a\x85\x7f\x73\xf9\xe7\x9a\x3d\xdd\xb1\xc7\xa7\x6b\x76\x7b\xff\xf8\xfb\x85\xdd\x3c\x3c\xfc\x0a\x48\xb4\x6a\xda\x6a\x64\x52\xb5\x9d\xed\x8d\x87\x29\xf8\x6b\xd3\xe1\x6b\xb0\xe9\xb8\xcb\x3a\x77\xcf\x36\x50\xbd\xfb\x82\x87\x34\xe0\x08\x95\x90\x55\x3f\xae\xfb\xc4\xd6\x93\x5e\x5d\xbe\x5c\xdd\xb0\xe7\xdb\x9f\xf7\x97\x77\xcf\x1b\x73\x4a\x6e\xcb\x39\x33\x72\xa6\x78\x6d\x60\x0a\xc9\x39\xf9\x1b\x00\x00\xff\xff\x71\xae\x9c\xc9\x7f\x04\x00\x00")

func dataPatches200P45101_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches200P45101_readlinePatch,
		"data/patches/2.0.0-p451/01_readline.patch",
	)
}

func dataPatches200P45101_readlinePatch() (*asset, error) {
	bytes, err := dataPatches200P45101_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.0.0-p451/01_readline.patch", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches21001_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xeb\x4f\xdb\x3e\x14\xfd\xfc\xf3\x5f\x71\x15\x7e\x52\x93\xe5\xb1\x3e\xc2\x23\x83\x4a\x65\x3c\x56\x34\x04\x88\xb2\x7d\xb5\x4c\x7c\x43\x2d\x52\x27\xb2\xdd\xae\xfc\xf7\x93\x43\x13\x16\xd4\x56\xb0\x69\xd2\xfc\x21\xb1\x6e\xce\x3d\xf7\xe4\xde\x63\x5f\x48\x8e\xcb\x4f\x80\x4b\xf3\x51\x21\xe3\xb9\x90\xd8\x6c\xa2\x94\x0c\xff\x7c\x91\x30\x0c\x37\xf1\xff\xe7\x2a\x5c\x08\x2d\x0a\x09\xf1\x6e\xbf\x1f\x7b\xc4\xf7\xfd\x37\x82\x77\x3d\x32\x1a\x41\xd8\x4b\xf6\xe3\x60\x1f\xfc\xd5\x7b\x34\x22\x40\xc0\x2e\x95\x53\x66\x0c\xce\x4a\x83\x9c\xa6\xc5\xac\xcc\xd1\x88\x42\xd2\x6c\x2e\x53\xbb\x81\x21\xd4\xdc\xdb\x81\x87\x04\x76\x44\x06\x1c\x33\x21\x91\xbb\xe3\xe3\xef\x67\xf4\xf6\x92\xde\xdc\x9e\xd1\x8b\xab\x9b\x6f\x77\x74\x7c\x7d\xfd\xd5\x23\xe1\xaa\x68\xa9\x90\x0a\x59\xce\x0d\x9d\x16\xc5\x23\x0c\xc1\x3d\xaf\x2b\x7e\xf0\x9a\x8a\x6d\xd4\x21\xf1\x37\x66\xab\xbc\xda\x56\x72\xa8\xd9\xc6\x01\x3b\x28\xb9\xc8\x2a\xb9\x1c\x33\xa8\x95\x9e\x1c\xdf\x9d\x8c\xe9\xe4\xe2\xcb\xd5\xf1\xe5\xa4\x69\x4e\xca\x4c\x3a\xa5\x5a\x3c\x48\x96\x6b\x18\x42\xf7\x90\xac\x33\x03\x2e\x4d\x5a\xc8\x2c\x52\xf7\x7f\xc7\x0c\x2f\xfc\xed\xf9\x0e\x92\x35\x66\xd8\x04\x8e\xbb\xb5\x19\x82\x3d\x6b\x85\xa0\xd7\xad\x9c\x00\xa0\xd0\xcc\x95\x04\x3d\x2f\x51\xb9\xb6\x85\x01\x4c\x91\x71\x54\xda\x23\x80\x92\x13\x20\xbe\xed\x55\x63\xb3\x29\x5b\x20\x35\x4f\x25\xba\xf6\xe1\xd9\xc1\xb4\x38\x6c\xf4\x17\x0e\xdf\x72\xf8\x04\xb8\x50\xd4\x4a\x13\x0f\x6e\x27\x9d\x2b\x8d\xba\xe3\xb5\xa3\x72\x7d\xd8\xa0\x9a\xa5\xac\xec\x3c\xff\x40\x12\x07\x31\xf8\xc9\x41\x70\x50\xe9\x6f\xab\xb2\xf2\x5d\x47\xe5\x54\x21\x17\xba\xcc\xd9\x93\xe3\x6d\xc4\x08\xa9\x51\x19\x6a\x70\x69\xb6\xa0\x38\xe6\x68\xb0\x46\xf9\x73\x99\xa3\xd6\xeb\x9a\xe1\xb4\x6d\xe8\x54\x8d\xf9\xff\xf4\xec\x7c\x02\x47\x47\xe0\x84\xa7\xed\xef\xc3\xda\xf3\x4e\xd3\xa1\x54\x21\x33\x48\x67\xec\x11\x33\x91\x5b\xc6\x55\x15\xc7\xfb\xa7\x8c\x17\xf7\xdf\x63\xbc\xc1\x6a\x6e\x95\xf1\x92\x24\x48\xb6\xcd\xed\x77\x66\x02\xef\x9c\xc9\x0e\xbc\xba\x30\x84\x06\xb6\x60\x22\x67\xf7\x39\x82\x16\x32\xc5\x86\x2b\x8c\xa3\x3e\xb8\xfd\x6e\xb7\xe7\x45\xcf\xb9\xcd\x55\x25\x6c\xc5\x59\xb1\x40\x0e\xcc\xbc\x24\xec\x45\x03\x9b\xd0\x8b\xeb\x84\x71\xf1\x03\x17\xa8\x02\x40\x2e\x8c\x85\x80\x7b\x85\xe6\xf3\xe4\x14\xf6\xa2\x5e\x34\x08\xa0\x02\x03\x2f\x50\xcb\x8e\x01\x2b\xfe\x95\xc0\xc8\x1e\xd3\x37\x39\xc9\x9e\xd7\x9f\x01\x00\x00\xff\xff\xdd\x85\xa5\xd3\xb0\x06\x00\x00")

func dataPatches21001_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches21001_readlinePatch,
		"data/patches/2.1.0/01_readline.patch",
	)
}

func dataPatches21001_readlinePatch() (*asset, error) {
	bytes, err := dataPatches21001_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.1.0/01_readline.patch", size: 1712, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPatches21101_readlinePatch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\xeb\x4f\xdb\x3e\x14\xfd\xfc\xf3\x5f\x71\x15\x7e\x52\x93\xe5\xb1\x3e\xc2\x23\x83\x4a\x65\x3c\x56\x34\x04\x88\xb2\x7d\xb5\x4c\x7c\x43\x2d\x52\x27\xb2\xdd\xae\xfc\xf7\x93\x43\x13\x16\xd4\x56\xb0\x69\xd2\xfc\x21\xb1\x6e\xce\x3d\xf7\xe4\xde\x63\x5f\x48\x8e\xcb\x4f\x80\x4b\xf3\x51\x21\xe3\xb9\x90\xd8\x6c\xa2\x94\x0c\xff\x7c\x91\x30\x0c\x37\xf1\xff\xe7\x2a\x5c\x08\x2d\x0a\x09\xf1\x6e\xbf\x1f\x7b\xc4\xf7\xfd\x37\x82\x77\x3d\x32\x1a\x41\xd8\x4b\xf6\xe3\x60\x1f\xfc\xd5\x7b\x34\x22\x40\xc0\x2e\x95\x53\x66\x0c\xce\x4a\x83\x9c\xa6\xc5\xac\xcc\xd1\x88\x42\xd2\x6c\x2e\x53\xbb\x81\x21\xd4\xdc\xdb\x81\x87\x04\x76\x44\x06\x1c\x33\x21\x91\xbb\xe3\xe3\xef\x67\xf4\xf6\x92\xde\xdc\x9e\xd1\x8b\xab\x9b\x6f\x77\x74\x7c\x7d\xfd\xd5\x23\xe1\xaa\x68\xa9\x90\x0a\x59\xce\x0d\x9d\x16\xc5\x23\x0c\xc1\x3d\xaf\x2b\x7e\xf0\x9a\x8a\x6d\xd4\x21\xf1\x37\x66\xab\xbc\xda\x56\x72\xa8\xd9\xc6\x01\x3b\x28\xb9\xc8\x2a\xb9\x1c\x33\xa8\x95\x9e\x1c\xdf\x9d\x8c\xe9\xe4\xe2\xcb\xd5\xf1\xe5\xa4\x69\x4e\xca\x4c\x3a\xa5\x5a\x3c\x48\x96\x6b\x18\x42\xf7\x90\xac\x33\x03\x2e\x4d\x5a\xc8\x2c\x52\xf7\x7f\xc7\x0c\x2f\xfc\xed\xf9\x0e\x92\x35\x66\xd8\x04\x8e\xbb\xb5\x19\x82\x3d\x6b\x85\xa0\xd7\xad\x9c\x00\xa0\xd0\xcc\x95\x04\x3d\x2f\x51\xb9\xb6\x85\x01\x4c\x91\x71\x54\xda\x23\x80\x92\x13\x20\xbe\xed\x55\x63\xb3\x29\x5b\x20\x35\x4f\x25\xba\xf6\xe1\xd9\xc1\xb4\x38\x6c\xf4\x17\x0e\xdf\x72\xf8\x04\xb8\x50\xd4\x4a\x13\x0f\x6e\x27\x9d\x2b\x8d\xba\xe3\xb5\xa3\x72\x7d\xd8\xa0\x9a\xa5\xac\xec\x3c\xff\x40\x12\x07\x31\xf8\xc9\x41\x70\x50\xe9\x6f\xab\xb2\xf2\x5d\x47\xe5\x54\x21\x17\xba\xcc\xd9\x93\xe3\x6d\xc4\x08\xa9\x51\x19\x6a\x70\x69\xb6\xa0\x38\xe6\x68\xb0\x46\xf9\x73\x99\xa3\xd6\xeb\x9a\xe1\xb4\x6d\xe8\x54\x8d\xf9\xff\xf4\xec\x7c\x02\x47\x47\xe0\x84\xa7\xed\xef\xc3\xda\xf3\x4e\xd3\xa1\x54\x21\x33\x48\x67\xec\x11\x33\x91\x5b\xc6\x55\x15\xc7\xfb\xa7\x8c\x17\xf7\xdf\x63\xbc\xc1\x6a\x6e\x95\xf1\x92\x24\x48\xb6\xcd\xed\x77\x66\x02\xef\x9c\xc9\x0e\xbc\xba\x30\x84\x06\xb6\x60\x22\x67\xf7\x39\x82\x16\x32\xc5\x86\x2b\x8c\xa3\x3e\xb8\xfd\x6e\xb7\xe7\x45\xcf\xb9\xcd\x55\x25\x6c\xc5\x59\xb1\x40\x0e\xcc\xbc\x24\xec\x45\x03\x9b\xd0\x8b\xeb\x84\x71\xf1\x03\x17\xa8\x02\x40\x2e\x8c\x85\x80\x7b\x85\xe6\xf3\xe4\x14\xf6\xa2\x5e\x34\x08\xa0\x02\x03\x2f\x50\xcb\x8e\x01\x2b\xfe\x95\xc0\xc8\x1e\xd3\x37\x39\xc9\x9e\xd7\x9f\x01\x00\x00\xff\xff\xdd\x85\xa5\xd3\xb0\x06\x00\x00")

func dataPatches21101_readlinePatchBytes() ([]byte, error) {
	return bindataRead(
		_dataPatches21101_readlinePatch,
		"data/patches/2.1.1/01_readline.patch",
	)
}

func dataPatches21101_readlinePatch() (*asset, error) {
	bytes, err := dataPatches21101_readlinePatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/patches/2.1.1/01_readline.patch", size: 1712, mode: os.FileMode(420), modTime: time.Unix(1479486320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/Dockerfile-centos.template": dataDockerfileCentosTemplate,
	"data/Dockerfile-xenial.template": dataDockerfileXenialTemplate,
	"data/Dockerfile.template": dataDockerfileTemplate,
	"data/patches/1.0.0/01_for_tests": dataPatches10001_for_tests,
	"data/patches/1.0.0/02_for_tests": dataPatches10002_for_tests,
	"data/patches/1.9.3-p551/01_strict_hostname_checking.patch": dataPatches193P55101_strict_hostname_checkingPatch,
	"data/patches/2.0.0-p0/01_readline.patch": dataPatches200P001_readlinePatch,
	"data/patches/2.0.0-p195/01_readline.patch": dataPatches200P19501_readlinePatch,
	"data/patches/2.0.0-p247/01_readline.patch": dataPatches200P24701_readlinePatch,
	"data/patches/2.0.0-p353/01_readline.patch": dataPatches200P35301_readlinePatch,
	"data/patches/2.0.0-p451/01_readline.patch": dataPatches200P45101_readlinePatch,
	"data/patches/2.1.0/01_readline.patch": dataPatches21001_readlinePatch,
	"data/patches/2.1.1/01_readline.patch": dataPatches21101_readlinePatch,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"Dockerfile-centos.template": &bintree{dataDockerfileCentosTemplate, map[string]*bintree{}},
		"Dockerfile-xenial.template": &bintree{dataDockerfileXenialTemplate, map[string]*bintree{}},
		"Dockerfile.template": &bintree{dataDockerfileTemplate, map[string]*bintree{}},
		"patches": &bintree{nil, map[string]*bintree{
			"1.0.0": &bintree{nil, map[string]*bintree{
				"01_for_tests": &bintree{dataPatches10001_for_tests, map[string]*bintree{}},
				"02_for_tests": &bintree{dataPatches10002_for_tests, map[string]*bintree{}},
			}},
			"1.9.3-p551": &bintree{nil, map[string]*bintree{
				"01_strict_hostname_checking.patch": &bintree{dataPatches193P55101_strict_hostname_checkingPatch, map[string]*bintree{}},
			}},
			"2.0.0-p0": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P001_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p195": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P19501_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p247": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P24701_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p353": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P35301_readlinePatch, map[string]*bintree{}},
			}},
			"2.0.0-p451": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches200P45101_readlinePatch, map[string]*bintree{}},
			}},
			"2.1.0": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches21001_readlinePatch, map[string]*bintree{}},
			}},
			"2.1.1": &bintree{nil, map[string]*bintree{
				"01_readline.patch": &bintree{dataPatches21101_readlinePatch, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

