// Code generated by go-bindata.
// sources:
// data/Dockerfile-centos.template
// data/Dockerfile-lucid.template
// data/Dockerfile.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDockerfileCentosTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\xb2\x87\x3d\x6c\x18\x61\xd1\x62\x11\x07\xf0\x61\x91\x34\x45\xd0\x36\x59\x38\x4d\x7d\xe8\xf6\x40\x89\x23\x9b\x35\x3f\x04\x92\x8a\xe3\x6c\xf3\xdf\xfb\x44\x49\x8e\xbc\x1f\x06\x2c\x72\xde\x0c\x87\xc3\x99\x37\x73\xbd\xbc\xfb\x83\xbe\x7c\x39\xbb\xd2\x31\x05\xff\xf2\x32\x5b\x3e\xdc\xd2\xbe\xb5\xd4\x36\x4a\x26\x26\xb1\x3f\x20\xda\xc5\x24\x8d\x01\x44\xeb\xaa\xea\xfe\xa2\x7a\xf7\x8e\xac\xdc\x32\xc9\x36\xf9\xbc\xd9\x72\x70\x6c\x84\xe2\x47\x36\x14\x1a\x2b\xca\x56\x1b\x45\x9f\x67\x84\xdf\xda\xe8\xb2\x1a\x74\xd8\xd6\xb5\x1e\x84\xb5\x2a\xed\xb0\x75\x55\x1b\x22\xc7\x41\xea\xcf\x05\x96\xca\x68\xc7\x03\xe8\x1b\x76\x31\x9a\x57\x47\x7b\x69\x47\xe9\x19\xe2\xf1\xd9\xb6\xdc\xe7\xcf\x18\x13\xb6\x6b\xb6\x91\x70\x8f\xa1\x24\x43\x7e\xdf\xdf\x27\x45\x1b\x43\x51\x6a\x57\x40\x79\x72\x4a\x27\xc3\x6b\xbb\x6d\xdd\x64\x44\x08\xa8\x95\x0e\x8b\xd1\xb4\x07\x9d\x17\x41\xf9\xea\x55\xd0\x27\xff\x64\x9f\xf9\x82\x2e\xb5\x7e\xe7\x8c\x97\xea\x21\x98\x97\x97\xff\x70\x23\xf9\xa7\xe7\x4b\x2a\x92\x6d\x66\xab\xbb\xe5\x6f\x57\x37\xcb\x2c\x14\x39\x4a\x1c\x58\x62\xfd\x8b\x43\xd4\xde\x0d\x05\xb9\xbc\xfe\xfd\xe3\xaf\xf7\x8b\xb7\xc2\xca\x50\x6d\x16\x4f\xe7\x1f\xc4\x87\x9f\x49\xdc\xfd\x44\xa2\xc6\x95\xb5\x8c\x09\xaa\xb4\x21\xb1\x06\xb4\x46\x3a\x49\xac\x72\xad\x56\xfc\x94\x82\xc4\x0a\xb3\xd6\xb5\x91\x95\x68\x64\x90\x96\x13\x87\x1e\x85\xc8\x2e\x6d\x18\x49\xef\x01\xe3\xdd\x3a\x7f\x7a\xd1\xea\x18\x35\x90\x5a\xb3\x51\x42\x3b\x9d\xb4\x34\xfa\x19\xf1\x41\x3f\xb8\x7c\x94\x41\xcb\xd2\x80\x2e\xab\xc6\x6b\x07\xdf\x02\x48\x17\xcf\x6a\x87\x95\x05\xc8\x05\x1f\xdd\x09\xc5\x95\x41\x00\x09\x8f\x13\xb2\xee\x2c\x91\xe7\xc4\x16\x31\x40\xab\x6d\x63\x74\xa5\x93\xa8\x5b\x57\x65\x9b\x89\x7d\x3e\xdd\x04\xae\x60\xaf\xa6\x8a\x38\xbe\xa4\xda\x42\x51\xea\xd4\xc7\x5a\x79\xdb\x48\x78\x8d\x49\x2d\x74\xf4\xf3\xf3\xf9\xfc\xe2\xfd\x7c\x3e\x27\x64\xed\xd3\xcd\xe5\x5b\x3a\x2b\x2a\xef\x6a\xbd\x6e\x03\x67\xb6\x08\x01\xef\xb5\x7e\x5a\x14\xbe\x49\xb9\x1c\x5f\x57\x63\x30\x63\xd7\xbd\x56\xc4\x0d\x72\xa7\x06\x4c\xe9\x98\xc1\x81\x38\x02\x9c\x38\xb6\xee\x38\x20\x02\x1b\x84\xfc\xc8\xb3\x37\x74\xcf\x1d\x0d\x93\x27\xef\xcc\x9e\x64\x5d\x73\x95\x28\x7a\xcb\xf4\xfe\x6c\x4e\x91\x83\x46\x45\x70\x3b\x96\x53\x2a\xdb\x44\x28\x12\xe1\x4d\x60\x1e\x2e\xcd\xdd\x16\x13\x37\x17\xb3\x37\x70\xd6\xfd\x3a\xa6\x64\x58\xfc\x7b\x7e\xe8\xd6\xab\x5f\xee\xff\x04\xc3\x16\x99\x61\x60\x72\xb6\x4e\x1b\xe4\x25\x48\xc7\xd9\x67\x3e\x83\x8d\xeb\x77\xc3\xc9\x53\xda\xc9\x48\x65\xf0\x5b\x76\x67\x74\x8f\xba\xa4\x84\x1a\x92\x4e\x98\x0d\x30\x4a\xbe\x73\xb4\xf3\x88\xb4\x63\x54\xca\xb1\x59\xe9\x54\xa4\x9d\x0f\xdb\x48\x35\xe2\xbc\x98\x4d\x82\x42\x32\x6f\x5b\x7b\xf9\xe9\x61\x60\xf5\xf4\xb6\x6f\xe3\x7c\xed\x8d\x6c\x0c\x68\xe8\x68\x11\x09\x5d\x38\x0a\xa9\x9b\x32\xa3\xe0\xe8\xbb\x3d\x34\xaa\x65\xd7\x8e\x1f\xd1\x41\xaf\xd0\x23\xfd\xc0\x18\xf0\x0d\xd8\x99\xf9\x85\x78\xb3\xb1\x3a\x9a\x60\x9f\x47\xf0\x68\x94\x1d\xd0\xc9\x4c\x3b\x60\xdf\x1b\x6e\x80\xbf\x9a\x6f\x07\xfc\x78\xd0\x4d\xef\x9b\x4c\xbc\x03\xfc\xcd\xe8\x13\xfd\x90\x29\x26\xa9\x6b\xa8\xc0\xc3\xae\xb5\xe1\x5b\xcc\x80\xc3\x63\x41\xf7\xd9\xff\x01\x00\x00\xff\xff\xe2\x94\xb3\x2e\x0a\x06\x00\x00")

func dataDockerfileCentosTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileCentosTemplate,
		"data/Dockerfile-centos.template",
	)
}

func dataDockerfileCentosTemplate() (*asset, error) {
	bytes, err := dataDockerfileCentosTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-centos.template", size: 1546, mode: os.FileMode(420), modTime: time.Unix(1448756047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerfileLucidTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x41\x6f\xdc\x36\x13\xbd\xef\xaf\x18\x24\x40\x72\x09\x25\x38\x5f\x3e\xc3\x6b\x60\x03\x04\x76\x5d\x18\x6d\xed\xc0\xae\xeb\x4b\x2e\x94\x38\xd2\xb2\xa6\x48\x81\xa4\x6c\xaf\x53\xff\xf7\x3e\x52\xab\x5d\xd9\x49\xf7\xb0\x1a\x3e\xce\x0c\x1f\x39\x6f\xe6\xec\xea\xf2\x0f\xfa\xfe\xbd\x38\xd5\x21\x7a\xf7\xfc\xbc\xb8\xba\xb9\x20\xae\xd7\x8e\xde\x28\xae\x68\x1d\x63\x7f\x5c\x96\x81\xeb\xc1\xeb\xb8\x29\x86\x6a\xb0\x71\x28\x6a\xd7\x95\xa3\x49\x66\xa8\xb5\x12\x93\x03\x75\x52\xdb\x37\xf4\xf9\x33\x95\x1c\xeb\x52\xf6\xb1\x0c\x6e\xf0\x35\x87\xc2\xe0\x84\x9c\x1d\xa0\x68\x39\xd2\xd0\x2b\x19\xf9\x05\xa4\x6d\x88\xd2\x18\x12\x1b\xf2\x43\xb5\x39\x28\x96\xc5\x81\x68\x06\x20\xd5\xa0\x8d\x12\x1c\x02\xdb\xa8\xa5\xa1\x6f\x0b\xc2\xcf\xe8\xaa\x3e\x14\x8a\xef\x93\xd5\x34\x7a\x32\x5b\x55\x75\x93\x6d\xc1\x2c\x70\xf8\x7f\x5e\xef\xc2\x3c\x4b\x65\xb4\xe5\xc9\x2b\x04\x33\x99\x1b\xd9\x8d\xf6\x13\x16\x07\xed\xcb\x38\xd7\xb3\x4d\xbe\x3b\x7a\x33\xa2\xc9\x11\x87\x99\x7c\xa5\x64\x4c\xcf\xd7\x7b\xa7\x86\x3a\x6a\x67\x8b\xba\x29\x52\x40\xcb\x5d\x28\x9c\x6f\xcb\x69\xb1\x33\xc4\xc7\xe2\x53\xf1\xb1\x88\xed\x13\xfd\x13\xa5\x27\xf7\xf8\x74\x42\x65\xec\xfa\x31\xab\xca\xf6\x2b\x6f\x7a\xf7\x6e\x4f\x83\x02\xc7\xa1\x2f\x7c\x95\x03\xe0\x34\xa2\xd3\xd3\x36\x7d\x47\x42\x54\xda\x2a\xed\x57\xe5\x10\x7c\x09\x1b\x88\x75\xc2\x2b\x57\x6f\x2d\xbd\xbf\x43\x12\x87\x7b\xb0\xc6\x49\x75\xe3\xcd\xf3\xf3\x2b\x56\xb7\x97\x57\xbf\x9d\x9e\x5f\xed\x69\x09\x04\x5c\xe1\xfb\x17\xfb\x80\x1b\x6f\x25\x75\x72\xf6\xfb\x97\x5f\xaf\x57\xef\x45\x27\x7d\xbd\x5e\x3d\x1e\x1d\x8a\xc3\x4f\x24\x2e\xff\x47\xa2\xc1\x81\x8d\x0c\x11\x5b\x71\x4d\xa2\x05\xd4\xa2\x80\x24\x6e\xb3\x14\x6e\xf9\x31\x7a\x89\x2f\xdc\x06\x3b\x04\x56\xa2\x97\x5e\x76\x1c\xd9\x8f\x28\x96\x50\xc5\x9a\x51\xe5\x11\x30\xce\xb6\xf9\x6f\x5c\x76\x3a\x04\x0d\xa4\xd1\x0c\x0d\x69\xab\x93\x82\xf4\x13\xf8\x61\x7f\x9b\xf2\x5e\x7a\x2d\x2b\xc3\x40\x7a\xa7\x2d\x72\x0b\x20\x89\xcf\xed\x03\xbe\x2c\xd0\x1e\xc8\x91\x22\x14\xd7\x06\x04\x52\x39\x85\x6c\x92\x27\x5e\x36\x72\x07\x0e\xd8\xd5\x5d\x6f\x74\xad\x23\x64\x6b\x73\xc9\xc5\xcc\x3f\x47\xf7\x9e\x6b\xf8\xab\xf9\x46\x98\x6e\x52\xdf\x61\xa3\xd2\x71\xe4\x8a\x3e\xeb\x25\xb2\x86\xa8\x56\x3a\xb8\xe5\xd1\x72\x79\x7c\xb0\x5c\x2e\x09\xaf\xf6\xf5\xfc\xe4\x3d\x15\x65\xed\x6c\xa3\xdb\xc1\x73\xd6\xa8\x10\xc8\xde\xe8\xc7\x55\xe9\xd0\x7a\xa9\x1c\xaf\xab\xb1\x75\x63\x9b\x6e\x2b\xc2\x1a\x6f\xa7\xb6\x98\xd2\x21\x83\x5b\xa9\x88\x24\x87\x17\xde\x49\x03\xc2\xb3\x01\xe5\x7b\x5e\xbc\xa5\x6b\x86\x04\x29\x3a\x72\xd6\x6c\x48\x36\x0d\xd7\x91\x82\xeb\x98\xa0\x39\xe8\xd0\x6b\x54\x04\xa7\xe3\xf3\x01\x1d\x1c\x09\x45\x22\xdc\x09\x8a\xc3\xa1\x9d\xbc\x63\x0a\x91\xfb\xe3\xc5\x5b\x24\x4b\xbf\xa4\x94\x0c\x8b\xbf\x8f\x76\x8a\x3d\xfd\xe5\xfa\x4f\x28\x6c\x95\x15\x06\xf9\x66\xef\xb8\xc6\xbb\x78\x69\x39\xe7\xcc\x31\x30\xec\x68\x6d\x23\x3f\xd0\x83\x0c\x54\x79\x77\xc7\xb6\xa0\x6b\xd4\x25\x46\xd4\x90\x74\x9a\x3d\x70\x8a\x2e\x25\x7a\x70\x60\x9a\x14\x15\x33\xb7\x4e\x5a\x15\xe8\xc1\xf9\xbb\x40\x0d\x78\x1e\x2f\x66\xa4\xf0\x98\x17\x43\x77\xf2\xf5\x66\xab\xea\xf9\x69\x3f\xf2\xdc\xf7\x46\x76\x4e\x9d\x37\xce\x11\x11\x08\xdd\x37\x2d\x22\xa5\x49\xbb\x5d\x58\xfa\x69\x0f\x4d\xdb\x32\xb5\xe3\x17\x74\xd0\x1e\xba\xa7\xff\x70\x06\x7c\x0e\x75\x66\x7d\x81\x6f\x76\x56\xb3\x91\xf9\x6d\x06\x4d\xb3\x73\x8e\xed\x86\xe8\x1c\xfc\xc9\x34\x1d\x37\x5e\x0c\xd4\xf9\xc6\x34\x59\xe7\xd8\x6e\xc4\xee\xc0\x1f\x66\xad\x18\xe7\x4b\x39\x7b\xb5\x9e\x4a\xdc\xe9\x4c\x1b\xbe\x40\xfb\xef\xee\x09\xa5\x2f\xfe\x0d\x00\x00\xff\xff\xdf\x9a\xa4\x89\xc7\x06\x00\x00")

func dataDockerfileLucidTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileLucidTemplate,
		"data/Dockerfile-lucid.template",
	)
}

func dataDockerfileLucidTemplate() (*asset, error) {
	bytes, err := dataDockerfileLucidTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile-lucid.template", size: 1735, mode: os.FileMode(420), modTime: time.Unix(1448756247, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDockerfileTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x51\x53\xe4\x36\x0c\x7e\xdf\x5f\xa1\xe1\x1e\xee\x05\x6f\x86\xb9\x96\x61\x99\xd9\x87\x1b\x28\x1d\xa6\x2d\xdc\x2c\xa5\x3c\xf4\xfa\xe0\xc4\x4a\xd6\xc5\xb1\x33\xb6\xc3\x02\x57\xfe\x7b\x3f\x3b\xc9\x12\x7a\x74\x1f\x36\xd2\x27\x59\x96\xa5\x4f\xba\xd8\x5c\xff\x46\xdf\xbe\x2d\xcf\x75\x88\xde\xbd\xbc\x2c\x36\xb7\x57\x24\xbb\x28\x1a\x8e\xd4\x77\x4a\x46\x7e\x03\x69\x1b\xa2\x34\x86\xc4\x13\xf9\xbe\x7c\x3a\x5a\xae\x96\x9f\xa8\xec\xb5\x51\x82\x43\x60\x1b\xb5\x34\xf4\x75\x41\xf8\x19\x5d\x56\xc7\x42\xf1\x43\x92\xea\x5a\x4f\x62\xa3\xca\x76\x92\x6d\xd5\xfb\xc0\xe1\xc7\xac\xef\x8f\x79\x96\xca\x68\xcb\x93\x57\x08\x66\x12\x9f\x64\x3b\xc8\xcf\x50\x8e\x9a\xd9\x39\x44\x32\x39\xd5\x3f\x0f\x8a\x3e\xf8\xa2\xd4\xb6\x68\xb8\x3d\x38\xa4\x83\x31\xe9\x24\xd6\x5d\x46\x84\x80\x59\x69\xbf\x9e\x5c\x07\xd0\x3a\xe1\x95\xab\x5e\x15\x7d\xf0\x57\x8e\x99\x82\xe7\x32\xb9\x9d\x35\x4e\xaa\x5b\x6f\x5e\x5e\xfe\x89\xd2\x93\x7b\x7c\x3e\xa3\x22\xb6\xdd\xe2\xee\x7a\xf3\xcb\xf9\xe5\x26\x2b\x45\x2a\x8e\xc0\x81\x0d\xbe\x7f\xb0\x0f\xda\xd9\xb1\xb8\x67\x17\xbf\x7e\xfe\xf9\x66\xfd\x51\xb4\xd2\x57\xdb\xf5\xe3\xc9\xb1\x38\xfe\x81\xc4\xf5\x27\x12\x35\xae\xac\x65\x88\x30\xc5\x2d\x89\x06\x50\x83\x6a\x91\xb8\xcb\x25\xbf\xe3\xc7\xe8\x25\xbe\x70\xeb\x6d\x1f\x58\x89\x4e\x7a\xd9\x72\x64\x3f\xa0\x50\xd1\x82\x2d\xa3\xa4\x03\x60\x9c\x6d\xf2\xdf\xa0\xb6\x3a\x04\x0d\xa4\xd6\x8c\x86\x69\xab\x53\xbb\xf4\x33\xf2\x83\x7d\x0c\xf9\x20\xbd\x96\xa5\x61\x20\x9d\xd3\x16\xb1\x05\x90\x94\xcf\xdd\x0e\x5f\x16\x20\x0a\x62\xa4\x13\x8a\x2b\x83\x04\x22\x1e\x27\x64\x9d\x3c\x51\xe7\xc8\x2d\x72\x80\x55\xb7\x9d\xd1\x95\x8e\xa2\xee\x6d\x95\x7d\x66\xfe\xf9\x74\xe7\xb9\x82\xbf\x9a\x1b\xc2\xf4\x92\xea\x1e\x86\x52\xc7\x21\xd7\xca\xb5\x9d\x44\xd4\x10\xd5\x5a\x07\xb7\x3a\x59\xad\x4e\x8f\x56\xab\x15\xa1\x6a\x5f\x2e\xcf\x3e\xd2\xb2\xa8\x9c\xad\x75\xd3\x7b\xce\x84\x10\x02\xd1\x6b\xfd\xb8\x2e\x5c\x17\x73\x3b\xfe\xdb\x8d\xd1\x8d\x6d\x7a\xad\x08\x5b\xd4\x4e\x8d\x98\xd2\x21\x83\x23\x71\x04\x38\xf1\xd6\x3b\x71\x40\x78\x36\x48\xf9\x81\x17\x1f\xe8\x86\xb9\x0d\x14\x1d\x39\x6b\x9e\x48\xd6\x35\x57\x91\x82\x6b\x99\x30\x21\x14\xd8\x6b\x74\x04\xb7\xe3\x73\x88\x71\x89\x84\x26\x11\xde\x04\xe6\xe1\xd2\x56\xde\x33\x85\xc8\xdd\xe9\xe2\x03\x82\xa5\x5f\x62\x4a\x86\xc5\xdf\x27\xfb\xa1\x3b\xff\xe9\xe6\x77\x30\x6c\x9d\x19\x06\x26\x67\xef\xb8\x45\x5d\xbc\xb4\x9c\x63\xe6\x33\x10\xec\x20\x8d\x27\x0f\x69\x27\x03\x95\xde\xdd\xb3\x5d\xd2\x0d\xfa\x12\x23\x7a\x48\x3a\xcd\x38\x9c\xa2\x4b\x81\x76\x0e\x99\x26\x46\xc5\x9c\x5b\x2b\xad\x0a\xb4\x73\xfe\x3e\x50\x8d\x3c\x4f\x17\xb3\xa4\x50\xcc\xab\xbe\x3d\xfb\x72\x3b\xb2\x7a\x7e\xdb\xf7\x79\xbe\xce\x46\x76\x06\x34\x0e\xad\x08\x84\x29\x9c\x94\x48\x8a\xcb\x49\xb1\xf4\xee\x0c\x4d\x66\x99\xc6\xf1\x33\x26\xe8\x15\x7a\xa0\xff\x71\x06\x7c\x09\x76\x66\x7e\x21\xdf\xec\xac\x66\xfb\xe9\xeb\x0c\x9a\x16\xd5\x1c\xdb\x6f\xac\x39\xf8\xce\xea\x1a\x0c\x6f\xb6\xd7\xdc\x30\xad\xb1\x39\xb6\xdf\x67\x7b\xf0\xbb\xc5\x26\x86\xfd\x52\xcc\xaa\xd6\x51\x81\x37\x5d\x68\xc3\x57\x18\xff\xfd\x3b\xc1\xf4\xc5\xbf\x01\x00\x00\xff\xff\x66\x54\x39\x69\xd1\x05\x00\x00")

func dataDockerfileTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataDockerfileTemplate,
		"data/Dockerfile.template",
	)
}

func dataDockerfileTemplate() (*asset, error) {
	bytes, err := dataDockerfileTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Dockerfile.template", size: 1489, mode: os.FileMode(420), modTime: time.Unix(1448756047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/Dockerfile-centos.template": dataDockerfileCentosTemplate,
	"data/Dockerfile-lucid.template": dataDockerfileLucidTemplate,
	"data/Dockerfile.template": dataDockerfileTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"Dockerfile-centos.template": &bintree{dataDockerfileCentosTemplate, map[string]*bintree{}},
		"Dockerfile-lucid.template": &bintree{dataDockerfileLucidTemplate, map[string]*bintree{}},
		"Dockerfile.template": &bintree{dataDockerfileTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

